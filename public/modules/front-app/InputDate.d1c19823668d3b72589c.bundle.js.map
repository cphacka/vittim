{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack:///./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputDateWidget.js","webpack:///./resources/modules/front-app/src/js/store/forms-data-storage/actions.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_assertThisInitialized","self","ReferenceError","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","TypeError","prototype","create","constructor","_iterableToArray","iter","Symbol","iterator","from","_possibleConstructorReturn","call","_setPrototypeOf","p","_taggedTemplateLiteral","strings","raw","slice","freeze","defineProperties","_toConsumableArray","isArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","_typeof","_unsupportedIterableToArray","minLen","n","toString","name","test","window","altrpHelpers","isEditor","parseOptionsFromSettings","replaceContentWithData","renderAssetIcon","moment","getDataFromLocalStorage","altrpLibs","BlueprintDatetime","DateInput","TimePrecision","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputDateWidget","props","timeInput","onChange","val","userInput","Date","element","getSettings","getTime","format","isValid","setState","state","dispatchFieldValueToStore","formId","getFormId","fieldName","getFieldId","indexOf","_","isObject","appStore","dispatch","changeFormFieldValue","change_actions","actionsManager","default","callAllWidgetActions","getIdForAction","getValue","timestamp","nullable","get","getState","formsStore","toDate","component","elementDecorator","defaultValue","getContent","timePrecision","typeDate","locale","MINUTE","options","paramsForUpdate","altrpSelectRef","React","createRef","this","prevProps","prevState","currentModel","getProperty","contentLoaded","currentDataStorage","updateValue","content_calculation","altrpforms","prevContext","altrpdata","getData","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","getCurrentModel","currentDataStorageLoaded","changedField","altrpstorage","isEqual","replace","eval","e","console","error","message","getId","path","formData","parseParamsFromString","AltrpModel","isEmpty","JSON","stringify","Resource","route","getRoute","getQueried","filters","data","getAll","label","label_icon","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","zIndex","content_label","className","style","content_required","type","frame","document","body","getElementById","contentWindow","dayPickerProps","firstDayOfWeek","months","weekdaysShort","minimalStyle","timePickerProps","showArrowButtons","precision","undefined","input","getName","minDate","maxDate","add","popoverProps","portalContainer","minimal","popoverClassName","canClearSelection","parseDate","str","disabled","content_readonly","placeholder","content_placeholder","formatDate","date","Component","CHANGE_FORM_FIELD_VALUE","CLEAR_FORM_FIELD_VALUE"],"mappings":"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","file":"InputDate.d1c19823668d3b72589c.bundle.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import _typeof from \"@babel/runtime/helpers/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","const {\r\n  isEditor,\r\n  parseOptionsFromSettings,\r\n  replaceContentWithData,\r\n  renderAssetIcon,\r\n  moment,\r\n  getDataFromLocalStorage\r\n} = window.altrpHelpers;\r\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\r\nconst { DateInput, TimePrecision } = window.altrpLibs.BlueprintDatetime;\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n  .altrp-date-field-container .bp3-popover-wrapper, .altrp-date-field-container .bp3-popover-target {\r\n    width: 100%;\r\n  }\r\n\r\n  .altrp-date-picker-popover .bp3-datepicker-caption select + .bp3-icon {\r\n    right: 2px !important;\r\n  }\r\n\r\n  .altrp-date-picker-popover .bp3-datepicker-year-select select {\r\n    padding: 0 0 0 2px;\r\n  }\r\n`)\r\n\r\nconst AltrpFieldContainer = styled.div`\r\n  ${({ settings: { content_label_position_type } }) => {\r\n    switch (content_label_position_type) {\r\n      case \"left\": {\r\n        return \"display: flex\";\r\n      }\r\n      case \"right\": {\r\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\r\n      }\r\n    }\r\n    return \"\";\r\n  }}\r\n`;\r\n\r\nclass InputDateWidget extends Component {\r\n  timeInput = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n\r\n    this.defaultValue = this.getContent(\"content_default_value\") || \"\";\r\n\r\n\r\n    this.timePrecision = null;\r\n    this.typeDate = props.element.getSettings(\"content_time_type\", \"date\");\r\n    this.locale = this.props.element.getSettings(\"content_locale\", \"en\");\r\n\r\n    switch (this.typeDate) {\r\n      case \"date\":\r\n        this.typeDate = \"LL\";\r\n        break;\r\n      case \"time\":\r\n        this.typeDate = \"LT\";\r\n        this.timePrecision = TimePrecision.MINUTE\r\n        break\r\n      case \"dateTime\":\r\n        this.typeDate = \"llll\";\r\n        this.timePrecision = TimePrecision.MINUTE\r\n        break\r\n    }\r\n\r\n    let value = moment().locale(this.locale).toDate();\r\n    const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n\r\n    if(this.defaultValue) {\r\n      value = moment(this.defaultValue, format)\r\n      value = value.isValid() ? value.format(format) : '';\r\n    }\r\n\r\n    this.state = {\r\n      settings: { ...props.element.getSettings() },\r\n      options: parseOptionsFromSettings(\r\n        props.element.getSettings(\"content_options\")\r\n      ),\r\n      paramsForUpdate: null\r\n    };\r\n    this.altrpSelectRef = React.createRef();\r\n\r\n    this.dispatchFieldValueToStore(value);\r\n  }\r\n\r\n  /**\r\n   * Чистит значение\r\n   */\r\n  clearValue() {\r\n    this.onChange(\"\");\r\n    this.dispatchFieldValueToStore(\"\", true);\r\n  }\r\n\r\n  /**\r\n   * Загрузка виджета\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  async _componentDidMount(prevProps, prevState) {\r\n    if (this.props.element.getSettings(\"content_options\")) {\r\n      let options = parseOptionsFromSettings(\r\n        this.props.element.getSettings(\"content_options\")\r\n      );\r\n\r\n      this.setState(state => ({ ...state, options }));\r\n    }\r\n\r\n    let value = this.state.value;\r\n\r\n    /**\r\n     * Если динамическое значение загрузилось,\r\n     * то используем this.getContent для получение этого динамического значения\r\n     * старые динамические данные\r\n     * */\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n\r\n    /**\r\n     * Если модель обновилась при смене URL\r\n     */\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n\r\n      if(value) {\r\n        value = moment(value).locale(this.locale).toDate()\r\n        this.setState(\r\n          state => ({ ...state, value, contentLoaded: true }),\r\n          () => {\r\n            this.dispatchFieldValueToStore(value);\r\n          }\r\n        );\r\n      } else {\r\n        this.setState(\r\n          state => ({ ...state, contentLoaded: true }),\r\n        );\r\n      }\r\n\r\n      const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n      value = moment(value, format);\r\n      value = value.isValid() ? value.format(format) : '';\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    if (\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      !this.state.contentLoaded\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n\r\n      if(value) {\r\n        const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n        value = moment(value, format);\r\n        value = value.isValid() ? value.format(format) : '';\r\n        this.setState(\r\n          state => ({ ...state, value, contentLoaded: true }),\r\n          () => {\r\n            this.dispatchFieldValueToStore(value);\r\n          }\r\n        );\r\n      } else {\r\n        this.setState(\r\n          state => ({ ...state, contentLoaded: true }),\r\n        );\r\n      }\r\n      const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n      value = moment(value, format);\r\n      value = value.isValid() ? value.format(format) : '';\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (this.state.value !== value) {\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновление виджета\r\n   */\r\n  async _componentDidUpdate(prevProps, prevState) {\r\n\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\r\n    ) {\r\n      let value = this.getContent(\r\n        \"content_default_value\",\r\n      );\r\n      if(value) {\r\n        const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n        value = moment(value, format);\r\n        value = value.isValid() ? value.format(format) : '';\r\n        this.setState(\r\n          state => ({ ...state, value, contentLoaded: true }),\r\n          () => {\r\n            this.dispatchFieldValueToStore(value);\r\n          }\r\n        );\r\n      } else {\r\n        this.setState(\r\n          state => ({ ...state, contentLoaded: true }),\r\n        );\r\n      }\r\n      const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n      value = moment(value, format);\r\n      value = value.isValid() ? value.format(format) : '';\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n\r\n\r\n    this.updateValue(prevProps);\r\n  }\r\n\r\n  /**\r\n   * Обновить значение если нужно\r\n   * @param {{}} prevProps\r\n   */\r\n  updateValue(prevProps) {\r\n    if (isEditor()) {\r\n      return;\r\n    }\r\n\r\n    let content_calculation = this.props.element.getSettings(\r\n      \"content_calculation\"\r\n    );\r\n    const altrpforms = this.props.formsStore;\r\n    const fieldName = this.props.element.getFieldId();\r\n    const formId = this.props.element.getFormId();\r\n\r\n    if (!content_calculation) {\r\n      /**\r\n       * Обновить значение, если formsStore изменилось из другого компонента\r\n       */\r\n      const path = `${formId}.${fieldName}`;\r\n      if (\r\n        this.props.formsStore !== prevProps.formsStore &&\r\n        _.get(altrpforms, path) !== this.state.value\r\n      ) {\r\n        this.setState(state => ({\r\n          ...state,\r\n          value: moment(_.get(altrpforms, path)).locale(this.locale).toDate()\r\n        }));\r\n      }\r\n      return;\r\n    }\r\n\r\n    const prevContext = {};\r\n    const altrpdata = this.props.currentDataStorage.getData();\r\n    const altrpmodel = this.props.currentModel.getData();\r\n    const altrpuser = this.props.currentUser.getData();\r\n    const altrppagestate = this.props.altrpPageState.getData();\r\n    const altrpresponses = this.props.altrpresponses.getData();\r\n    const altrpmeta = this.props.altrpMeta.getData();\r\n    const context = this.props.element.getCurrentModel().getData();\r\n\r\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\r\n      context.altrpdata = altrpdata;\r\n      if (!altrpdata.currentDataStorageLoaded) {\r\n        prevContext.altrpdata = altrpdata;\r\n      } else {\r\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\r\n      }\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\r\n      context.altrpforms = altrpforms;\r\n      /**\r\n       * Не производим вычисления, если изменилось текущее поле\r\n       */\r\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\r\n        prevContext.altrpforms = altrpforms;\r\n      } else {\r\n        prevContext.altrpforms = prevProps.formsStore;\r\n      }\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\r\n      context.altrpmodel = altrpmodel;\r\n      prevContext.altrpmodel = prevProps.currentModel.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\r\n      context.altrppagestate = altrppagestate;\r\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\r\n      context.altrpmeta = altrpmeta;\r\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\r\n      context.altrpresponses = altrpresponses;\r\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\r\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\r\n    }\r\n\r\n    if (\r\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\r\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\r\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\r\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\r\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\r\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      `${formId}.${fieldName}` === altrpforms.changedField\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let value = \"\";\r\n\r\n    try {\r\n      content_calculation = content_calculation\r\n        .replace(/}}/g, \"')\")\r\n        .replace(/{{/g, \"_.get(context, '\");\r\n      value = eval(content_calculation);\r\n      if (value === this.state.value) {\r\n        return;\r\n      }\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    } catch (e) {\r\n      console.error(\r\n        \"Evaluate error in Input: '\" + e.message + \"'\",\r\n        this.props.element.getId()\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновляет опции для селекта при обновлении данных, полей формы\r\n   */\r\n  async updateOptions() {\r\n    {\r\n      let formId = this.props.element.getFormId();\r\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\r\n      let formData = _.get(this.props.formsStore, [formId], {});\r\n      paramsForUpdate = parseParamsFromString(\r\n        paramsForUpdate,\r\n        new AltrpModel(formData)\r\n      );\r\n      /**\r\n       * Сохраняем параметры запроса, и если надо обновляем опции\r\n       */\r\n      let options = [...this.state.options];\r\n\r\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\r\n        if (!_.isEmpty(paramsForUpdate)) {\r\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\r\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\r\n            options = await new Resource({\r\n              route: this.getRoute()\r\n            }).getQueried({ filters: paramsForUpdate });\r\n          } else {\r\n            options = await new Resource({ route: this.getRoute() }).getQueried(\r\n              paramsForUpdate\r\n            );\r\n          }\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        } else if (this.state.paramsForUpdate) {\r\n          options = await new Resource({ route: this.getRoute() }).getAll();\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        }\r\n\r\n        this.setState(state => ({\r\n          ...state,\r\n          paramsForUpdate,\r\n          options\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Изменение значения в виджете\r\n   * @param val\r\n   * @param {boolean} userInput\r\n   */\r\n  onChange = (val, userInput) =>{\r\n    let value = \"\";\r\n\r\n    if (val) {\r\n      value = new Date(val);\r\n      let timestamp = this.props.element.getSettings(\"content_timestamp\");\r\n\r\n      if (timestamp) {\r\n        value = value.getTime(); // timestamp\r\n      } else{\r\n        const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n        value = moment(value, format);\r\n        value = value.isValid() ? value.format(format) : '';\r\n      }\r\n    }\r\n    this.setState(state=>({...state, value}))\r\n    this.dispatchFieldValueToStore(value, userInput);\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Передадим значение в хранилище формы\r\n   * @param {*} value\r\n   * @param {boolean} userInput true - имзенилось пользователем\r\n   */\r\n  dispatchFieldValueToStore = async (value, userInput = false) => {\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n    if (fieldName.indexOf(\"{{\") !== -1) {\r\n      fieldName = replaceContentWithData(fieldName);\r\n    }\r\n\r\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\r\n      this.props.appStore.dispatch(\r\n        changeFormFieldValue(fieldName, value, formId, userInput)\r\n      );\r\n\r\n      if (userInput) {\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n\r\n        if (change_actions && !isEditor()) {\r\n          const actionsManager = (\r\n            await import(\r\n              /* webpackChunkName: 'ActionsManager' */\r\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n            )\r\n          ).default;\r\n          await actionsManager.callAllWidgetActions(\r\n            this.props.element.getIdForAction(),\r\n            \"change\",\r\n            change_actions,\r\n            this.props.element\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Взовращает имя для атрибута name\r\n   * @return {string}\r\n   */\r\n  getName() {\r\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Date}\r\n   */\r\n  getValue = ()=>{\r\n    let value ;\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n    const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD'\r\n    const timestamp = this.props.element.getSettings(\"content_timestamp\");\r\n    const nullable = this.props.element.getSettings(\"nullable\");\r\n\r\n    if(isEditor()){\r\n      if(!nullable) {\r\n        value = new Date();\r\n      }\r\n    } else {\r\n\r\n      value = _.get(appStore.getState().formsStore, `${formId}`, '')\r\n      value = _.get(value, fieldName, '')\r\n      if(!value){\r\n        if(!nullable) {\r\n          value = new Date();\r\n        }\r\n      } else if(timestamp){\r\n        value = new Date(value);\r\n      } else {\r\n        value = moment(value, format)\r\n        value = value.toDate();\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n  render() {\r\n    let label = null;\r\n    const settings = this.props.element.getSettings();\r\n    const {\r\n      label_icon\r\n    } = settings;\r\n    let classLabel = \"\";\r\n    let styleLabel = {};\r\n    const content_label_position_type = this.props.element.getResponsiveSetting(\r\n      \"content_label_position_type\"\r\n    );\r\n\r\n    switch (content_label_position_type) {\r\n      case \"top\":\r\n        styleLabel = {\r\n          marginBottom: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"bottom\":\r\n        styleLabel = {\r\n          marginTop: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"left\":\r\n        styleLabel = {\r\n          marginRight: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"altrp-field-label-container-left\";\r\n        break;\r\n      case \"absolute\":\r\n        styleLabel = {\r\n          position: \"absolute\",\r\n          zIndex: 2\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n    }\r\n\r\n    if (this.state.settings.content_label) {\r\n      label = (\r\n        <div\r\n          className={\"altrp-field-label-container \" + classLabel}\r\n          style={styleLabel}\r\n        >\r\n          <label\r\n            className={`altrp-field-label ${this.state.settings.content_required\r\n              ? \"altrp-field-label--required\"\r\n              : \"\"\r\n              }`}\r\n          >\r\n            {this.state.settings.content_label}\r\n          </label>\r\n          {label_icon && label_icon.type && (\r\n            <span className=\"altrp-label-icon\">\r\n              {renderAssetIcon(label_icon)}\r\n            </span>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      label = null;\r\n    }\r\n\r\n\r\n    if (0) {\r\n      const isValid = moment.unix(value).isValid();\r\n\r\n      if (isValid) {\r\n        try {\r\n          value = moment.unix(value / 1000).format(\"YYYY-MM-DD\");\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    }\r\n\r\n    let frame = document.body;\r\n\r\n    if (isEditor()) {\r\n      frame = document.getElementById(\"editorContent\").contentWindow.document.body\r\n    }\r\n\r\n    const locale = this.locale;\r\n    let typeDate = this.props.element.getSettings(\"content_time_type\", \"date\");\r\n    let timePrecision = this.timePrecision;\r\n\r\n    const dayPickerProps = {\r\n      firstDayOfWeek: 1,\r\n      className: this.typeDate === 'time' ? 'altrp-hidden' : '',\r\n    }\r\n\r\n    switch (locale) {\r\n      case \"ru\":\r\n        dayPickerProps.months = [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"];\r\n        dayPickerProps.weekdaysShort = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб',]\r\n    }\r\n\r\n    const minimalStyle = this.props.element.getResponsiveSetting(\"picker_minimal\", false);\r\n    const timePickerProps = {\r\n      showArrowButtons: true,\r\n      precision: timePrecision,\r\n      onChange: typeDate === 'date' ? this.onChange : undefined,\r\n      className: typeDate === 'date' ? 'altrp-hidden' : '',\r\n    };\r\n    const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n    const input = (\r\n      <div className=\"altrp-input-wrapper\">\r\n        <DateInput\r\n          name={this.getName()}\r\n          minDate={new Date(0)}\r\n          maxDate={moment().add(20,'year').toDate()}\r\n          dayPickerProps={dayPickerProps}\r\n          popoverProps={{\r\n            portalContainer: frame,\r\n            minimal: minimalStyle,\r\n            popoverClassName: \"altrp-date-picker-popover altrp-date-picker-popover-\" + this.props.element.getId(),\r\n            // popoverClassName: \"altrp-date-pickerpopover\" + this.props.element.getId(),\r\n          }}\r\n          onChange={this.typeDate !== 'LT' ? this.onChange : undefined}\r\n          className={\"altrp-date-picker\" + this.props.element.getId()}\r\n          timePrecision={timePrecision}\r\n          canClearSelection={false}\r\n          // showActionsBar\r\n          parseDate={(str, locale) => {\r\n            return moment(str, this.typeDate).locale(locale).toDate();\r\n          }}\r\n          timePickerProps={timePickerProps}\r\n          disabled={this.state.settings.content_readonly}\r\n          placeholder={this.state.settings.content_placeholder}\r\n          formatDate={(date, locale) => {\r\n            return moment(date).locale(locale).format(format);\r\n          }}\r\n          value={this.getValue() || null}\r\n          locale={locale}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <AltrpFieldContainer\r\n        settings={settings}\r\n        className=\"altrp-field-container altrp-date-field-container \"\r\n      >\r\n        {content_label_position_type === \"top\" ? label : \"\"}\r\n        {content_label_position_type === \"left\" ? label : \"\"}\r\n        {content_label_position_type === \"right\" ? label : \"\"}\r\n        {content_label_position_type === \"absolute\" ? label : \"\"}\r\n        {/* .altrp-field-label-container */}\r\n        {input}\r\n        {content_label_position_type === \"bottom\" ? label : \"\"}\r\n      </AltrpFieldContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputDateWidget;\r\n","export const CHANGE_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\r\nexport const CLEAR_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\r\n\r\n/**\r\n * Получает данные поля формы и сохраняет в хранилище\r\n * @param {string}fieldName\r\n * @param {*}value\r\n * @param {string}formId\r\n * @param {boolean}userInput\r\n * @return {{type: string, fieldName: *, value: *, formId: *}}\r\n */\r\nexport function changeFormFieldValue(fieldName, value, formId, userInput) {\r\n\r\n  return {\r\n    type: CHANGE_FORM_FIELD_VALUE,\r\n    fieldName,\r\n    value,\r\n    formId,\r\n    changedField: userInput ? `${formId}.${fieldName}` : null,\r\n  };\r\n}\r\n/**\r\n * Очистить данные поля формы и сохраняет в хранилище\r\n * @param {string | null}formId\r\n * @return {{type: string, fieldName: *, value: *, formId: *}}\r\n */\r\nexport function clearFormStorage(formId = null) {\r\n  return {\r\n    type: CLEAR_FORM_FIELD_VALUE,\r\n    formId,\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}