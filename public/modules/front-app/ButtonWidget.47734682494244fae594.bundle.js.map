{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack:///./resources/modules/editor/src/js/components/widgets/ButtonWidget.js"],"names":["_assertThisInitialized","self","ReferenceError","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","TypeError","prototype","create","constructor","_possibleConstructorReturn","call","_setPrototypeOf","p","_typeof","Symbol","iterator","window","altrpHelpers","getComponentByElementId","getHTMLElementById","isEditor","parseURLTemplate","printElements","renderAsset","scrollToElement","globalDefaults","push","Link","ButtonWidget","props","getClasses","classes","isActive","isDisabled","state","settings","element","getSettings","pending","component","elementDecorator","baseRender","render","onClick","bind","default","unregisterWidgetActions","this","getId","e","persist","preventDefault","getResponsiveSetting","length","stopPropagation","actionsManager","console","log","callAllWidgetActions","getIdForAction","getForms","setState","forEach","form","submit","getModelId","res","success","redirect_to_prev_page","redirect_after","history","back","data","alert","message","error","target","href","replace","location","origin","pathname","indexOf","elementId","mainScrollbars","toggleTrigger","includes","IDs","split","elementsToPrint","trim","getStylesHTMLElement","stylesElement","_","get","document","head","link_link","tooltip","advanced_tooltip","background_image","modelData","hasCardModel","getCardModel","getData","currentModel","position_css_classes","url","buttonText","getContent","buttonMediaRight","button_icon_right","buttonMediaLeft","button_icon_left","buttonMediaTop","button_icon_top","buttonMediaBottom","button_icon_bottom","existingIconsString","buttonInner","sort","join","className","isObject","button","id","position_css_id","title","link","toPrevPage","tag","to","Component"],"mappings":"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","file":"ButtonWidget.47734682494244fae594.bundle.js","sourcesContent":["export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"@babel/runtime/helpers/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","const {\n  getComponentByElementId,\n  getHTMLElementById,\n  isEditor,\n  parseURLTemplate,\n  printElements,\n  renderAsset,\n  scrollToElement\n} = window.altrpHelpers;\n\n(window.globalDefaults = window.globalDefaults || []).push(`\n  .altrp-btn-wrapper {\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n\n    & img {\n      max-width: 100%;\n    }\n  }\n\n  .altrp-btn svg {\n    display: block;\n  }\n  .altrp-btn:hover {\n    text-decoration: none;\n  }\n\n  .altrp-btn {\n    width: auto;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 6px;\n    flex-direction: row;\n    background-color: #343B4C;\n    color: #FFFFFF;\n    padding-top: 20px;\n    padding-right: 25px;\n    padding-bottom: 20px;\n    padding-left: 25px\n\n    &_gray {\n      background-color: #8E94AA;\n      color: #fff;\n    }\n\n    &__icon {\n      transform: scale(0.6);\n    }\n\n    &-icon {\n      display: flex;\n      justify-content: center;\n    }\n\n    & svg {\n      height: 25px;\n      width: 25px;\n    }\n  }\n\n  .btn-container-row {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .btn-container-column {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n`);\n\nconst Link = window.Link;\n\nclass ButtonWidget extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      settings: props.element.getSettings(),\n      pending: false\n    };\n    props.element.component = this;\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    if(props.baseRender){\n      this.render = props.baseRender(this);\n    }\n    this.onClick = this.onClick.bind(this);\n  }\n  /**\n   * Компонент удаляется со страницы\n   */\n  async _componentWillUnmount() {\n    const actionsManager = (\n      await import(/* webpackChunkName: 'ActionsManager' */\n        \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n      )\n    ).default;\n    actionsManager.unregisterWidgetActions(this.props.element.getId());\n  }\n\n  /**\n   * Клик по кнопке\n   * @param e\n   * @return {Promise<void>}\n   */\n  async onClick(e) {\n    e.persist();\n    if (isEditor()) {\n      e.preventDefault();\n    } else if (this.props.element.getResponsiveSetting(\"actions\", null, []).length) {\n      e.preventDefault();\n      e.stopPropagation();\n      const actionsManager = (\n        await import(/* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n        )\n      ).default;\n      console.log(this.props.element.getSettings(\"actions\", []));\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        'click',\n        this.props.element.getSettings(\"actions\", []),\n        this.props.element\n      );\n    }\n    if (this.props.element.getForms().length) {\n      this.setState(state => ({ ...state, pending: true }));\n      this.props.element.getForms().forEach(\n        /**\n         * @param {AltrpForm} form\n         */ async form => {\n          try {\n            let res = await form.submit(\n              this.getModelId(),\n              this.props.element.getResponsiveSetting(\"form_confirm\")\n            );\n            if (res.success) {\n              let {\n                redirect_to_prev_page,\n                redirect_after\n              } = this.state.settings;\n              if (redirect_to_prev_page) {\n                return history.back();\n              }\n              if (redirect_after) {\n                redirect_after = parseURLTemplate(redirect_after, res.data);\n                return this.props.history.push(redirect_after);\n              }\n\n              if (this.props.element.getResponsiveSetting(\"text_after\", null,\"\")) {\n                alert(this.props.element.getResponsiveSetting(\"text_after\", null, \"\"));\n              }\n            } else if (res.message) {\n              alert(res.message);\n            }\n            this.setState(state => ({ ...state, pending: false }));\n          } catch (e) {\n            console.error(e);\n            this.setState(state => ({ ...state, pending: false }));\n          }\n        }\n      );\n    }\n    // else      if (\n    //   this.props.element.getSettings(\"popup_trigger_type\") &&\n    //   this.props.element.getSettings(\"popup_id\")\n    // ) {\n    //   this.props.appStore.dispatch(\n    //     togglePopup(this.props.element.getSettings(\"popup_id\"))\n    //   );\n    //   /**\n    //    * Проверим надо ли по ID скроллить к элементу\n    //    */\n    // }\n    else if (\n      e.target.href &&\n      e.target.href\n        .replace(window.location.origin + window.location.pathname, \"\")\n        .indexOf(\"#\") === 0\n    ) {\n      let elementId = e.target.href\n        .replace(window.location.origin + window.location.pathname, \"\")\n        .replace(\"#\", \"\");\n      const element = getHTMLElementById(elementId);\n      if (element) {\n        e.preventDefault();\n        scrollToElement(mainScrollbars, element);\n      }\n    } else if (this.props.element.getResponsiveSetting(\"hide_elements_trigger\")) {\n      this.props.toggleTrigger(\n        this.props.element.getResponsiveSetting(\"hide_elements_trigger\")\n      );\n    } else if (\n      this.props.element\n        .getResponsiveSetting(\"other_action_type\", '',[])\n        .includes(\"print_elements\")\n    ) {\n      let IDs = this.props.element.getResponsiveSetting(\"print_elements_ids\", null,\"\");\n      IDs = IDs.split(\",\");\n      let elementsToPrint = [];\n      IDs.forEach(elementId => {\n        if (!elementId || !elementId.trim()) {\n          return;\n        }\n        getHTMLElementById(elementId.trim()) &&\n          elementsToPrint.push(getHTMLElementById(elementId));\n        if (getComponentByElementId(elementId.trim())?.getStylesHTMLElement) {\n          let stylesElement = getComponentByElementId(\n            elementId.trim()\n          ).getStylesHTMLElement();\n          if (stylesElement) {\n            elementsToPrint.push(stylesElement);\n          }\n        }\n      });\n      if (_.get(window, \"stylesModule.stylesContainer.current\")) {\n        elementsToPrint.push(\n          _.get(window, \"stylesModule.stylesContainer.current\")\n        );\n      }\n      elementsToPrint.push(document.head);\n      printElements(elementsToPrint);\n    }\n  }\n\n  /**\n   * Получить css классы для кнопки\n   */\n  getClasses = ()=>{\n    let classes = 'altrp-btn ';\n    if(this.isActive()){\n      classes += 'active '\n    }\n    if(this.isDisabled()){\n      classes += 'state-disabled '\n    }\n    return classes;\n  }\n\n  render() {\n    const { link_link = {}, advanced_tooltip: tooltip } = this.state.settings;\n    const { back } = history;\n    const background_image = this.props.element.getResponsiveSetting(\n      \"background_image\",\n      null,\n      {}\n    );\n\n    let modelData = this.props.element.hasCardModel()\n      ? this.props.element.getCardModel().getData()\n      : this.props.currentModel.getData();\n    let classes =\n      this.getClasses() + (this.state.settings.position_css_classes || \"\");\n    if (background_image.url) {\n      classes += \" altrp-background-image\";\n    }\n\n    let buttonText = this.getContent(\"button_text\");\n    let buttonMediaRight = { ...this.state.settings.button_icon_right };\n    let buttonMediaLeft = { ...this.state.settings.button_icon_left };\n    let buttonMediaTop = { ...this.state.settings.button_icon_top };\n    let buttonMediaBottom = { ...this.state.settings.button_icon_bottom };\n\n    const showIcon = buttonMediaRight.url || buttonMediaLeft.url || buttonMediaTop.url || buttonMediaBottom.url;\n\n    let existingIconsString = '';\n\n    if (showIcon) {\n      if (buttonMediaRight.url) {\n        existingIconsString += 'r'\n      }\n\n      if (buttonMediaLeft.url) {\n        existingIconsString += 'l'\n      }\n\n      if (buttonMediaTop.url) {\n        existingIconsString += 't'\n      }\n\n      if (buttonMediaBottom.url) {\n        existingIconsString += 'b'\n      }\n    }\n\n    existingIconsString = existingIconsString.split('').sort().join('');\n\n    let buttonInner = buttonText || \"\";\n\n    if (existingIconsString === 'r') {\n      buttonInner = (\n        <div className=\"btn-container-row\">\n          <span></span>\n          {buttonText}\n          <span className={\"altrp-btn-icon-right \"}>\n            {renderAsset(buttonMediaRight)}{\" \"}\n          </span>\n        </div>\n      )\n    }\n\n\n    if (existingIconsString === 'l') {\n      buttonInner = (\n        <div className=\"btn-container-row\">\n          <span className={\"altrp-btn-icon-left \"}>\n            {renderAsset(buttonMediaLeft)}{\" \"}\n          </span>\n          {buttonText}\n          <span></span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 't') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span className={\"altrp-btn-icon-top \"}>\n            {renderAsset(buttonMediaTop)}{\" \"}\n          </span>\n          {buttonText}\n          <span></span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'b') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span></span>\n          {buttonText}\n          <span className={\"altrp-btn-icon-bottom \"}>\n            {renderAsset(buttonMediaBottom)}{\" \"}\n          </span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'blrt') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span className={\"altrp-btn-icon-top \"}>\n            {renderAsset(buttonMediaTop)}{\" \"}\n          </span>\n          <div className=\"btn-container-row\">\n            <span className={\"altrp-btn-icon-left \"}>\n              {renderAsset(buttonMediaLeft)}{\" \"}\n            </span>\n            {buttonText}\n            <span className={\"altrp-btn-icon-right \"}>\n              {renderAsset(buttonMediaRight)}{\" \"}\n            </span>\n          </div>\n          <span className={\"altrp-btn-icon-bottom \"}>\n            {renderAsset(buttonMediaBottom)}{\" \"}\n          </span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'brt') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span className={\"altrp-btn-icon-top \"}>\n            {renderAsset(buttonMediaTop)}{\" \"}\n          </span>\n          <div className=\"btn-container-row\">\n            <span></span>\n            {buttonText}\n            <span className={\"altrp-btn-icon-right \"}>\n              {renderAsset(buttonMediaRight)}{\" \"}\n            </span>\n          </div>\n          <span className={\"altrp-btn-icon-bottom \"}>\n            {renderAsset(buttonMediaBottom)}{\" \"}\n          </span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'blt') {\n      buttonInner = (\n         <div className=\"btn-container-column\">\n          <span className={\"altrp-btn-icon-top \"}>\n            {renderAsset(buttonMediaTop)}{\" \"}\n          </span>\n          <div className=\"btn-container-row\">\n            <span className={\"altrp-btn-icon-left \"}>\n              {renderAsset(buttonMediaLeft)}{\" \"}\n            </span>\n            {buttonText}\n            <span></span>\n          </div>\n          <span className={\"altrp-btn-icon-bottom \"}>\n            {renderAsset(buttonMediaBottom)}{\" \"}\n          </span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'lrt') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span className={\"altrp-btn-icon-top \"}>\n            {renderAsset(buttonMediaTop)}{\" \"}\n          </span>\n          <div className=\"btn-container-row\">\n            <span className={\"altrp-btn-icon-left \"}>\n              {renderAsset(buttonMediaLeft)}{\" \"}\n            </span>\n            {buttonText}\n            <span className={\"altrp-btn-icon-right \"}>\n              {renderAsset(buttonMediaRight)}{\" \"}\n            </span>\n          </div>\n          <span></span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'blr') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span></span>\n          <div className=\"btn-container-row\">\n            <span className={\"altrp-btn-icon-left \"}>\n              {renderAsset(buttonMediaLeft)}{\" \"}\n            </span>\n            {buttonText}\n            <span className={\"altrp-btn-icon-right \"}>\n              {renderAsset(buttonMediaRight)}{\" \"}\n            </span>\n          </div>\n          <span className={\"altrp-btn-icon-bottom \"}>\n            {renderAsset(buttonMediaBottom)}{\" \"}\n          </span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'rt') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span className={\"altrp-btn-icon-top \"}>\n            {renderAsset(buttonMediaTop)}{\" \"}\n          </span>\n          <div className=\"btn-container-row\">\n            <span></span>\n            {buttonText}\n            <span className={\"altrp-btn-icon-right \"}>\n              {renderAsset(buttonMediaRight)}{\" \"}\n            </span>\n          </div>\n          <span></span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'lt') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span className={\"altrp-btn-icon-top \"}>\n            {renderAsset(buttonMediaTop)}{\" \"}\n          </span>\n          <div className=\"btn-container-row\">\n            <span className={\"altrp-btn-icon-left \"}>\n              {renderAsset(buttonMediaLeft)}{\" \"}\n            </span>\n            {buttonText}\n            <span></span>\n          </div>\n          <span></span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'bt') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span className={\"altrp-btn-icon-top \"}>\n            {renderAsset(buttonMediaTop)}{\" \"}\n          </span>\n          <div className=\"btn-container-row\">\n            <span></span>\n            {buttonText}\n            <span></span>\n          </div>\n          <span className={\"altrp-btn-icon-bottom \"}>\n            {renderAsset(buttonMediaBottom)}{\" \"}\n          </span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'br') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span></span>\n          <div className=\"btn-container-row\">\n            <span></span>\n            {buttonText}\n            <span className={\"altrp-btn-icon-right \"}>\n              {renderAsset(buttonMediaRight)}{\" \"}\n            </span>\n          </div>\n          <span className={\"altrp-btn-icon-bottom \"}>\n            {renderAsset(buttonMediaBottom)}{\" \"}\n          </span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'lr') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span></span>\n          <div className=\"btn-container-row\">\n            <span className={\"altrp-btn-icon-left \"}>\n              {renderAsset(buttonMediaLeft)}{\" \"}\n            </span>\n            {buttonText}\n            <span className={\"altrp-btn-icon-right \"}>\n              {renderAsset(buttonMediaRight)}{\" \"}\n            </span>\n          </div>\n          <span></span>\n        </div>\n      )\n    }\n\n    if (existingIconsString === 'bl') {\n      buttonInner = (\n        <div className=\"btn-container-column\">\n          <span></span>\n          <div className=\"btn-container-row\">\n            <span className={\"altrp-btn-icon-left \"}>\n              {renderAsset(buttonMediaLeft)}{\" \"}\n            </span>\n            {buttonText}\n            <span></span>\n          </div>\n          <span className={\"altrp-btn-icon-bottom \"}>\n            {renderAsset(buttonMediaBottom)}{\" \"}\n          </span>\n        </div>\n      )\n    }\n\n    if (this.state.pending) {\n      classes += \" altrp-disabled\";\n    }\n\n    // classes +=\n    //   this.state.settings.link_button_type === \"dropbar\"\n    //     ? \"altrp-btn-dropbar\"\n    //     : \"\";\n\n    // let icon =\n    //   buttonMedia && showIcon && buttonMedia.assetType ? (\n    //     <span className={\"altrp-btn-icon \"}>\n    //       {renderAsset(buttonMedia)}{\" \"}\n    //     </span>\n    //   ) : (\n    //     \"\"\n    //   );\n\n    let url = link_link.url\n      ? link_link.url.replace(\":id\", this.getModelId() || \"\")\n      : \"\";\n    if (_.isObject(this.props.currentModel)) {\n      url = parseURLTemplate(link_link.url || \"\", modelData);\n    }\n\n    let button = <button\n      onClick={this.onClick}\n      className={classes}\n      id={this.state.settings.position_css_id}\n      title={tooltip || null}\n    >\n      {buttonInner}\n    </button>;\n    // let buttonTemplate = (\n    //   <button\n    //     onClick={this.onClick}\n    //     className={classes}\n    //     id={this.state.settings.position_css_id}\n    //     title={tooltip || null}\n    //   >\n    //     {buttonText}\n    //     {\n    //       showIcon ? (\n    //         ! isSSR() && <span className={\"altrp-btn-icon \"}>\n    //       {renderAsset(buttonMedia)}{\" \"}\n    //       </span>\n    //       ) : \"\"\n    //     }\n    //   </button>\n    // );\n\n    // switch (this.props.element.getResponsiveSetting(\"link_button_type\", null,\"none\")) {\n    //   case \"dropbar\":\n    //     button = (\n    //       <Suspense fallback={<div>Загрузка...</div>}>\n    //         <Dropbar\n    //           elemenentId={this.props.element.getId()}\n    //           settings={this.props.element.getSettings()}\n    //           className=\"btn\"\n    //           element={this.props.element}\n    //           getContent={this.getContent}\n    //           showDelay={this.state.settings.show_delay_dropbar_options}\n    //         >\n    //           {buttonTemplate}\n    //         </Dropbar>\n    //       </Suspense>\n    //     );\n    //     break;\n    //   default:\n    //     button = buttonTemplate;\n    // }\n\n    let link = null;\n    if (\n      this.state.settings.link_link?.url &&\n      !this.state.settings.link_link.toPrevPage\n    ) {\n      if (this.state.settings.link_link.tag === \"a\" || isEditor()) {\n        let target = _.get(this.state.settings, \"link_link.openInNew\")\n          ? \"blank\"\n          : \"\";\n        link = (\n          <a\n            href={url}\n            onClick={this.onClick}\n            className={classes}\n            target={target}\n            title={tooltip || null}\n          >\n            {\" \"}\n            {buttonInner}\n          </a>\n        );\n      } else {\n        link = (\n          <Link to={url} href={url} onClick={this.onClick} className={classes} title={tooltip || null}>\n            {\" \"}\n            {buttonInner}\n          </Link>\n        );\n      }\n    }\n\n    if (_.get(this.state, \"settings.link_link.toPrevPage\")) {\n      link = (\n        <button\n          onClick={() => (isEditor() ? null : back())}\n          className={classes}\n          id={this.state.settings.position_css_id}\n          title={tooltip || null}\n        >\n          {buttonInner}\n        </button>\n      );\n    }\n\n    return <div className=\"altrp-btn-wrapper\">\n      {link || button || buttonMediaRight || buttonMediaLeft || buttonMediaTop || buttonMediaBottom}\n    </div>;\n    // return React.createElement(tag, buttonProps, <>{this.state.settings.button_text}{icon}</>);\n  }\n}\n\n\nexport default ButtonWidget;\n"],"sourceRoot":""}