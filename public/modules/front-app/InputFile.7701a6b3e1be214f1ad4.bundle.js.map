{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputFileWidget.js","webpack:///./resources/modules/front-app/src/js/classes/AltrpFile.js","webpack:///./resources/modules/front-app/src/js/store/forms-data-storage/actions.js"],"names":["_assertThisInitialized","self","ReferenceError","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","TypeError","prototype","create","constructor","_possibleConstructorReturn","call","_setPrototypeOf","p","_typeof","Symbol","iterator","window","altrpHelpers","isEditor","parseOptionsFromSettings","replaceContentWithData","getDataFromLocalStorage","FileInput","altrpLibs","Blueprint","globalDefaults","push","InputFileWidget","props","getValue","formId","element","getFormId","fieldName","getFieldId","state","_","get","appStore","getState","formsStore","onChange","e","setState","notActive","filesStorage","isArray","Promise","all","map","file","deleteFileFromStorage","console","error","files","target","limit","getResponsiveSetting","idx","AltrpFile","slice","storeFile","getProperty","dispatchFieldValueToStore","Math","random","forEach","reader","FileReader","readAsDataURL","onload","result","userInput","indexOf","isObject","dispatch","changeFormFieldValue","change_actions","getSettings","actionsManager","default","callAllWidgetActions","getIdForAction","component","elementDecorator","wrapperRef","React","createRef","defaultValue","getContent","settings","imageUrls_0","altrpSelectRef","this","prevProps","prevState","options","currentModel","contentLoaded","currentDataStorage","content_options","model_for_options","isEqual","dynamic","updateValue","content_calculation","altrpforms","prevContext","altrpdata","getData","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","getCurrentModel","currentDataStorageLoaded","changedField","altrpstorage","replace","eval","message","getId","path","text","disabled","inputProps","name","getName","accept","multiple","getFileName","join","fileInputProps","className","buttonText","onInputChange","style","backgroundImage","pointerEvents","ref","Component","data","File","type","setProperty","getResource","postFiles","getFile","response","id","delete","resource","Resource","route","AltrpModel","CHANGE_FORM_FIELD_VALUE","CLEAR_FORM_FIELD_VALUE"],"mappings":"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","file":"InputFile.7701a6b3e1be214f1ad4.bundle.js","sourcesContent":["export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"@babel/runtime/helpers/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import AltrpFile from \"../../../../../front-app/src/js/classes/AltrpFile\";\r\n\r\nconst {\r\n  isEditor,\r\n  parseOptionsFromSettings,\r\n  replaceContentWithData,\r\n  getDataFromLocalStorage\r\n} = window.altrpHelpers;\r\nimport {changeFormFieldValue} from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\r\n\r\nconst FileInput = window.altrpLibs.Blueprint.FileInput;\r\n\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n.altrp-widget_input-file .bp3-file-upload-input::after{\r\n  width: auto;\r\n  min-width: 0;\r\n}\r\n.bp3-file-input_preview.bp3-file-input_preview{\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n  background-position: center;\r\n  width: 100px;\r\n  height: 100px;\r\n}\r\n`)\r\n\r\nclass InputFileWidget extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    this.wrapperRef = React.createRef()\r\n    this.defaultValue = this.getContent(\"content_default_value\");\r\n\r\n    this.state = {\r\n      settings: {...props.element.getSettings()},\r\n      value: this.defaultValue,\r\n      imageUrls_0: _.get(props.element.getResponsiveSetting('preview_placeholder'), 'url'),\r\n    };\r\n    this.altrpSelectRef = React.createRef();\r\n    if (this.getContent(\"content_default_value\")) {\r\n      this.dispatchFieldValueToStore(this.defaultValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Чистит значение\r\n   */\r\n  clearValue() {\r\n    this.onChange(null);\r\n    this.dispatchFieldValueToStore(null, true);\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @returns {string | []}\r\n   */\r\n  getValue = () => {\r\n    let value;\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n    if (isEditor()) {\r\n      value = this.state.value;\r\n    } else {\r\n\r\n      value = _.get(appStore.getState().formsStore, `${formId}`, '')\r\n      value = _.get(value, fieldName, '')\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Загрузка виджета\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  async _componentDidMount(prevProps, prevState) {\r\n    if (this.props.element.getSettings(\"content_options\")) {\r\n      let options = parseOptionsFromSettings(\r\n        this.props.element.getSettings(\"content_options\")\r\n      );\r\n\r\n      this.setState(state => ({...state, options}));\r\n    }\r\n\r\n    let value = this.state.value;\r\n\r\n    /**\r\n     * Если динамическое значение загрузилось,\r\n     * то используем this.getContent для получение этого динамического значения\r\n     * старые динамические данные\r\n     * */\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n\r\n    /**\r\n     * Если модель обновилась при смене URL\r\n     */\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({...state, value, contentLoaded: true}),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      !this.state.contentLoaded\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({...state, value, contentLoaded: true}),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (this.state.value !== value) {\r\n      this.setState(\r\n        state => ({...state, value}),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновление виджета\r\n   */\r\n  async _componentDidUpdate(prevProps, prevState) {\r\n    const {content_options, model_for_options} = this.state.settings;\r\n    if (!this.getValue() && this.state.imageUrls_0 !== _.get(this.props.element.getResponsiveSetting('preview_placeholder'), 'url')) {\r\n      this.setState(\r\n        state => ({...state, imageUrls_0: _.get(this.props.element.getResponsiveSetting('preview_placeholder'), 'url')})\r\n      )\r\n    }\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\r\n    ) {\r\n      let value = this.getContent(\r\n        \"content_default_value\",\r\n        this.props.element.getSettings(\"select2_multiple\")\r\n      );\r\n      this.setState(\r\n        state => ({...state, value, contentLoaded: true}),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\r\n     */\r\n    if (\r\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\r\n      this.state.value &&\r\n      this.state.value.dynamic\r\n    ) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n\r\n    if (content_options && !model_for_options) {\r\n      let options = parseOptionsFromSettings(content_options);\r\n      if (!_.isEqual(options, this.state.options)) {\r\n        this.setState(state => ({...state, options}));\r\n      }\r\n    }\r\n    this.updateValue(prevProps);\r\n  }\r\n\r\n  /**\r\n   * Обновить значение если нужно\r\n   * @param {{}} prevProps\r\n   */\r\n  updateValue(prevProps) {\r\n\r\n    if (isEditor()) {\r\n      return;\r\n    }\r\n\r\n    let content_calculation = this.props.element.getSettings(\r\n      \"content_calculation\"\r\n    );\r\n    const altrpforms = this.props.formsStore;\r\n    const fieldName = this.props.element.getFieldId();\r\n    const formId = this.props.element.getFormId();\r\n\r\n    if (!content_calculation) {\r\n      /**\r\n       * Обновить значение, если formsStore изменилось из другого компонента\r\n       */\r\n      const path = `${formId}.${fieldName}`;\r\n      if (\r\n        this.props.formsStore !== prevProps.formsStore &&\r\n        _.get(altrpforms, path) !== this.state.value\r\n      ) {\r\n        this.setState(state => ({\r\n          ...state,\r\n          value: _.get(altrpforms, path)\r\n        }));\r\n      }\r\n      return;\r\n    }\r\n\r\n    const prevContext = {};\r\n    const altrpdata = this.props.currentDataStorage.getData();\r\n    const altrpmodel = this.props.currentModel.getData();\r\n    const altrpuser = this.props.currentUser.getData();\r\n    const altrppagestate = this.props.altrpPageState.getData();\r\n    const altrpresponses = this.props.altrpresponses.getData();\r\n    const altrpmeta = this.props.altrpMeta.getData();\r\n    const context = this.props.element.getCurrentModel().getData();\r\n\r\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\r\n      context.altrpdata = altrpdata;\r\n      if (!altrpdata.currentDataStorageLoaded) {\r\n        prevContext.altrpdata = altrpdata;\r\n      } else {\r\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\r\n      }\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\r\n      context.altrpforms = altrpforms;\r\n      /**\r\n       * Не производим вычисления, если изменилось текущее поле\r\n       */\r\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\r\n        prevContext.altrpforms = altrpforms;\r\n      } else {\r\n        prevContext.altrpforms = prevProps.formsStore;\r\n      }\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\r\n      context.altrpmodel = altrpmodel;\r\n      prevContext.altrpmodel = prevProps.currentModel.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\r\n      context.altrppagestate = altrppagestate;\r\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\r\n      context.altrpmeta = altrpmeta;\r\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\r\n      context.altrpresponses = altrpresponses;\r\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\r\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\r\n    }\r\n\r\n    if (\r\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\r\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\r\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\r\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\r\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\r\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      `${formId}.${fieldName}` === altrpforms.changedField\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let value = \"\";\r\n\r\n    try {\r\n      content_calculation = content_calculation\r\n        .replace(/}}/g, \"')\")\r\n        .replace(/{{/g, \"_.get(context, '\");\r\n      value = eval(content_calculation);\r\n      if (value === this.state.value) {\r\n        return;\r\n      }\r\n      this.setState(\r\n        state => ({...state, value}),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    } catch (e) {\r\n      console.error(\r\n        \"Evaluate error in Input: '\" + e.message + \"'\",\r\n        this.props.element.getId()\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Изменение значения в виджете\r\n   * @param e\r\n   */\r\n  onChange = async (e) => {\r\n    this.setState(state => ({...state, notActive: true}))\r\n    const {filesStorage} = this.state;\r\n    try {\r\n      if(_.isArray(filesStorage))\r\n      {\r\n        await Promise.all(filesStorage.map(async file=>(await file.deleteFileFromStorage())))\r\n      }\r\n    }catch (e) {\r\n      console.error(e);\r\n    }\r\n    const files = e.target.files;\r\n    const limit = this.props.element.getResponsiveSetting('limit');\r\n    let value;\r\n    if (this.props.element.getResponsiveSetting('multiple')) {\r\n      value = _.map(files, (file, idx) => {\r\n        return new AltrpFile(file)\r\n      })\r\n      if(limit){\r\n        value = value.slice(0, limit)\r\n      }\r\n      this.setState(state=>({...state, filesStorage: value}))\r\n      try {\r\n        value = await Promise.all(value.map(async file => ((await file.storeFile()).getProperty('media.id'))))\r\n      }catch (e) {\r\n        console.error(e);\r\n      }\r\n    } else {\r\n      value = new AltrpFile(files[0])\r\n      this.setState(state=>({...state, filesStorage: [value]}))\r\n      try {\r\n        value = (await value.storeFile()).getProperty('media.id')\r\n      }catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n\r\n    if (isEditor()) {\r\n      this.setState(state => ({...state, value}))\r\n    } else {\r\n      this.dispatchFieldValueToStore(value, true)\r\n    }\r\n    this.setState(state => ({...state, key: Math.random()}))\r\n    try {\r\n      _.forEach(files, (file, idx) => {\r\n        if(limit && idx >= limit){\r\n          return\r\n        }\r\n        const reader = new FileReader\r\n        reader.readAsDataURL(file)\r\n        reader.onload = () => {\r\n          this.setState(state => {\r\n              state[`imageUrls_${idx}`] = reader.result;\r\n              return {...state};\r\n            }\r\n          )\r\n        }\r\n      })\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    this.setState(state => ({...state, notActive: false}))\r\n\r\n  }\r\n\r\n  /**\r\n   * Передадим значение в хранилище формы\r\n   * @param {*} value\r\n   * @param {boolean} userInput true - имзенилось пользователем\r\n   */\r\n  dispatchFieldValueToStore = async (value, userInput = false) => {\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n\r\n    if (fieldName.indexOf(\"{{\") !== -1) {\r\n      fieldName = replaceContentWithData(fieldName);\r\n    }\r\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\r\n      this.props.appStore.dispatch(\r\n        changeFormFieldValue(fieldName, value, formId, userInput)\r\n      );\r\n\r\n      if (userInput) {\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n\r\n        if (change_actions && !isEditor()) {\r\n          const actionsManager = (\r\n            await import(\r\n              /* webpackChunkName: 'ActionsManager' */\r\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n              )\r\n          ).default;\r\n          await actionsManager.callAllWidgetActions(\r\n            this.props.element.getIdForAction(),\r\n            \"change\",\r\n            change_actions,\r\n            this.props.element\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Взовращает имя для атрибута name\r\n   * @return {string}\r\n   */\r\n  getName() {\r\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\r\n  }\r\n\r\n  render() {\r\n    const {element} = this.props\r\n    let disabled = element.getResponsiveSetting('readonly');\r\n\r\n    const inputProps = {\r\n      name: this.getName(),\r\n      accept: element.getResponsiveSetting('accept'),\r\n      multiple: element.getResponsiveSetting('multiple'),\r\n    }\r\n    let text\r\n    const {filesStorage, notActive} = this.state\r\n    if(_.isArray(filesStorage)){\r\n      text = filesStorage.map(file => file.getFileName()).join(', ');\r\n    } else if(filesStorage instanceof AltrpFile) {\r\n      text = filesStorage.getFileName()\r\n    } else {\r\n      text = replaceContentWithData(element.getResponsiveSetting('placeholder'), element.getCurrentModel().getData())\r\n    }\r\n    const fileInputProps = {\r\n      disabled,\r\n      key: this.state.key,\r\n      inputProps,\r\n      text,\r\n      className: `${notActive ? 'pointer-event-none' : ''}`,\r\n      buttonText: replaceContentWithData(element.getResponsiveSetting('button_text'), element.getCurrentModel().getData()),\r\n      onInputChange: this.onChange\r\n    }\r\n    if (element.getResponsiveSetting('preview')) {\r\n      fileInputProps.style = {\r\n        backgroundImage: `url(${this.state.imageUrls_0})`,\r\n        pointerEvents : notActive ? 'none' : '',\r\n      }\r\n      fileInputProps.className = 'bp3-file-input_preview'\r\n    }\r\n    return (\r\n      <FileInput {...fileInputProps} ref={this.wrapperRef}/>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default InputFileWidget;\r\n","/**\r\n * @class AltrpFile\r\n */\r\nclass AltrpFile extends AltrpModel{\r\n  constructor(data) {\r\n    if(data instanceof File){\r\n      data = {file: data}\r\n    }\r\n    // if(! data.file instanceof File){\r\n    //   throw new Error('Need a File instance in AltrpFile Constructor')\r\n    // }\r\n    super(data);\r\n    if(data?.file?.type?.indexOf('image') >= 0){\r\n      const reader = new FileReader\r\n      reader.onload = ()=>{\r\n        this.setProperty('dataAsUrl', reader.result)\r\n      }\r\n      reader.readAsDataURL(data.file)\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Promise<AltrpFile>}\r\n   */\r\n  async storeFile(){\r\n    try {\r\n      let response = await AltrpFile.getResource().postFiles([this.getFile()])\r\n      this.setProperty('media', response[0])\r\n    }catch (e) {\r\n      console.error(e);\r\n    }\r\n    return this\r\n  }\r\n  /**\r\n   *\r\n   * @returns {Promise<AltrpFile>}\r\n   */\r\n  async deleteFileFromStorage(){\r\n    const id = this.getProperty('media.id');\r\n    if(! id){\r\n      return this\r\n    }\r\n    try {\r\n      let response = await AltrpFile.getResource().delete(id)\r\n      this.setProperty('media', null)\r\n    }catch (e) {\r\n      console.error(e);\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * @return {File}\r\n   */\r\n  getFile(){\r\n    return this.getProperty('file')\r\n  }\r\n  getFileName(){\r\n    return this.getFile()?.name || ''\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {string}\r\n   */\r\n  toString(){\r\n    return this.getFileName()\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Resource}\r\n   */\r\n  static getResource(){\r\n    if(! AltrpFile.resource){\r\n      AltrpFile.resource = new window.altrpHelpers.Resource({route: '/ajax/media'})\r\n    }\r\n    return AltrpFile.resource\r\n  }\r\n}\r\n\r\nexport default AltrpFile\r\n","export const CHANGE_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\r\nexport const CLEAR_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\r\n\r\n/**\r\n * Получает данные поля формы и сохраняет в хранилище\r\n * @param {string}fieldName\r\n * @param {*}value\r\n * @param {string}formId\r\n * @param {boolean}userInput\r\n * @return {{type: string, fieldName: *, value: *, formId: *}}\r\n */\r\nexport function changeFormFieldValue(fieldName, value, formId, userInput) {\r\n\r\n  return {\r\n    type: CHANGE_FORM_FIELD_VALUE,\r\n    fieldName,\r\n    value,\r\n    formId,\r\n    changedField: userInput ? `${formId}.${fieldName}` : null,\r\n  };\r\n}\r\n/**\r\n * Очистить данные поля формы и сохраняет в хранилище\r\n * @param {string | null}formId\r\n * @return {{type: string, fieldName: *, value: *, formId: *}}\r\n */\r\nexport function clearFormStorage(formId = null) {\r\n  return {\r\n    type: CLEAR_FORM_FIELD_VALUE,\r\n    formId,\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}