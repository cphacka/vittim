{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputDateRangeWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","moment","altrpHelpers","InputDateRangeWidget","props","dispatchFieldValueToStore","index","userInput","formId","element","getFormId","fieldName","getFieldId","indexOf","replaceContentWithData","_","isObject","appStore","dispatch","changeFormFieldValue","getValue","formIdStart","fieldNameStart","formIdEnd","fieldNameEnd","isEditor","state","getState","formsStore","settings","getSettings","component","elementDecorator","baseRender","render","locale","typeDate","timePrecision","TimePrecision","handleChange","bind","setState","s","format","dayPickerProps","months","weekdaysShort","frame","document","body","getElementById","contentWindow","formatDate","date","parseDate","str","toDate","onChange","startInputProps","placeholder","getResponsiveSetting","endInputProps","popoverProps","usePortal","popoverClassName","getId","portalContainer","Component"],"mappings":"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","file":"InputDateRange.b1888d713e5146797767.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import React from \"react\";\r\nconst {\r\n  moment\r\n} = window.altrpHelpers;\r\nimport { DateRangeInput, TimePrecision } from \"@blueprintjs/datetime\";\r\nimport {changeFormFieldValue} from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\r\nimport {isEditor} from \"../../../../../front-app/src/js/helpers\";\r\n\r\nclass InputDateRangeWidget extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    let settings = props.element.getSettings();\r\n    this.state = {\r\n      settings: settings,\r\n      value: [null, null],\r\n    };\r\n\r\n    props.element.component = this;\r\n    if(window.elementDecorator){\r\n      window.elementDecorator(this);\r\n    }\r\n    if(props.baseRender){\r\n      this.render = props.baseRender(this);\r\n    }\r\n    this.locale = this.props.element.getSettings(\"content_locale\", \"en\");\r\n\r\n    switch (this.typeDate) {\r\n      case \"date\":\r\n        this.typeDate = \"LL\";\r\n        break;\r\n      case \"time\":\r\n        this.typeDate = \"LT\";\r\n        this.timePrecision = TimePrecision.MINUTE\r\n        break\r\n      case \"dateTime\":\r\n        this.typeDate = \"llll\";\r\n        this.timePrecision = TimePrecision.MINUTE\r\n        break\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  handleChange(value) {\r\n    if(isEditor()) {\r\n      this.setState(s => ({\r\n        ...s,\r\n        value\r\n      }))\r\n    } else {\r\n      this.dispatchFieldValueToStore(value[0], 0, true)\r\n      this.dispatchFieldValueToStore(value[1], 1, true)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Передадим значение в хранилище формы\r\n   * @param {*} value\r\n   * @param index\r\n   * @param {boolean} userInput true - имзенилось пользователем\r\n   */\r\n  dispatchFieldValueToStore = async (value, index, userInput = false) => {\r\n\r\n    let formId;\r\n    let fieldName;\r\n\r\n    if(index === 0) {\r\n      formId = this.props.element.getFormId(\"form_id_start\");\r\n      fieldName = this.props.element.getFieldId(\"field_id_start\");\r\n    } else if(index === 1) {\r\n      formId = this.props.element.getFormId(\"form_id_end\");\r\n      fieldName = this.props.element.getFieldId(\"field_id_end\");\r\n    }\r\n    if (fieldName.indexOf(\"{{\") !== -1) {\r\n      fieldName = replaceContentWithData(fieldName);\r\n    }\r\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\r\n      this.props.appStore.dispatch(\r\n        changeFormFieldValue(fieldName, value, formId, userInput)\r\n      );\r\n      // if (userInput) {\r\n      //   const change_actions = this.props.element.getSettings(\"change_actions\");\r\n      //\r\n      //   if (change_actions && !isEditor()) {\r\n      //     const actionsManager = (\r\n      //       await import(\r\n      //         /* webpackChunkName: 'ActionsManager' */\r\n      //         \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n      //         )\r\n      //     ).default;\r\n      //     await actionsManager.callAllWidgetActions(\r\n      //       this.props.element.getIdForAction(),\r\n      //       \"change\",\r\n      //       change_actions,\r\n      //       this.props.element\r\n      //     );\r\n      //   }\r\n      // }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getValue = () => {\r\n    let value;\r\n    let formIdStart = this.props.element.getFormId(\"form_id_start\");\r\n    let fieldNameStart = this.props.element.getFieldId(\"field_id_start\");\r\n    let formIdEnd = this.props.element.getFormId(\"form_id_end\");\r\n    let fieldNameEnd = this.props.element.getFieldId(\"field_id_end\");\r\n\r\n    if (isEditor()) {\r\n      value = this.state.value;\r\n    } else {\r\n      let valueStart\r\n\r\n      valueStart = _.get(appStore.getState().formsStore, `${formIdStart}`, '')\r\n      valueStart = valueStart[fieldNameStart] || null\r\n      let valueEnd\r\n\r\n      valueEnd = _.get(appStore.getState().formsStore, `${formIdEnd}`, '')\r\n      valueEnd = valueEnd[fieldNameEnd] || null\r\n\r\n      value = [\r\n        valueStart,\r\n        valueEnd\r\n      ];\r\n    }\r\n\r\n\r\n    return value\r\n  }\r\n\r\n  render(){\r\n\r\n    const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n    const dayPickerProps = {};\r\n\r\n    let value = this.getValue();\r\n\r\n    const locale = this.locale || \"ru\";\r\n\r\n    switch (locale) {\r\n      case \"ru\":\r\n        dayPickerProps.months = [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"];\r\n        dayPickerProps.weekdaysShort = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб',]\r\n    }\r\n\r\n    let frame = document.body;\r\n\r\n    if (isEditor()) {\r\n      frame = document.getElementById(\"editorContent\").contentWindow.document.body\r\n    }\r\n\r\n    return <DateRangeInput\r\n      formatDate={date => moment(date).locale(locale).format(format)}\r\n      parseDate={str => moment(str, this.typeDate).locale(locale).toDate()}\r\n      onChange={this.handleChange}\r\n      dayPickerProps={dayPickerProps}\r\n      value={value}\r\n      startInputProps={{\r\n        placeholder: this.props.element.getResponsiveSetting(\"start_placeholder\", \"\", \"start date\")\r\n      }}\r\n      endInputProps={{\r\n        placeholder: this.props.element.getResponsiveSetting(\"end_placeholder\", \"\", \"end date\")\r\n      }}\r\n      popoverProps={{\r\n        usePortal: true,\r\n        popoverClassName: \"altrp-portal\" + this.props.element.getId(),\r\n        portalContainer: frame\r\n      }}\r\n\r\n    />\r\n  }\r\n}\r\n\r\nexport default InputDateRangeWidget\r\n"],"sourceRoot":""}