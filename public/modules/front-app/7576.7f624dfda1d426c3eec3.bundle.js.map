{"version":3,"sources":["webpack:///./resources/modules/front-app/src/js/constants/INPUT_WIDGETS.js","webpack:///./resources/modules/front-app/src/js/classes/FrontElement.js","webpack:///./resources/modules/front-app/src/js/store/fonts-storage/actions.js"],"names":["data","withoutComponent","this","name","settings","lazySection","children","cssClassStorage","type","id","isEditor","getName","componentClass","window","elementsManager","getComponentClass","frontElementsManager","parent","forms","component","root","modelsList","getId","appStore","dispatch","addSettings","length","console","error","findClosestByType","getType","indexOf","updateStyles","widgetsForForm","INPUT_WIDGETS","getSettings","getFormId","formInit","actionsRegistered","actionsManager","default","registerWidgetActions","getIdForAction","formsIsInit","formsManager","method","addForm","registerForm","modelName","getModelName","afterLoginRedirect","afterLogoutRedirect","getForms","forEach","form","addSubmitButton","addField","push","idForAction","getCurrentModel","getProperty","settingName","_default","_","get","cloneDeep","stylesModulePromise","then","stylesModule","addElementStyles","getStringifyStyles","styles","screens","CONSTANTS","splice","breakpoint","rules","hasOwnProperty","selector","concat","join","screen","isObject","mediaQuery","stringStyles","log","has","getValue","maskIsValid","props","elementDisplay","elementIsDisplay","value","state","isArray","trueValue","falseValue","valueReplacement","getRoot","getModelsList","modelInfo","related","_modelInfo","getContent","modelsStorage","modelCallbacksStorage","callback","changeCss","toPairs","classStorage","element","model","index","rootElement","cardModel","isCard","AltrpModel","Number","hasCardModel","getCardModel","getState","currentModel","setting","fieldId","replaceContentWithData","getData","formId","fonts","font","addFont","dynamicSettingName","elementState","getResponsiveSetting","templateType","newSettings","assign","set","setState","ADD_FONT","REMOVE_FONT","elementId","controllerName","fontName"],"mappings":"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","file":"7576.7f624dfda1d426c3eec3.bundle.js","sourcesContent":["const INPUT_WIDGETS = [\r\n  'input',\r\n  'input-select',\r\n  'input-select-tree',\r\n  'input-multi-select',\r\n  'input-select2',\r\n  'input-switch',\r\n  'input-wysiwyg',\r\n  'input-checkbox',\r\n  'input-radio',\r\n  'input-image-select',\r\n  'input-file',\r\n  'input-gallery',\r\n  'input-accept',\r\n  'input-date',\r\n  'input-textarea',\r\n  'input-slider',\r\n  'input-text-common',\r\n  'input-text-autocomplete',\r\n  'input-password',\r\n  'input-tel',\r\n  'input-number',\r\n  'input-email',\r\n  'input-date-range',\r\n  'input-hidden',\r\n  'stars',\r\n];\r\nexport default INPUT_WIDGETS;\r\n","import CONSTANTS from \"../../../../editor/src/js/consts\";\r\nimport {\r\n  altrpRandomId,\r\n  getResponsiveSetting,\r\n  isEditor,\r\n  replaceContentWithData,\r\n  valueReplacement\r\n} from \"../helpers\";\r\nimport AltrpModel from \"../../../../editor/src/js/classes/AltrpModel\";\r\nimport {addFont} from \"../store/fonts-storage/actions\";\r\nimport {addSettings} from \"../store/elements-settings/actions\";\r\nimport INPUT_WIDGETS from \"../constants/INPUT_WIDGETS\";\r\n\r\nclass FrontElement {\r\n\r\n  constructor(data = {}, withoutComponent = false){\r\n    this.name = data.name;\r\n    this.settings = data.settings;\r\n    this.lazySection = data.lazySection;\r\n    this.children = data.children;\r\n    this.cssClassStorage = data.cssClassStorage;\r\n    this.type = data.type;\r\n    this.id = data.id;\r\n\r\n    if(isEditor() && ! withoutComponent && this.getName()){\r\n      this.componentClass = window.elementsManager.getComponentClass(this.getName());\r\n    } else if(window.frontElementsManager && ! withoutComponent){\r\n      this.componentClass = window.frontElementsManager.getComponentClass(this.getName());\r\n    }\r\n    this.parent = null;\r\n    /**\r\n     * Список форм для текущего элемента (кнопки, интпута)\r\n     * @type {AltrpForm[]}\r\n     */\r\n    this.forms = [];\r\n    /**\r\n     * Ссылка на компонент\r\n     * @type {React.Component | null}\r\n     */\r\n    this.component = null;\r\n\r\n    /**\r\n     * Ссылка на родителя\r\n     * @type {FrontElement}\r\n     */\r\n    /**\r\n     * Ссылка на корневой элемент шаблона\r\n     * @type {FrontElement}\r\n     */\r\n    this.root = null;\r\n\r\n    /**\r\n     * Список данных моделей для текущего шаблона. Например:\r\n     *  {\r\n     *      modelName: string\r\n     *      modelId: 1,\r\n     *  }\r\n     *  Для каждого шаблона типа content устанавливается одна обязательная модель Page\r\n     *  Для шаблонов header и footer нужно предусмотреть изменение данных моджели типа Page\r\n     *  (при смене страницы header footer могут не меняться)\r\n     *  * @type {array}\r\n     */\r\n    this.modelsList = []\r\n    if(this.getId()){\r\n      appStore.dispatch(addSettings(this.getId(), this.getName(), {...this.settings}, this?.children?.length || 0))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Устанавливаем ссылку на элемент-родитель\r\n   * @param {FrontElement} parent\r\n   */\r\n  setParent(parent){\r\n    if(! parent){\r\n      console.error(this);\r\n    }\r\n    this.parent = parent;\r\n  }\r\n\r\n\r\n  /**\r\n   * Возвращает ссылку на корневой элемент шаблона\r\n   * @return {FrontElement}\r\n   */\r\n  getRoot(){\r\n    if(!this.root){\r\n      this.root = this.findClosestByType('root-element')\r\n    }\r\n    return this.root;\r\n  }\r\n\r\n  /**\r\n   * Возвращает ссылку на первый элемент указанного типа (поиск идет к корню дерева)\r\n   * @param {string} type\r\n   * @return {FrontElement}\r\n   */\r\n  findClosestByType(type){\r\n    if(type === 'widget' && (this.getType() !== 'widget')){\r\n      return null;\r\n    }\r\n    if(type === 'column' && (['root-element', 'section', ].indexOf(this.getType()) !== -1)){\r\n      return null;\r\n    }\r\n    if(type === 'section' && (this.getType() === 'root-element')){\r\n      return null;\r\n    }\r\n    if (this.getType() === type){\r\n      return this;\r\n    }\r\n    if(! this.parent){\r\n      return null;\r\n      // console.log(type);\r\n      // console.log(this);\r\n    }\r\n    return this.parent.findClosestByType(type)\r\n  }\r\n\r\n  /**\r\n   * Вызывается для обновления элемента\r\n   */\r\n  update(){\r\n    this.updateStyles();\r\n\r\n    let widgetsForForm = [\r\n        'button',\r\n      ...INPUT_WIDGETS\r\n    ];\r\n    let widgetsWithActions = [\r\n        'button',\r\n      ...INPUT_WIDGETS\r\n    ];\r\n    /**\r\n     * Инициация событий в первую очередь\r\n     */\r\n    if(widgetsWithActions.indexOf(this.getName()) >= 0 && this.getSettings('actions', []).length){\r\n      try{\r\n        // this.registerActions();\r\n      } catch(e){\r\n        console.error(e);\r\n      }\r\n      // if(this.getName() === 'button'){\r\n      //   return;\r\n      // }\r\n    }\r\n\r\n    if(this.getName() === \"input-date-range\" &&\r\n      this.getFormId(\"form_id_start\") &&\r\n      this.getFormId(\"form_id_end\")\r\n    ) {\r\n      this.formInit();\r\n      return;\r\n    }\r\n\r\n    if(widgetsForForm.indexOf(this.getName()) >= 0 && this.getFormId()){\r\n      this.formInit();\r\n      return;\r\n    }\r\n\r\n    if(widgetsForForm.indexOf(this.getName()) >= 0 && this.getSettings('form_actions') === 'delete'){\r\n      this.formInit();\r\n      return;\r\n    }\r\n  }\r\n  async registerActions(){\r\n    if(this.actionsRegistered){\r\n      return;\r\n    }\r\n    /**\r\n     * @member {ActionsManager|*} actionsManager\r\n     */\r\n    const actionsManager = (await import(/* webpackChunkName: 'ActionsManager' */'./modules/ActionsManager.js')).default;\r\n    switch (this.getName()){\r\n      case 'button':{\r\n        actionsManager.registerWidgetActions(this.getIdForAction(), this.getSettings('actions', []), 'click', this);\r\n      }\r\n      break;\r\n      case 'input':{\r\n        actionsManager.registerWidgetActions(this.getIdForAction(), this.getSettings('actions', []), 'blur', this);\r\n      }\r\n    }\r\n\r\n    this.actionsRegistered = true;\r\n  }\r\n  /**\r\n   * Если элемент поле или кнопка нужно инициализирваоть форму в FormsManager\r\n   */\r\n  async formInit(){\r\n    /**\r\n     * @member {FormsManager} formsManager\r\n     */\r\n    if(! this.component){\r\n      return;\r\n    }\r\n    if(this.formsIsInit){\r\n      return\r\n    }\r\n    this.formsIsInit = true;\r\n    let formsManager = await import(/* webpackChunkName: 'FormsManager' */'../../../../editor/src/js/classes/modules/FormsManager.js');\r\n    formsManager = formsManager.default;\r\n\r\n    switch (this.getName()) {\r\n      case 'button': {\r\n        let method = 'POST';\r\n        switch (this.getSettings('form_actions')){\r\n          case 'add_new':{\r\n            this.addForm(formsManager.registerForm(this.getFormId(), this.getSettings('choose_model'), method));\r\n          }\r\n          break;\r\n          case 'delete':{\r\n            method = 'DELETE';\r\n            let modelName = this.getModelName();\r\n            if(modelName){\r\n              this.addForm(formsManager.registerForm(this.getId(), modelName, method));\r\n            }\r\n          }\r\n          break;\r\n          case 'edit':{\r\n            method = 'PUT';\r\n            let modelName = this.getModelName();\r\n            if(modelName){\r\n              this.addForm(formsManager.registerForm(this.getFormId(), modelName, method));\r\n            }\r\n          }\r\n          break;\r\n          case 'login':{\r\n            method = 'POST';\r\n            this.addForm(formsManager.registerForm(this.getFormId(),\r\n                'login',\r\n                method,\r\n                {afterLoginRedirect:this.getSettings('redirect_after')}));\r\n          }\r\n          break;\r\n          case 'logout':{\r\n            method = 'POST';\r\n            this.addForm(formsManager.registerForm(this.getFormId(),\r\n                'logout',\r\n                method,\r\n                {afterLogoutRedirect:this.getSettings('redirect_after')}\r\n              ));\r\n          }\r\n          break;\r\n          case 'email':{\r\n            method = 'POST';\r\n            this.addForm(formsManager.registerForm(this.getFormId(),\r\n                'email',\r\n                method,\r\n                {afterLogoutRedirect:this.getSettings('redirect_after')}\r\n              ));\r\n          }\r\n          break;\r\n        }\r\n        this.getForms().forEach(form=>{\r\n          form.addSubmitButton(this);\r\n        });\r\n      }\r\n      break;\r\n      case 'input-select':\r\n      case 'input-select-tree':\r\n      case 'input-multi-select':\r\n      case 'input-select2':\r\n      case 'input-switch':\r\n      case 'input-wysiwyg':\r\n      case 'input-checkbox':\r\n      case 'input-radio':\r\n      case 'input-image-select':\r\n      case 'input-file':\r\n      case 'input-gallery':\r\n      case 'input-accept':\r\n      case 'input-date':\r\n      case 'input-textarea':\r\n      case 'input-password':\r\n      case 'input-email':\r\n      case 'input-tel':\r\n      case 'input-number':\r\n      case 'input-hidden':\r\n      case 'input-text':\r\n      case 'input-text-common':\r\n      case 'input-text-autocomplete':\r\n      case 'stars':\r\n\r\n      case 'input': {\r\n        formsManager.addField(this.getFormId(), this);\r\n      }\r\n      break;\r\n\r\n      case 'input-date-range': {\r\n        formsManager.addField(this.getFormId(\"form_id_start\"), this);\r\n        formsManager.addField(this.getFormId(\"form_id_end\"), this);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @return {AltrpForm[]}\r\n   */\r\n  getForms(){\r\n    return this.forms;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {AltrpForm} form\r\n   */\r\n  addForm(form){\r\n    this.forms.push(form);\r\n  }\r\n  /**\r\n   * Возвращает массив потомков текущего элемента\r\n   * @return {array}\r\n   */\r\n\r\n  getChildren(){\r\n    return this.children;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {string}\r\n   */\r\n  getId(){\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * id для повторяющихся виджетов с действиями\r\n   * @return {string}\r\n   */\r\n  getIdForAction(){\r\n    if(! this.idForAction){\r\n      this.idForAction = this.getId() +\r\n        (this.getCurrentModel()?.getProperty('altrpIndex')\r\n          || this.getCurrentModel()?.getProperty('id')\r\n          || '');\r\n    }\r\n    return this.idForAction;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {string}\r\n   */\r\n  getName(){\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {string}\r\n   */\r\n  getType(){\r\n    return this.type;\r\n  }\r\n\r\n  /**\r\n   * Получить настройку или все настройки\r\n   * @param {string} settingName\r\n   * @param {*} _default\r\n   * @return {*}\r\n   */\r\n  getSettings(settingName, _default = ''){\r\n    if(! settingName)\r\n    {\r\n      return _.cloneDeep(this.settings);\r\n    }\r\n    if(_.get(this.settings, settingName) === false || _.get(this.settings, settingName) === 0){\r\n      return _.get(this.settings, settingName);\r\n    }\r\n    return _.get(this.settings, settingName) || _default;\r\n  }\r\n  updateStyles(){\r\n    window.stylesModulePromise.then(stylesModule => {\r\n      /**\r\n       * @member {Styles} stylesModule\r\n       * */\r\n      // console.log(this.id);\r\n      // console.log(this.getId());\r\n      // console.log(this.getName());\r\n      // console.log(this.getType());\r\n      stylesModule.addElementStyles(this.getId(), this.getStringifyStyles());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Возвращает CSS-стили в виде строки\r\n   * для вставки в тег style текущего элемента\r\n   * @return {string}\r\n   */\r\n  getStringifyStyles(){\r\n    let styles = '';\r\n    if(typeof this.settings.styles !== 'object'){\r\n      return styles\r\n    }\r\n    /**\r\n     * Чтобы сохранить последовательность медиа-запросов в CSS,\r\n     * добавлять будем в первоначальной последовательности.\r\n     * Для этого сначала создадим копию массива со всеми настройками экранов\r\n     * @type {{}}\r\n     */\r\n    let screens = _.cloneDeep(CONSTANTS.SCREENS);\r\n    /**\r\n     * Удалим дефолтный - он не нужен\r\n     * @type {{}}\r\n     */\r\n    screens.splice(0,1);\r\n    for(let breakpoint in this.settings.styles){\r\n      let rules = {};\r\n      if(this.settings.styles.hasOwnProperty(breakpoint)){\r\n        for(let settingName in this.settings.styles[breakpoint]){\r\n          if(this.settings.styles[breakpoint].hasOwnProperty(settingName)) {\r\n            for(let selector in this.settings.styles[breakpoint][settingName]){\r\n              if(this.settings.styles[breakpoint][settingName].hasOwnProperty(selector)) {\r\n                rules[selector] = rules[selector] || [];\r\n                // console.log(this.settings.styles[breakpoint][settingName][selector]);\r\n                rules[selector] = rules[selector].concat(this.settings.styles[breakpoint][settingName][selector])\r\n              }\r\n            }\r\n          }\r\n        }\r\n        /**\r\n         * Оборачиваем в медиа запрос при необходимости\r\n         *\r\n         */\r\n        if(breakpoint === CONSTANTS.DEFAULT_BREAKPOINT){\r\n          for(let selector in rules){\r\n            if(rules.hasOwnProperty(selector)){\r\n              styles += `${selector} {` + rules[selector].join('') + '}';\r\n            }\r\n          }\r\n        } else {\r\n          // styles += `${getMediaQueryByName(breakpoint)}{`;\r\n          // for(let selector in rules){\r\n          //   if(rules.hasOwnProperty(selector)){\r\n          //     styles += `${selector} {` + rules[selector].join('') + '}';\r\n          //   }\r\n          // }\r\n          // styles += `}`;\r\n          screens.forEach(screen=>{\r\n            /**\r\n             * Для каждого breakpoint сохраним\r\n             * в соответствующей настройке экрана css правила\r\n             */\r\n            if(screen.name === breakpoint){\r\n              screen.rules = rules;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    screens.forEach(screen=>{\r\n\r\n      /**\r\n       * Если rules записаны, то добавим в styles в нужном порядке\r\n       */\r\n      if(!_.isObject(screen.rules)){\r\n        return;\r\n      }\r\n      styles += `${screen.mediaQuery}{`;\r\n      for(let selector in screen.rules){\r\n        if(screen.rules.hasOwnProperty(selector)){\r\n          styles += `${selector} {` + screen.rules[selector].join('') + '}';\r\n        }\r\n      }\r\n      styles += `}`;\r\n    });\r\n    styles += this.settings.stringStyles || '';\r\n    if(this.settings.stringStyles){\r\n      console.log(this.settings.stringStyles);\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Возвращает css-селектор в виде строки\r\n   * @return {string}\r\n   */\r\n  getSelector(){\r\n    if(this.type === 'root-element'){\r\n      return `.altrp-template-root${this.getId()}`;\r\n    }\r\n    return `.altrp-element${this.getId()}`;\r\n  }\r\n\r\n  /**\r\n   * Возвращает количестве колонок в секции\r\n   * @return {*}\r\n   */\r\n  getColumnsCount(){\r\n    return this.children.length;\r\n  }\r\n\r\n  /**\r\n   *  Проводит валидацию поля, если это виджет input,\r\n   *  если другой виджет, то просто возвращает true\r\n   *  @return {boolean}\r\n   */\r\n  fieldValidate(){\r\n    if(INPUT_WIDGETS.indexOf(this.getName()) === -1){\r\n      return true;\r\n    }\r\n    if(! this.getSettings('content_required')){\r\n      return true;\r\n    }\r\n    if(_.has(this, 'maskIsValid')){\r\n      return this.getValue() && this.maskIsValid;\r\n    }\r\n    return this.getValue();\r\n  }\r\n\r\n  /**\r\n   * Проверяет рекурсивно (проверяет всех предков) виден ли элемент свойство elementDisplay пропсов компонента\r\n   * @return {boolean}\r\n   */\r\n  elementIsDisplay(){\r\n    let display = true;\r\n    if(this.getName() === 'root-element'){\r\n      return true;\r\n    }\r\n    if(this.component.props.elementDisplay || this.getSettings('conditional_ignore_in_forms')){\r\n      display = this.parent ? this.parent.elementIsDisplay() : true;\r\n    } else {\r\n      return false;\r\n    }\r\n    return display;\r\n  }\r\n\r\n  /**\r\n   * Возвращает значение если виджет input, если другое, то null\r\n   */\r\n  getValue(){\r\n    if(INPUT_WIDGETS.indexOf(this.getName()) === -1){\r\n      return null;\r\n    }\r\n    if(! this.elementIsDisplay()){\r\n      return null;\r\n    }\r\n    const elementName = this.getName();\r\n    let value ;\r\n    switch (elementName) {\r\n      case 'input':\r\n      case 'input-textarea':\r\n      case 'input-text-autocomplete':\r\n      case 'stars':\r\n      case  'input-date-range':\r\n      case 'input-text-common':{\r\n        value = this?.component?.getValue() || this?.component?.state?.value || '';\r\n      }break;\r\n\r\n      default:{\r\n        value = this.component.state.value;\r\n      }\r\n    }\r\n\r\n    switch (this.getSettings('content_type')){\r\n      /**\r\n       * Если нужен массив\r\n       */\r\n      case 'checkbox':{\r\n        value = _.isArray(value) ? value : (value ? [value] : []);\r\n      }\r\n        break;\r\n      case 'accept':{\r\n        let trueValue = this.getSettings('accept_checked') || true;\r\n        let falseValue = this.getSettings('accept_unchecked') || false;\r\n        falseValue = valueReplacement(falseValue);\r\n        trueValue = valueReplacement(trueValue);\r\n        value = value ? trueValue : falseValue;\r\n      }\r\n        break;\r\n\r\n\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Список моделей для шаблона включая модель Page\r\n   * @return {AltrpModelUpdater[]}\r\n   */\r\n  getModelsList(){\r\n    return this.getRoot().modelsList || [];\r\n  }\r\n\r\n  /**\r\n   * Имя модели\r\n   * из списка моделей извлекает имя модели не являющейся Page и возращает и это имя\r\n   * @return {string | null}\r\n   */\r\n  getModelName(){\r\n    let modelName = null;\r\n    this.getModelsList().forEach(modelInfo=>{\r\n      if(modelInfo.modelName!=='page' && ! modelInfo.related){\r\n        modelName = modelInfo.modelName\r\n      }\r\n    });\r\n    return modelName;\r\n  }\r\n\r\n  /**\r\n   * Получаем данные о модели (modelName и modelId) из корневого элемента по названию модели\r\n   * @param {string} modelName\r\n   * @return {{}}\r\n   */\r\n  getModelsInfoByModelName(modelName){\r\n    let modelsList = this.getModelsList();\r\n    let modelInfo = null;\r\n    modelsList.forEach(_modelInfo=>{\r\n      if(_modelInfo.modelName === modelName){\r\n        modelInfo = _modelInfo;\r\n      }\r\n    });\r\n    return modelInfo\r\n  }\r\n\r\n  /**\r\n   * @param {AltrpModelUpdater[]} modelsList\r\n   */\r\n  setModelsList(modelsList){\r\n    this.getRoot().modelsList = modelsList;\r\n  }\r\n  /**\r\n   * Добавляет информацию о модели в список моделей\r\n   * @param {{}} modelInfo\r\n   */\r\n  addModelInfo(modelInfo){\r\n    this.getRoot().modelsList = this.getRoot().modelsList || [];\r\n    this.getRoot().modelsList.push({...modelInfo})\r\n  }\r\n\r\n  /**\r\n   * Задайет id для всех моделей корневого элемента не являющихся моделью страницы (page)\r\n   * todo: нужно вызывать в элементе при смене роута в том случае если роут имеет id\r\n   * @param {int} id\r\n   */\r\n  setModelsIds(id){\r\n\r\n  }\r\n\r\n  /**\r\n   * Получает данные для контента элемента\r\n   * делегирует на this.component\r\n   * @param {string} settingName\r\n   * @return {*}\r\n   */\r\n  getContent(settingName){\r\n    if(this.component){\r\n      return this.component.getContent(settingName)\r\n    }\r\n    return'';\r\n  }\r\n\r\n  /**\r\n   * Сохраняет данные модели\r\n   * @param modelName\r\n   * @param data\r\n   */\r\n  setModelData(modelName, data){\r\n    this.modelsStorage = this.modelsStorage || {};\r\n    this.modelsStorage[modelName] = {...data};\r\n    if(this.modelCallbacksStorage && this.modelCallbacksStorage[modelName]){\r\n      this.modelCallbacksStorage[modelName](this.modelsStorage[modelName]);\r\n    }\r\n  }\r\n  /**\r\n   * Подписывает на изменения модели\r\n   */\r\n  onUpdateModelStorage(modelName, callback){\r\n    this.modelCallbacksStorage = this.modelCallbacksStorage || {};\r\n    this.modelCallbacksStorage[modelName] = callback;\r\n    if(this.modelsStorage && this.modelsStorage[modelName]){\r\n      callback(this.modelsStorage[modelName]);\r\n    }\r\n  }\r\n  /**\r\n   * Парсит объект и извлекает из него строку со всеми классами у которых есть свойство prefixClass\r\n   * @return {string}\r\n   */\r\n\r\n  getPrefixClasses() {\r\n    let changeCss = _.toPairs(this.cssClassStorage);\r\n    let classStorage = ' ';\r\n    changeCss.forEach(element => {\r\n      classStorage += `${element[1]} `;\r\n    });\r\n    return classStorage;\r\n  }\r\n\r\n  /**\r\n   * Модель для карточки внутри виджетов\r\n   * @param {AltrpModel} model\r\n   * @param {null | int} index\r\n   */\r\n  setCardModel(model, index = null) {\r\n    let rootElement = this.getRoot();\r\n    if(! model){\r\n      rootElement.cardModel = null;\r\n      rootElement.isCard = false;\r\n      return;\r\n    }\r\n    if(! model instanceof AltrpModel){\r\n      model = new AltrpModel(model);\r\n    }\r\n    index = Number(index);\r\n    // model.setProperty('altrpIndex', index);\r\n    rootElement.cardModel = model;\r\n    rootElement.isCard = true;\r\n  }\r\n\r\n  /**\r\n   * Есть ли данные модели для карточки\r\n   * @return {boolean}\r\n   */\r\n  hasCardModel(){\r\n    let rootElement = this.getRoot();\r\n    if(! rootElement){\r\n      return false;\r\n    }\r\n    return ! ! (rootElement.cardModel && rootElement.isCard)\r\n  }\r\n  /**\r\n   * Получить данные модели для карточки\r\n   * @return {AltrpModel}\r\n   */\r\n  getCardModel(){\r\n    let model;\r\n    if(this.getType() === 'root-element'){\r\n      model = this.cardModel;\r\n    } else {\r\n      model = this.getRoot().cardModel;\r\n    }\r\n    if(! model instanceof AltrpModel){\r\n      model = new AltrpModel(model);\r\n    }\r\n    return model;\r\n  }\r\n\r\n\r\n  /**\r\n   * Возвращает текущую модель для элемента\r\n   * (для карточки на странице будут свои модели)\r\n   * @return {AltrpModel}\r\n   */\r\n  getCurrentModel(){\r\n    return this.hasCardModel() ? this.getCardModel() : (appStore.getState().currentModel || new AltrpModel);\r\n  }\r\n\r\n  /**\r\n   * Получить id поля\r\n   * @param {string} setting если конртоллер имеет кастомное имя\r\n   */\r\n  getFieldId(setting=\"field_id\"){\r\n    let fieldId = this.getSettings(setting);\r\n    if(! fieldId){\r\n      return fieldId;\r\n    }\r\n    if(fieldId.indexOf('{{') !== -1){\r\n      fieldId = replaceContentWithData(fieldId, this.getCurrentModel().getData());\r\n    }\r\n    return fieldId;\r\n  }\r\n  /**\r\n   * Получить id поля\r\n   * @param {string} setting если конртоллер имеет кастомное имя\r\n   */\r\n  getFormId(setting=\"form_id\"){\r\n    let formId = this.getSettings(setting);\r\n    if(! formId){\r\n      return formId;\r\n    }\r\n    if(formId.indexOf('{{') !== -1 && this.component){\r\n      formId = replaceContentWithData(formId, this.getCurrentModel().getData());\r\n    }\r\n    return formId;\r\n  }\r\n\r\n  updateFonts(){\r\n    let fonts = _.get(this.settings,'__altrpFonts__',{});\r\n\r\n    fonts = _.toPairs(fonts);\r\n    fonts.forEach(([settingName, font])=>{\r\n      appStore.dispatch(addFont(this.getId(), settingName, font));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Получить данные динамических настроек\r\n   * @param {string} dynamicSettingName\r\n   * @return {{} | null}\r\n   */\r\n  getDynamicSetting(dynamicSettingName){\r\n    return _.get(this.settings, `altrpDynamicSetting.${dynamicSettingName}`, null);\r\n  }\r\n\r\n  /**\r\n   * значение настройки в зависимости от разрешения\r\n   * @param {string} settingName\r\n   * @param {string} elementState\r\n   * @param _default\r\n   * @return {*}\r\n   */\r\n  getResponsiveSetting(settingName, elementState = '', _default){\r\n    return getResponsiveSetting(this.getSettings(), settingName, elementState, _default)\r\n  }\r\n\r\n  /**\r\n   * Возвращает текущий тип шаблона\r\n   * @return {string}\r\n   */\r\n  getTemplateType(){\r\n    const rootElement = this.getRoot();\r\n    return rootElement ? (rootElement.templateType || 'content') : 'content';\r\n  }\r\n\r\n  /**\r\n   * Обновляем настройки элемента на фронте с обновлением компонента\r\n   * @param value\r\n   * @param settingName\r\n   */\r\n  updateSetting(value, settingName = ''){\r\n    let newSettings;\r\n    if(! settingName && _.isObject(value)){\r\n       newSettings = {..._.assign(this.settings, value)};\r\n    }\r\n    if(settingName){\r\n      newSettings = {...this.settings};\r\n      _.set(newSettings, settingName, value);\r\n    }\r\n    if(newSettings){\r\n      this.settings = newSettings;\r\n      if(this.component){\r\n        this.component.setState(state => ({...state, settings: newSettings}));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default FrontElement\r\n","export const ADD_FONT = 'ADD_FONT';\r\nexport const REMOVE_FONT = 'REMOVE_FONT';\r\n\r\n/**\r\n *\r\n * @param {string} elementId\r\n * @param {string} controllerName\r\n * @param {string} fontName\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function addFont(elementId, controllerName, fontName) {\r\n  return {\r\n    type: ADD_FONT,\r\n    elementId,\r\n    controllerName,\r\n    fontName\r\n  };\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} elementId\r\n * @param {string} controllerName\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function removeFont(elementId, controllerName, ) {\r\n  return {\r\n    type: REMOVE_FONT,\r\n    elementId,\r\n    controllerName,\r\n\r\n  };\r\n}\r\n"],"sourceRoot":""}