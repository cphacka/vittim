{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/front-app/src/js/functions/menus.js","webpack:///./resources/modules/editor/src/js/components/widgets/MenuWidget.js","webpack:///./resources/modules/front-app/src/js/store/menus-storage/actions.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","getMenuByGUID","guid","resource","Resource","route","altrpHelpers","isEditor","mbParseJSON","conditionChecker","renderAsset","altrpLibs","Blueprint","Button","ButtonGroup","Menu","MenuItem","Position","Popover2","globalDefaults","push","props","getMenuData","menuGUID","element","getResponsiveSetting","state","menuData","loading","menus","appStore","getState","altrpMenus","find","menu","children","settings","dispatch","addMenu","setState","getMenuClasses","join","renderSubItems","items","depth","length","popoverProps","usePortal","portalClassName","elementId","portalContainer","EditorFrame","contentWindow","document","body","positionSetting","position","getPosition","map","item","href","url","width","className","mbItemActive","key","id","onClick","e","preventDefault","history","location","icon","dangerouslySetInnerHTML","__html","text","label","renderButton","toggle_icon","_","content","renderVerticalMenu","minimal","elementDecorator","baseRender","render","getId","fill","alignText","rightIcon","setting","TOP_LEFT","TOP_RIGHT","TOP","BOTTOM_LEFT","BOTTOM_RIGHT","BOTTOM","LEFT_TOP","LEFT_BOTTOM","LEFT","RIGHT_TOP","RIGHT_BOTTOM","RIGHT","AUTO","type","operator","modelField","getCurrentModel","Component","ADD_MENU","ADD_MENUS"],"mappings":"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","file":"MenuWidget.bfce5330d6d0d2245756.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import Resource from \"../../../../editor/src/js/classes/Resource\";\r\n\r\n/**\r\n *\r\n * @param guid\r\n * @return {Promise<{}>}\r\n */\r\nexport async function getMenuByGUID(guid = ''){\r\n  if(! guid){\r\n    return null;\r\n  }\r\n  const resource = new Resource({route: '/ajax/menus'})\r\n  let data = await resource.get(guid);\r\n  return data;\r\n}\r\n","import {getMenuByGUID} from \"../../../../../front-app/src/js/functions/menus\";\r\nimport {addMenu} from \"../../../../../front-app/src/js/store/menus-storage/actions\";\r\n\r\nconst { isEditor, mbParseJSON, conditionChecker, renderAsset} = window.altrpHelpers;\r\n\r\n\r\nconst {Button, ButtonGroup, Menu, MenuItem, Position} = window.altrpLibs.Blueprint;\r\nconst Popover2 = window.altrpLibs.Popover2;\r\n\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n.altrp-menu-item__icon svg {\r\n    display: block;\r\n    height: 20px;\r\n    width: 20px;\r\n}\r\n\r\n.altrp-menu {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n`)\r\n\r\nclass MenuWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n\r\n\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    if (props.baseRender) {\r\n      this.render = props.baseRender(this);\r\n    }\r\n    this.elementId = props.element.getId();\r\n  }\r\n\r\n  getMenuData = async () => {\r\n    let menuGUID = this.props.element.getResponsiveSetting('menu')\r\n    if ((this.state.menuData || !menuGUID) && this.menuGUID === menuGUID || this.loading) {\r\n      return\r\n    }\r\n\r\n    this.loading = true;\r\n    const menus = appStore.getState().altrpMenus;\r\n    let menuData = menus.find(menu => menu.guid === menuGUID)\r\n    if (!menuData) {\r\n      menuData = await getMenuByGUID(menuGUID);\r\n      if(menuData) {\r\n        menuData.children = mbParseJSON(menuData.children)\r\n        menuData.settings = mbParseJSON(menuData.settings)\r\n        appStore.dispatch(addMenu(menuData));\r\n      }\r\n    }\r\n    this.setState(state => ({...state, menuData}), () => {\r\n      this.loading = false;\r\n      this.menuGUID = menuGUID\r\n    })\r\n  }\r\n\r\n  renderHorizontalMenu() {\r\n    this.getMenuData();\r\n    const {menuData} = this.state;\r\n    if (!menuData) {\r\n      return 'Select Menu';\r\n    }\r\n    return <ButtonGroup fill={true} alignText=\"left\">\r\n      {menuData.children.map(item => {\r\n        return <Button\r\n          minimal={true}\r\n          icon={<span className=\"altrp-menu-item__icon\" dangerouslySetInnerHTML={{__html: item.icon}}/>}\r\n          rightIcon=\"caret-down\"\r\n          text={item.label}\r\n          href={item.url}\r\n          key={item.id}\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            if(! item.url || isEditor() ){\r\n              return;\r\n            }\r\n            if (!this.props.history) {\r\n              window.location.href = item.url\r\n              return\r\n            }\r\n            this.props.history.push(item.url);\r\n          }}/>\r\n      })}\r\n\r\n    </ButtonGroup>\r\n  }\r\n\r\n  renderVerticalMenu() {\r\n    this.getMenuData();\r\n    const {menuData} = this.state;\r\n    if (!menuData) {\r\n      return 'Select Menu';\r\n    }\r\n\r\n    return <Menu className={this.getMenuClasses()}>\r\n      {/*{menuData.children.map(child)}*/}\r\n      {this.renderSubItems(menuData.children, 1)}\r\n    </Menu>\r\n  }\r\n\r\n  /**\r\n   * @return {string}\r\n   */\r\n  getMenuClasses = () => {\r\n    let classes = ['altrp-menu'];\r\n\r\n    return classes.join(' ');\r\n  }\r\n  /**\r\n   *\r\n   * @param {[]} items\r\n   * @param {int} depth\r\n   * @return {JSX.Element|null}\r\n   */\r\n  renderSubItems = (items, depth) => {\r\n    if (!items.length) {\r\n      return null;\r\n    }\r\n    const {element} = this.props;\r\n    const popoverProps = {\r\n      usePortal: true,\r\n      // isOpen:true ,\r\n      portalClassName: `altrp-portal altrp-portal${this.elementId}`,\r\n      portalContainer: window.EditorFrame ? window.EditorFrame.contentWindow.document.body : document.body,\r\n    };\r\n    let renderButton = this.props.element.getResponsiveSetting('button');\r\n\r\n    // if (depth === 1 && element.getResponsiveSetting('type') === 'horizontal' && !renderButton) {\r\n    //   popoverProps.position = Position.BOTTOM_LEFT;\r\n    // }\r\n\r\n    if(depth === 1) {\r\n      const positionSetting = this.props.element.getResponsiveSetting('popover_position', \"\", \"auto\");\r\n\r\n      popoverProps.position = this.getPosition(positionSetting)\r\n\r\n      popoverProps.portalClassName += \" altrp-menu-first-portal\"\r\n    } else {\r\n      const positionSetting = this.props.element.getResponsiveSetting('sub_popover_position', \"\", \"auto\");\r\n\r\n      popoverProps.position = this.getPosition(positionSetting)\r\n\r\n      popoverProps.portalClassName += \" altrp-sub-portal\"\r\n    }\r\n\r\n    let caret = \"\";\r\n\r\n    // const caretMedia = this.props.element.getResponsiveSetting(\"caret\");\r\n    //\r\n    // if(caretMedia?.type) {\r\n    //   caret = caretMedia\r\n    // }\r\n\r\n    return <>\r\n      {items.map((item) => {\r\n        return <MenuItem\r\n          popoverProps={popoverProps}\r\n          depth={depth}\r\n          href={item.url}\r\n          width={100}\r\n          className={`altrp-menu-item altrp-menu-item${this.elementId} ${this.mbItemActive(item) ? 'active' : ''}`}\r\n          key={item.id}\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            if(isEditor() || ! item.url){\r\n              return;\r\n            }\r\n            if ( !this.props.history || ! item.url) {\r\n              window.location.href = item.url\r\n              return\r\n            }\r\n            this.props.history.push(item.url);\r\n          }}\r\n          icon={<span className=\"altrp-menu-item__icon\" dangerouslySetInnerHTML={{__html: item.icon}}/>}\r\n          // text={<Link className=\"altrp-menu-item__link\" to={item.url}>{item.label}</Link>}>\r\n          text={item.label}>\r\n          {this.renderSubItems(item.children, depth + 1)}\r\n        </MenuItem>\r\n\r\n      })}\r\n    </>\r\n  }\r\n\r\n  getPosition(setting) {\r\n    let position;\r\n\r\n    switch (setting) {\r\n      case \"auto\":\r\n        position = \"auto\";\r\n        break\r\n      case \"top-left\":\r\n        position = Position.TOP_LEFT;\r\n        break\r\n      case \"top-right\":\r\n        position = Position.TOP_RIGHT;\r\n        break\r\n      case \"top\":\r\n        position = Position.TOP;\r\n        break\r\n      case \"bottom-left\":\r\n        position = Position.BOTTOM_LEFT;\r\n        break\r\n      case \"bottom-right\":\r\n        position = Position.BOTTOM_RIGHT;\r\n        break\r\n      case \"bottom\":\r\n        position = Position.BOTTOM;\r\n        break\r\n      case \"left-top\":\r\n        position = Position.LEFT_TOP;\r\n        break\r\n      case \"left-bottom\":\r\n        position = Position.LEFT_BOTTOM;\r\n        break\r\n      case \"left\":\r\n        position = Position.LEFT;\r\n        break\r\n      case \"right-top\":\r\n        position = Position.RIGHT_TOP;\r\n        break;\r\n      case \"right-bottom\":\r\n        position = Position.RIGHT_BOTTOM;\r\n        break\r\n      case \"right\":\r\n        position = Position.RIGHT;\r\n        break\r\n      default:\r\n        position = Position.AUTO\r\n    }\r\n\r\n    return position\r\n  }\r\n\r\n  renderButton = () => {\r\n    const {menuData} = this.state;\r\n    if (!menuData) {\r\n      return null;\r\n    }\r\n    let toggle_icon = _.get(menuData, 'settings.toggle_icon', '')\r\n    const position = this.props.element.getResponsiveSetting(\"popover_position_toggle\", \"\", \"auto\")\r\n    return <Popover2 content={this.renderVerticalMenu()}\r\n                     className=\"altrp-popover\"\r\n                     position={position}\r\n                     portalContainer={window.EditorFrame ? window.EditorFrame.contentWindow.document.body : document.body}\r\n                     portalClassName={`altrp-portal altrp-portal_main altrp-portal${this.elementId}`}\r\n                     minimal={true}>\r\n      <Button className=\"altrp-menu-toggle\" text={toggle_icon ?\r\n        <span className=\"altrp-menu-item__icon\" dangerouslySetInnerHTML={{__html: toggle_icon}}/> : ''}/>\r\n    </Popover2>\r\n  }\r\n\r\n  render() {\r\n    this.getMenuData();\r\n    let type = this.props.element.getResponsiveSetting('type');\r\n    let renderButton = this.props.element.getResponsiveSetting('button');\r\n    if (renderButton) {\r\n      return <>\r\n        {this.renderButton()}\r\n      </>\r\n    }\r\n    switch (type) {\r\n      case 'horizontal': {\r\n        return <>\r\n          {this.renderVerticalMenu()}\r\n        </>\r\n      }\r\n      default: {\r\n        return <>\r\n          {this.renderVerticalMenu()}\r\n        </>;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the given menu item is active (configurable in the admin panel)\r\n   *\r\n   * Проверяем является ли данный элемент меню активным (настраивается в админке)\r\n   *\r\n   * @param {{\r\n   *   compare: string,\r\n   *   value: string,\r\n   *   path: string,\r\n   * }} item\r\n   * @returns {boolean}\r\n   */\r\n  mbItemActive(item) {\r\n    if(! item || !item.operator || ! item.value || ! item.modelField){\r\n      return false;\r\n    }\r\n    return conditionChecker(item, this.props.element.getCurrentModel())\r\n  }\r\n}\r\n\r\nexport default MenuWidget\r\n","export const ADD_MENU = 'ADD_MENU';\r\nexport const ADD_MENUS = 'ADD_MENUS';\r\n/**\r\n *\r\n * @param {{}} menu\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     menu: {},\r\n *   }\r\n */\r\nexport function addMenu(menu) {\r\n  return {\r\n    type: ADD_MENU,\r\n    menu,\r\n  };\r\n}\r\n\r\n/**\r\n *\r\n * @param {[{}]} menus\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     menu: {},\r\n *   }\r\n */\r\nexport function addMenus(menus) {\r\n  return {\r\n    type: ADD_MENUS,\r\n    menus,\r\n  };\r\n}\r\n"],"sourceRoot":""}