{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/altrp-tooltip/AltrpTooltip2.js","webpack:///./resources/modules/editor/src/js/components/widgets/styled-components/NavComponent.js","webpack:///./resources/modules/front-app/src/js/store/current-page/actions.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","Tooltip2","Popover2InteractionKind","altrpHelpers","isEditor","isSSR","offset","slider","size","altrpLibs","ElementLayout","styled","props","minimal","position","horizontal","vertical","offsetArray","parseInt","React","setSize","checkSize","element","current","offsetWidth","offsetHeight","body","document","getElementById","contentWindow","addEventListener","removeEventListener","text","_","isString","children","content","popoverClassName","id","isOpen","open","placement","interactionKind","CLICK","portalContainer","modifiers","eventListeners","enabled","options","renderTarget","ref","p","style","height","width","NavComponent","div","justifyContent","settings","styles","undefined","getResponsiveSetting","simplePropertyStyled","typographic","color","typographicControllerToStyles","colorPropertyStyled","horizontalPadding","verticalPadding","sizeStyled","fill","stroke","iconSizeStyled","marginRight","marginLeft","transformRotate","transformRotateStyled","backgroundColor","borderWidth","heightCalcStyled","borderTopStyle","borderTopColor","borderTopWidth","padding","borderType","borderColor","borderRadius","dimensionsControllerToStyles","borderWidthStyled","alignItems","marginTop","borderRadiusTopRight","borderRadiusBottomLeft","typographicSubmenu","colorSubmenu","strokeSubmenu","background","widthSubmenu","borderTypeSubmenu","borderWidthSubmenu","borderColorSubmenu","borderRadiusSubmenu","borderRadiusSubmenu2","borderRadiusTopRight2","borderRadiusBottomLeft2","borderTop2","elementId","top","unit","right","bottom","left","CHANGE_CURRENT_PAGE","CHANGE_CURRENT_PAGE_PROPERTY","changeCurrentPageProperty","propertyName","type"],"mappings":"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","file":"6993.45e3fb02e50f69f13a96.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import React from 'react';\r\nconst {isEditor, isSSR} = window.altrpHelpers;\r\nimport styled from \"styled-components\";\r\nlet Tooltip2;\r\nlet Popover2InteractionKind\r\n\r\nif(window.altrpLibs) {\r\n  Tooltip2 = window.altrpLibs.Tooltip2;\r\n  Popover2InteractionKind = window.altrpLibs.Popover2InteractionKind;\r\n}\r\n\r\nfunction offset(slider) {\r\n  if(!slider) {\r\n    slider = {size: null}\r\n  } else if(!slider.size) {\r\n    slider = {size: null, ...slider }\r\n  }\r\n\r\n  if(slider.size === 0) {\r\n    return { size: null }\r\n  }\r\n\r\n  return slider\r\n}\r\n\r\nconst ElementLayout = styled.div`\r\n  position: absolute;\r\n  z-index: 0;\r\n  pointer-events: none\r\n`;\r\n\r\nfunction AltrpTooltip2(props) {\r\n  const minimal = props.minimal || false;\r\n  const position = props.position || \"bottom\";\r\n  let horizontal = offset(props.horizontal);\r\n  let vertical = offset(props.vertical);\r\n  let offsetArray = [parseInt(horizontal.size|| 0), parseInt(vertical.size|| 10)];\r\n  const [size, setSize] = React.useState([0, 0]); // [width, height]\r\n\r\n  function checkSize() {\r\n    if(\r\n      props.element.current.offsetWidth !== size[0] &&\r\n      props.element.current.offsetHeight !== size[1]\r\n    ) {\r\n      setSize([\r\n        props.element.current.offsetWidth,\r\n        props.element.current.offsetHeight\r\n      ])\r\n    } else if(props.element.current.offsetWidth !== size[0]) {\r\n      setSize([\r\n        props.element.current.offsetWidth,\r\n        size[1]\r\n      ])\r\n    } else if(props.element.current.offsetHeight !== size[1]) {\r\n      setSize([\r\n        size[0],\r\n        props.element.current.offsetHeight,\r\n      ])\r\n    }\r\n  }\r\n\r\n  switch (position) {\r\n    case \"left\":\r\n      offsetArray = [parseInt(vertical.size), parseInt(horizontal.size|| 10)];\r\n      break;\r\n    case \"right\":\r\n      offsetArray = [parseInt(vertical.size), parseInt(horizontal.size|| 10)];\r\n      break;\r\n  }\r\n\r\n  let body = React.useMemo(() => {\r\n    return isEditor() ?\r\n      document.getElementById(\"editorContent\").contentWindow.document.body\r\n      :\r\n      document.body\r\n  });\r\n  if(! isSSR()){\r\n    React.useLayoutEffect(() => {\r\n      if(isEditor()) {\r\n        document.getElementById(\"editorContent\").contentWindow.addEventListener(\"resize\", checkSize);\r\n      } else {\r\n        window.addEventListener(\"resize\", checkSize);\r\n      }\r\n      return () => {\r\n        if(isEditor()) {\r\n          document.getElementById(\"editorContent\").contentWindow.removeEventListener(\"resize\", checkSize);\r\n        } else {\r\n          window.removeEventListener(\"resize\", checkSize);\r\n        }\r\n      }\r\n    }, [])\r\n  }\r\n\r\n  if(isSSR()){\r\n    return <></>;\r\n  }\r\n  if(Tooltip2 && props.text && !_.isString(props.children)) {\r\n    return <Tooltip2\r\n      content={props.text}\r\n      popoverClassName={`altrp-tooltip-popover altrp-tooltip${props.id}`}\r\n      isOpen={props.open || false}\r\n      placement={position}\r\n      minimal={minimal}\r\n      interactionKind={Popover2InteractionKind.CLICK}\r\n      portalContainer={body}\r\n      modifiers={{\r\n        eventListeners: {\r\n          enabled: true,\r\n          options: {\r\n          }\r\n        },\r\n        offset: {\r\n          enabled: true,\r\n          options: {\r\n            offset: offsetArray\r\n          }\r\n        },\r\n      }}\r\n      renderTarget={({ isOpen, ref, ...p }) => {\r\n        return (\r\n\r\n          <ElementLayout\r\n            ref={ref}\r\n            {...p}\r\n\r\n            style={{\r\n              height: size[1],\r\n              width: size[0],\r\n            }}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  } else {\r\n    return <></>\r\n  }\r\n}\r\n\r\nexport default AltrpTooltip2;\r\n","import { getResponsiveSetting } from \"../../../../../../front-app/src/js/helpers\";\r\nimport {\r\n  simplePropertyStyled,\r\n  borderWidthStyled,\r\n  colorPropertyStyled,\r\n  dimensionsControllerToStyles,\r\n  typographicControllerToStyles,\r\n  sizeStyled,\r\n  heightCalcStyled,\r\n  transformRotateStyled,\r\n  iconSizeStyled,\r\n} from \"../../../../../../front-app/src/js/helpers/styles\";\r\n\r\nconst NavComponent = styled.div`\r\n\r\n  && .altrp-nav-menu-dropdown-wrapper {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let justifyContent;\r\n\r\n      //Получаем значения justify-content из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        justifyContent = getResponsiveSetting(settings, 'toggle_align_dropdown_menu_layout');\r\n      }\r\n\r\n      if (justifyContent) {\r\n        styles += simplePropertyStyled(justifyContent, 'justify-content');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_main_menu_style');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_main_menu_style');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_main_menu_style');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'fill_chevron_main_menu_style');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'stroke_chevron_main_menu_style');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'fill_chevron_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'stroke_chevron_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_chevron_main_menu_style');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_chevron_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginRight;\r\n\r\n      //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginRight = getResponsiveSetting(settings, 'space_between_main_menu_style');\r\n      }\r\n\r\n      if (marginRight) {\r\n        styles += sizeStyled(marginRight, 'margin-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginRight;\r\n\r\n      //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginRight = getResponsiveSetting(settings, 'space_between_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (marginRight) {\r\n        styles += sizeStyled(marginRight, 'margin-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link .altrp-nav-menu-li-link-icon {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginLeft, transformRotate;\r\n\r\n      //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginLeft = getResponsiveSetting(settings, 'dropdown_indicator_space_main_menu_style');\r\n      }\r\n\r\n      if (marginLeft) {\r\n        styles += sizeStyled(marginLeft, 'margin-left');\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_main_menu_style');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover .altrp-nav-menu-li-link-icon {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginLeft, transformRotate;\r\n\r\n      //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginLeft = getResponsiveSetting(settings, 'dropdown_indicator_space_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (marginLeft) {\r\n        styles += sizeStyled(marginLeft, 'margin-left');\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-overline:before,\r\n  && .altrp-nav-menu-li-underLine:after,\r\n  && .altrp-nav-menu-li-doubleLine:before,\r\n  && .altrp-nav-menu-li-framed:before,\r\n  && .altrp-nav-menu-li-framed:after,\r\n  && .altrp-nav-menu-li-background:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'pointer_color_main_menu_style');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-overline:hover::before,\r\n  && .altrp-nav-menu-li-underLine:hover::after,\r\n  && .altrp-nav-menu-li-doubleLine:hover::before,\r\n  && .altrp-nav-menu-li-framed:hover::before,\r\n  && .altrp-nav-menu-li-framed:hover::after,\r\n  && .altrp-nav-menu-li-background:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'pointer_color_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-animation-text:hover .altrp-nav-menu-li-link-label {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'pointer_color_main_menu_style');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-underline:after,\r\n  && .altrp-nav-menu-li-overline:before,\r\n  && .altrp-nav-menu-li-doubleLine:before {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let height;\r\n\r\n      //Получаем значения height в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        height = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (height) {\r\n        styles += sizeStyled(height, 'height');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-framed:hover::after {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderWidth;\r\n\r\n      //Получаем значения border-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += sizeStyled(borderWidth, 'border-right-width');\r\n        styles += sizeStyled(borderWidth, 'border-bottom-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-framed:hover:before {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderWidth;\r\n\r\n      //Получаем значения border-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += sizeStyled(borderWidth, 'border-top-width');\r\n        styles += sizeStyled(borderWidth, 'border-left-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-doubleLine:after {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let height;\r\n\r\n      //Получаем значения height в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        height = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (height) {\r\n        styles += heightCalcStyled(height);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, typographic;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_dropdown_menu_section');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, typographic;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения horizontal padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_dropdown_menu_section');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_dropdown_menu_section');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения horizontal padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-s-content-divider {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderTopStyle, borderTopColor, borderTopWidth;\r\n\r\n      //Получаем значения border-top-style padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopStyle = getResponsiveSetting(settings, 'divider_type_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderTopStyle) {\r\n        styles += simplePropertyStyled(borderTopStyle, 'border-top-style');\r\n      }\r\n\r\n      //Получаем значения borderTopColor из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopColor = getResponsiveSetting(settings, 'divider_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderTopColor) {\r\n        styles += colorPropertyStyled(borderTopColor, 'border-top-color');\r\n      }\r\n\r\n      //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopWidth = getResponsiveSetting(settings, 'divider_width_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderTopWidth) {\r\n        styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-s-content-divider:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderTopStyle, borderTopColor, borderTopWidth;\r\n\r\n      //Получаем значения border-top-style padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopStyle = getResponsiveSetting(settings, 'divider_type_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderTopStyle) {\r\n        styles += simplePropertyStyled(borderTopStyle, 'border-top-style');\r\n      }\r\n\r\n      //Получаем значения borderTopColor из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopColor = getResponsiveSetting(settings, 'divider_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderTopColor) {\r\n        styles += colorPropertyStyled(borderTopColor, 'border-top-color');\r\n      }\r\n\r\n      //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopWidth = getResponsiveSetting(settings, 'divider_width_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderTopWidth) {\r\n        styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size, transformRotate;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'chevron_width_dropdown_menu_section');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_menu_section');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size, transformRotate;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'chevron_width_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-active-chevron-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let transformRotate;\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_active_rotate_dropdown_menu_section');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-active-chevron-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let transformRotate;\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_active_rotate_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button:hover svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n\r\n  && .altrp-nav-menu-dropdown-button svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'color_toggle_button_fill_dropdown_menu_section');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'color_toggle_button_stroke_dropdown_menu_section');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button:hover svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'color_toggle_button_fill_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'color_toggle_button_stroke_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, padding, borderType, borderWidth, borderColor, borderRadius;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения padding из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        padding = getResponsiveSetting(settings, 'padding_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (padding) {\r\n        styles += dimensionsControllerToStyles(padding);\r\n      }\r\n\r\n      //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderType = getResponsiveSetting(settings, 'border_type_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderType) {\r\n        styles += simplePropertyStyled(borderType, 'border-style');\r\n      }\r\n\r\n      //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'border_width_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += borderWidthStyled(borderWidth);\r\n      }\r\n\r\n      //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderColor = getResponsiveSetting(settings, 'border_color_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderColor) {\r\n        styles += colorPropertyStyled(borderColor, 'border-color');\r\n      }\r\n\r\n      //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderRadius = getResponsiveSetting(settings, 'border_radius_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderRadius) {\r\n        styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, padding, borderType, borderWidth, borderColor, borderRadius;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения padding из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        padding = getResponsiveSetting(settings, 'padding_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (padding) {\r\n        styles += dimensionsControllerToStyles(padding);\r\n      }\r\n\r\n      //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderType = getResponsiveSetting(settings, 'border_type_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderType) {\r\n        styles += simplePropertyStyled(borderType, 'border-style');\r\n      }\r\n\r\n      //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'border_width_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += borderWidthStyled(borderWidth);\r\n      }\r\n\r\n      //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderColor = getResponsiveSetting(settings, 'border_color_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderColor) {\r\n        styles += colorPropertyStyled(borderColor, 'border-color');\r\n      }\r\n\r\n      //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderRadius = getResponsiveSetting(settings, 'border_radius_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderRadius) {\r\n        styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let justifyContent, alignItems;\r\n\r\n      //Получаем значения justify-content из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        justifyContent = getResponsiveSetting(settings, 'breadcrumbs_style_alignment');\r\n      }\r\n\r\n      if (justifyContent) {\r\n        styles += simplePropertyStyled(justifyContent, 'justify-content');\r\n      }\r\n\r\n      //Получаем значения align-items из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        alignItems = getResponsiveSetting(settings, 'breadcrumbs_style_vertical_alignment');\r\n      }\r\n\r\n      if (alignItems) {\r\n        styles += simplePropertyStyled(alignItems, 'align-items');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-link {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_links_style_typographic');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_links_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-link:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_links_style_typographic', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_links_style_color', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-link:visited {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_links_visited_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-default,\r\n  && .altrp-nav-breadcrumbs-separator-text {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_separator_default_style_typographic');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-default:hover,\r\n  && .altrp-nav-breadcrumbs-separator-text:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_separator_default_style_typographic', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let stroke, size;\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'breadcrumbs_separator_stroke_style_color');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'breadcrumbs_separator_icon_width_style');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon:hover svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let stroke;\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'breadcrumbs_separator_stroke_style_color', ':hover');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon svg:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'breadcrumbs_separator_icon_width_style', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-current {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_typographic');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-current:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_typographic', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_color', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon:hover svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color', ':hover');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-label {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding;\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'breadcrumbs_style_space_between');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-label:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding;\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'breadcrumbs_style_space_between', ':hover');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения fill и color  из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'chevron_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'fill');\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown:hover path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения fill и color  из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'chevron_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'fill');\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-sub {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, color;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_sub_dropdown_menu_section');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'color_sub_dropdown_menu_section');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-sub:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, color;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_sub_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'color_sub_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  ${props => {\r\n\r\n    const {settings, elementId} = props;\r\n\r\n    if (!elementId) {\r\n      return '';\r\n    }\r\n\r\n    let transformRotate, typographic, color, stroke, backgroundColor, width, borderType, borderWidth, borderColor, borderRadius, marginTop, borderRadiusTopRight;\r\n    let borderRadiusBottomLeft, marginLeft, typographicSubmenu, colorSubmenu, strokeSubmenu, background, widthSubmenu, borderTypeSubmenu, borderWidthSubmenu;\r\n    let borderColorSubmenu, borderRadiusSubmenu, marginRight, borderTopStyle, borderTopWidth, borderRadiusSubmenu2, borderRadiusTopRight2, borderRadiusBottomLeft2, borderTop2;\r\n\r\n    let styles = `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon, .${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon {`;\r\n\r\n    //Получаем значения transform rotate из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_main_menu_style');\r\n    }\r\n\r\n    if (transformRotate) {\r\n      styles += transformRotateStyled(transformRotate);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon, .${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon {`;\r\n\r\n    //Получаем значения transform rotate из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_main_menu_style', ':hover');\r\n    }\r\n\r\n    if (transformRotate) {\r\n      styles += transformRotateStyled(transformRotate);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-li-dropdown-hor-ver-link-label {`;\r\n\r\n    //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographic = getResponsiveSetting(settings, 'typographic_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (typographic) {\r\n      styles += typographicControllerToStyles(typographic);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-li-dropdown-hor-ver-link-label:hover {`;\r\n\r\n    //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographic = getResponsiveSetting(settings, 'typographic_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (typographic) {\r\n      styles += typographicControllerToStyles(typographic);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li .altrp-nav-menu-li-dropdown-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      color = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (color) {\r\n      styles += colorPropertyStyled(color, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover .altrp-nav-menu-li-dropdown-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      color = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (color) {\r\n      styles += colorPropertyStyled(color, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      stroke = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (stroke) {\r\n      styles += colorPropertyStyled(stroke, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      stroke = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (stroke) {\r\n      styles += colorPropertyStyled(stroke, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li {`;\r\n\r\n    //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (backgroundColor) {\r\n      styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n    }\r\n\r\n    //Получаем значения width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      width = getResponsiveSetting(settings, 'width_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (width) {\r\n      styles += sizeStyled(width, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover {`;\r\n\r\n    //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (backgroundColor) {\r\n      styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n    }\r\n\r\n    //Получаем значения width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      width = getResponsiveSetting(settings, 'width_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (width) {\r\n      styles += sizeStyled(width, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver {`;\r\n\r\n    //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderType = getResponsiveSetting(settings, 'border_type_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderType) {\r\n      styles += simplePropertyStyled(borderType, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidth = getResponsiveSetting(settings, 'border_width_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderWidth) {\r\n      styles += borderWidthStyled(borderWidth);\r\n    }\r\n\r\n    //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColor = getResponsiveSetting(settings, 'border_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderColor) {\r\n      styles += colorPropertyStyled(borderColor, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadius = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadius) {\r\n      styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-top в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginTop = getResponsiveSetting(settings, 'distance_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (marginTop) {\r\n      styles += sizeStyled(marginTop, 'margin-top');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver:hover {`;\r\n\r\n    //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderType = getResponsiveSetting(settings, 'border_type_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderType) {\r\n      styles += simplePropertyStyled(borderType, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidth = getResponsiveSetting(settings, 'border_width_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderWidth) {\r\n      styles += borderWidthStyled(borderWidth);\r\n    }\r\n\r\n    //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColor = getResponsiveSetting(settings, 'border_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderColor) {\r\n      styles += colorPropertyStyled(borderColor, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadius = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadius) {\r\n      styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-top в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginTop = getResponsiveSetting(settings, 'distance_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (marginTop) {\r\n      styles += sizeStyled(marginTop, 'margin-top');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:first-child {`;\r\n\r\n    //Получаем значения border-radius-top-right из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusTopRight = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusTopRight) {\r\n      styles += `border-radius: ${borderRadiusTopRight.top}${borderRadiusTopRight.unit} ${borderRadiusTopRight.right}${borderRadiusTopRight.unit} 0 0; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:first-child:hover {`;\r\n\r\n    //Получаем значения border-radius-top-right из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusTopRight = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusTopRight) {\r\n      styles += `border-radius: ${borderRadiusTopRight.top}${borderRadiusTopRight.unit} ${borderRadiusTopRight.right}${borderRadiusTopRight.unit} 0 0; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:last-child {`;\r\n\r\n    //Получаем значения border-radius-bottom-left из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusBottomLeft = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusBottomLeft) {\r\n      styles += `border-radius: 0 0 ${borderRadiusBottomLeft.bottom}${borderRadiusBottomLeft.unit} ${borderRadiusBottomLeft.left}${borderRadiusBottomLeft.unit}; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:last-child:hover {`;\r\n\r\n    //Получаем значения border-radius-bottom-left из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusBottomLeft = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusBottomLeft) {\r\n      styles += `border-radius: 0 0 ${borderRadiusBottomLeft.bottom}${borderRadiusBottomLeft.unit} ${borderRadiusBottomLeft.left}${borderRadiusBottomLeft.unit}; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon {`;\r\n\r\n    //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginLeft = getResponsiveSetting(settings, 'submenu_indicator_space_main_menu_style');\r\n    }\r\n\r\n    if (marginLeft) {\r\n      styles += sizeStyled(marginLeft, 'margin-left');\r\n    }\r\n\r\n    //Получаем значения typographic-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographicSubmenu = getResponsiveSetting(settings, 'typographic_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (typographicSubmenu) {\r\n      styles += typographicControllerToStyles(typographicSubmenu);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon:hover {`;\r\n\r\n    //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginLeft = getResponsiveSetting(settings, 'submenu_indicator_space_main_menu_style', ':hover');\r\n    }\r\n\r\n    if (marginLeft) {\r\n      styles += sizeStyled(marginLeft, 'margin-left');\r\n    }\r\n\r\n    //Получаем значения typographic-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographicSubmenu = getResponsiveSetting(settings, 'typographic_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (typographicSubmenu) {\r\n      styles += typographicControllerToStyles(typographicSubmenu);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li .altrp-nav-menu-li-dropdown-children-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      colorSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (colorSubmenu) {\r\n      styles += colorPropertyStyled(colorSubmenu, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover .altrp-nav-menu-li-dropdown-children-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      colorSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (colorSubmenu) {\r\n      styles += colorPropertyStyled(colorSubmenu, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li .altrp-nav-menu-ul-dropdown-children-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      strokeSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (strokeSubmenu) {\r\n      styles += colorPropertyStyled(strokeSubmenu, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-children-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      strokeSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (strokeSubmenu) {\r\n      styles += colorPropertyStyled(strokeSubmenu, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li {`;\r\n\r\n    //Получаем значения background из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      background = getResponsiveSetting(settings, 'background_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (background) {\r\n      styles += colorPropertyStyled(background, 'background');\r\n    }\r\n\r\n    //Получаем значения width-submenu в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      widthSubmenu = getResponsiveSetting(settings, 'width_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (widthSubmenu) {\r\n      styles += sizeStyled(widthSubmenu, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover {`;\r\n\r\n    //Получаем значения background из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      background = getResponsiveSetting(settings, 'background_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (background) {\r\n      styles += colorPropertyStyled(background, 'background');\r\n    }\r\n\r\n    //Получаем значения width-submenu в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      widthSubmenu = getResponsiveSetting(settings, 'width_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (widthSubmenu) {\r\n      styles += sizeStyled(widthSubmenu, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver {`;\r\n\r\n    //Получаем значения border-type-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTypeSubmenu = getResponsiveSetting(settings, 'border_type_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTypeSubmenu) {\r\n      styles += simplePropertyStyled(borderTypeSubmenu, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidthSubmenu = getResponsiveSetting(settings, 'border_width_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderWidthSubmenu) {\r\n      styles += borderWidthStyled(borderWidthSubmenu);\r\n    }\r\n\r\n    //Получаем значения border-color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColorSubmenu = getResponsiveSetting(settings, 'border_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderColorSubmenu) {\r\n      styles += colorPropertyStyled(borderColorSubmenu, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusSubmenu) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginRight = getResponsiveSetting(settings, 'distance_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (marginRight) {\r\n      styles += sizeStyled(marginRight, 'margin-right');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver:hover {`;\r\n\r\n    //Получаем значения border-type-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTypeSubmenu = getResponsiveSetting(settings, 'border_type_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderTypeSubmenu) {\r\n      styles += simplePropertyStyled(borderTypeSubmenu, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidthSubmenu = getResponsiveSetting(settings, 'border_width_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderWidthSubmenu) {\r\n      styles += borderWidthStyled(borderWidthSubmenu);\r\n    }\r\n\r\n    //Получаем значения border-color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColorSubmenu = getResponsiveSetting(settings, 'border_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderColorSubmenu) {\r\n      styles += colorPropertyStyled(borderColorSubmenu, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusSubmenu) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginRight = getResponsiveSetting(settings, 'distance_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (marginRight) {\r\n      styles += sizeStyled(marginRight, 'margin-right');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-divider {`;\r\n\r\n    //Получаем значения border-top-style из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTopStyle = getResponsiveSetting(settings, 'type_divider_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTopStyle) {\r\n      styles += simplePropertyStyled(borderTopStyle, 'border-top-style');\r\n    }\r\n\r\n    //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTopWidth = getResponsiveSetting(settings, 'height_divider_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTopWidth) {\r\n      styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-divider:hover {`;\r\n\r\n    //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTopWidth = getResponsiveSetting(settings, 'height_divider_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderTopWidth) {\r\n      styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-only .altrp-nav-menu-ul-dropdown-children-hor-ver-li {`;\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusSubmenu2) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu2, 'border-radius');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-only:hover .altrp-nav-menu-ul-dropdown-children-hor-ver-li {`;\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusSubmenu2) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu2, 'border-radius');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:first-child {`;\r\n\r\n    //Получаем значения border-radius-top-right из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusTopRight2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusTopRight2) {\r\n      styles += `border-radius: ${borderRadiusTopRight2.top}${borderRadiusTopRight2.unit} ${borderRadiusTopRight2.right}${borderRadiusTopRight2.unit} 0 0; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:last-child {`;\r\n\r\n    //Получаем значения border-radius-bottom-left из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusBottomLeft2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusBottomLeft2) {\r\n      styles += `border-radius: 0 0 ${borderRadiusBottomLeft2.bottom}${borderRadiusBottomLeft2.unit} ${borderRadiusBottomLeft2.left}${borderRadiusBottomLeft2.unit}; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:last-child .altrp-nav-menu-ul-dropdown-hor-ver-li-divider, .${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-ul .altrp-nav-menu-ul-dropdown-children-hor-ver-li:last-child .altrp-nav-menu-ul-dropdown-hor-ver-li-divider {`;\r\n\r\n    //Получаем значения border-top из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTop2 = getResponsiveSetting(settings, 'height_divider_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTop2) {\r\n      styles += `border-top: none; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    return styles;\r\n    }\r\n  }\r\n\r\n`;\r\n\r\nexport default NavComponent;\r\n","export const CHANGE_CURRENT_PAGE = \"CHANGE_CURRENT_PAGE\";\r\nexport const CHANGE_CURRENT_PAGE_PROPERTY = \"CHANGE_CURRENT_PAGE_PROPERTY\";\r\n\r\nexport function changeCurrentPage(pageData) {\r\n  return {\r\n    type: CHANGE_CURRENT_PAGE,\r\n    pageData: pageData || {}\r\n  };\r\n}\r\n\r\nexport function changeCurrentPageProperty(propertyName, value) {\r\n  return {\r\n    type: CHANGE_CURRENT_PAGE_PROPERTY,\r\n    propertyName,\r\n    value,\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}