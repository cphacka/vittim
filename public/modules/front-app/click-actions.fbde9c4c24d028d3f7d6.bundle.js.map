{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/front-app/src/js/functions/actions/click-actions.js","webpack:///./resources/modules/front-app/src/js/helpers/check-element.js","webpack:///./resources/modules/front-app/src/js/helpers/element-search-for-action.js","webpack:///./resources/modules/front-app/src/js/helpers/get-actions-element.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","CLICK_EXCLUDE_TAG_NAMES","clickActions","e","target","indexOf","tagName","toLowerCase","getActionsElement","actions","element","preventDefault","then","actionsManager","callAllWidgetActions","getIdForAction","altrp","ACTIONS_CACHE","checkElement","params","result","_","settings","isArray","FrontElement","find","settingParam","settingValue","getSettings","settingName","checks","length","filter","check","isFunction","elementSearchForAction","elementActionId","elements","appStore","getState","el","props","attribute","actionPrefix","_element","dataset","elementUuid","closest","_el","getAttribute","v4","parentElement"],"mappings":"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","file":"click-actions.fbde9c4c24d028d3f7d6.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import { v4 } from 'uuid';\r\nimport elementSearchForAction from \"../../helpers/element-search-for-action\";\r\nimport getActionsElement from \"../../helpers/get-actions-element\";\r\n\r\nconst CLICK_EXCLUDE_TAG_NAMES = [\r\n  // 'input',todo: выяснить нужно ли исключение\r\n  // 'a',\r\n  // 'button',\r\n  // 'textarea',\r\n  // 'select',\r\n];\r\n\r\nconst ACTIONS_CACHE = (window.altrp.ACTIONS_CACHE = window.altrp.ACTIONS_CACHE || {})\r\n/**\r\n *\r\n * @param {PointerEvent} e\r\n */\r\nexport default function clickActions(e){\r\n  let html_element = e.target;\r\n  if(CLICK_EXCLUDE_TAG_NAMES.indexOf(e.target.tagName.toLowerCase()) >=0){\r\n    return\r\n  }\r\n  let {actions, element} =\r\n    getActionsElement(e.target,\r\n      'data-altrp-wrapper-click-actions',\r\n      'wrapper_click_actions',\r\n      'clickActions'\r\n    );\r\n  // let element\r\n  // if(e.target.dataset.elementUuid && _.get(ACTIONS_CACHE, `.${e.target.dataset.elementUuid}`)){\r\n  //   actions = _.get(ACTIONS_CACHE, `clickActions.${e.target.dataset.elementUuid}.actions`);\r\n  //   element = _.get(ACTIONS_CACHE, `clickActions.${e.target.dataset.elementUuid}.element`);\r\n  // } else {\r\n  //   while ((html_element = html_element?.closest('[]'))){\r\n  //     console.log(html_element?.dataset);\r\n  //     const _el = elementSearchForAction(html_element?.dataset?.altrpWrapperClickActions)\r\n  //\r\n  //     if(_el && ! _.isEmpty(_el.getSettings('wrapper_click_actions'))){\r\n  //       actions = _el.getSettings('wrapper_click_actions')\r\n  //       element = _el\r\n  //       e.target.dataset.elementUuid = v4();\r\n  //       _.set(ACTIONS_CACHE, `clickActions.${e.target.dataset.elementUuid}`, {actions, element})\r\n  //       break;\r\n  //     }\r\n  //     html_element = html_element.parentElement\r\n  //   }\r\n  // }\r\n  if(! actions){\r\n    return;\r\n  }\r\n  e.preventDefault();\r\n  import(/* webpackChunkName: 'ActionsManager' */'../../classes/modules/ActionsManager').then(()=>{\r\n    window.actionsManager.callAllWidgetActions(\r\n      element.getIdForAction(),\r\n      'wrapper_click_actions',\r\n      actions,\r\n      element\r\n    )\r\n  })\r\n}\r\n","import FrontElement from \"../classes/FrontElement\";\r\n\r\n/**\r\n *\r\n * @param {FrontElement|{}}element\r\n * @param {{}}params\r\n * @return {boolean}\r\n */\r\nexport default function checkElement(element, params = {}){\r\n  let result = false;\r\n  if(_.isEmpty(params.settings) || ! _.isArray(params.settings)){\r\n    return ! result;\r\n  }\r\n  if(! element instanceof FrontElement){\r\n    element = new FrontElement(element, true)\r\n  }\r\n  result = params.settings.find(settingParam => {\r\n    let settingValue = element.getSettings(settingParam?.settingName);\r\n    return settingParam?.checks.length === settingParam?.checks.filter(check=>{\r\n      return _.isFunction(check) && check(settingValue)\r\n    })\r\n  })\r\n  return result\r\n}\r\n","import checkElement from \"./check-element\";\n/**\n *\n * @param {string} elementActionId\n * @param {{}} params\n * @return {FrontElement | null}\n */\nexport default function elementSearchForAction(elementActionId, params = {}){\n  let element = null;\n  let elements = appStore.getState().elements\n  element = elements.find(el=> (el.props.element.getIdForAction() === elementActionId && checkElement(el.props.element, params))) || element;\n  if (element?.props?.element){\n    return element.props.element;\n  }\n  return element;\n}\n","import elementSearchForAction from \"./element-search-for-action\";\r\nimport {v4} from \"uuid\";\r\nconst ACTIONS_CACHE = (window.altrp.ACTIONS_CACHE = window.altrp.ACTIONS_CACHE || {})\r\n/**\r\n *\r\n * @param  {HTMLElement} element\r\n * @param {string} attribute\r\n * @param {string} settingName\r\n * @param {string} actionPrefix\r\n * @returns {{actions: [] | null, element: (FrontElement|null|*)}}\r\n */\r\nexport default function getActionsElement(element,\r\n                                          attribute,\r\n                                          settingName,\r\n                                          actionPrefix){\r\n  let _element = element;\r\n  let actions = null;\r\n  if(element.dataset.elementUuid && _.get(ACTIONS_CACHE, `clickActions.${element.dataset.elementUuid}`)){\r\n    actions = _.get(ACTIONS_CACHE, `${actionPrefix}.${e.target.dataset.elementUuid}.actions`);\r\n    _element = _.get(ACTIONS_CACHE, `${actionPrefix}.${e.target.dataset.elementUuid}.element`);\r\n  } else {\r\n    while ((_element = _element?.closest(`[${attribute}]`))){\r\n      const _el = elementSearchForAction(_element?.getAttribute(attribute))\r\n      if(_el && ! _.isEmpty(_el.getSettings(settingName))){\r\n        actions = _el.getSettings(settingName)\r\n        _element = _el\r\n        element.dataset.elementUuid = v4();\r\n        _.set(ACTIONS_CACHE, `${actionPrefix}.${element.dataset.elementUuid}`, {actions, element:_element})\r\n        break;\r\n      }\r\n      _element = _element.parentElement\r\n    }\r\n  }\r\n  return {\r\n    actions,\r\n    element: _element\r\n  }\r\n}\r\n"],"sourceRoot":""}