{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/SchedulerWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","altrpLibs","fullCalendar","FullCalendar","dayGridPlugin","timeGridPlugin","interaction","locales","Blueprint","InputGroup","TextArea","SchedulerWidget","props","getFormattedEvents","resource","Resource","route","state","settings","get_url","dynamicURL","getAll","formattedData","map","el","end","start","indexOf","substr","_componentDidUpdate","isEditor","dispatchEvent","Event","_componentDidMount","setState","startEvents","closePopup","popup","status","dateClickHandler","e","payload","event","formData","createEvent","preventDefault","create_url","dateStr","post","newEvents","eventChangeHandler","update_url","JSON","parse","stringify","id","put","console","log","error","openEvent","extendedProps","editEvent","key","api","calendar","current","getApi","currentEvent","updated_at","deleted_at","created_at","getEvents","deleteEvent","eventId","remove","delete","eventInputHandler","target","element","getSettings","component","elementDecorator","baseRender","render","popupLocalization","create","cancel","title","done","ru","React","createRef","lang","getResponsiveSetting","popupText","className","locale","plugins","initialView","events","editable","headerToolbar","left","center","right","dateClick","eventClick","eventChange","ref","onSubmit","type","onChange","repeater_fields_section","field_name_repeater","label_repeater","input_type_repeater","onClick","Component"],"mappings":"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","file":"SchedulerWidget.8ea4090d706d5c026487.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import Resource from '../../classes/Resource';\r\n\r\nconst {FullCalendar, dayGridPlugin, timeGridPlugin, interaction, locales} = window.altrpLibs.fullCalendar\r\nconst {InputGroup, TextArea} = window.altrpLibs.Blueprint\r\n\r\n\r\n\r\nclass SchedulerWidget extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    const settings = props.element.getSettings()\r\n\r\n    this.state = {\r\n      startEvents: [],\r\n      settings: settings,\r\n      popup: {\r\n        status: null\r\n      }\r\n    }\r\n\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    if (props.baseRender) {\r\n      this.render = props.baseRender(this);\r\n    }\r\n\r\n    this.popupLocalization = {\r\n      'en-gb': {\r\n        create: 'Create',\r\n        cancel: 'Cancel',\r\n        title: 'Title',\r\n        delete: 'Delete',\r\n        done: 'Done'\r\n      },\r\n      ru: {\r\n        create: 'Создать',\r\n        cancel: 'Отменить',\r\n        title: 'Название',\r\n        delete: 'Удалить',\r\n        done: 'Закончить'\r\n      }\r\n    }\r\n\r\n    this.calendar = React.createRef();\r\n  }\r\n\r\n  getFormattedEvents = async () => {\r\n    const resource = new Resource({route: this.state.settings.get_url, dynamicURL: true});\r\n\r\n    const {data} = await resource.getAll();\r\n\r\n    const formattedData = data.map(el => {\r\n      if (el.end === '0000-00-00 00:00:00') {\r\n        delete el.end\r\n\r\n        if (el.start.indexOf('00:00:00') !== -1) {\r\n          el.start = el.start.substr(0, 10)\r\n        }\r\n      }\r\n\r\n      return el\r\n    })\r\n\r\n    return formattedData\r\n  }\r\n\r\n  _componentDidUpdate = async () => {\r\n    if(isEditor()) {\r\n      window.dispatchEvent(new Event('resize'))\r\n    }\r\n  }\r\n  _componentDidMount = async () => {\r\n\r\n    const formattedData = await this.getFormattedEvents()\r\n    this.setState({\r\n      startEvents: formattedData\r\n    });\r\n  }\r\n\r\n  closePopup = () => {\r\n    this.setState({\r\n      popup: {\r\n        status: null\r\n      }\r\n    })\r\n  }\r\n\r\n  dateClickHandler = async e => {\r\n    this.setState({\r\n      popup: {\r\n        status: 'create',\r\n        payload: {\r\n          event: e\r\n        },\r\n        formData: {}\r\n      }\r\n    })\r\n  }\r\n\r\n  createEvent = async e => {\r\n    e.preventDefault()\r\n\r\n    const resource = new Resource({route: this.state.settings.create_url, dynamicURL: true});\r\n\r\n    const event = {\r\n      ...this.state.popup.formData,\r\n      start: this.state.popup.payload.event.dateStr\r\n    }\r\n\r\n    const res = await resource.post(event);\r\n\r\n    const newEvents = await this.getFormattedEvents()\r\n\r\n    this.setState({\r\n      startEvents: newEvents\r\n    })\r\n\r\n    this.closePopup()\r\n  }\r\n\r\n  eventChangeHandler = async e => {\r\n    try {\r\n      const resource = new Resource({route: this.state.settings.update_url, dynamicURL: true});\r\n      const event = JSON.parse(JSON.stringify(e.event))\r\n\r\n      const {id} = event\r\n\r\n      const res = await resource.put(+id, {\r\n        start: event.start,\r\n        end: event.end\r\n      });\r\n    } catch (error) {\r\n      console.log({error});\r\n    }\r\n  }\r\n\r\n  openEvent = e => {\r\n    const event = JSON.parse(JSON.stringify(e.event));\r\n    this.setState({\r\n      popup: {\r\n        status: 'edit',\r\n        payload: {\r\n          event: e.event\r\n        },\r\n        formData: {\r\n          ...event,\r\n          ...event.extendedProps\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  editEvent = async e => {\r\n    e.preventDefault()\r\n\r\n    const resource = new Resource({route: this.state.settings.update_url, dynamicURL: true});\r\n    const event = this.state.popup.formData\r\n\r\n    const id = this.state.popup.payload.event.id\r\n\r\n    const api = this.calendar.current.getApi()\r\n\r\n    let currentEvent = JSON.parse(JSON.stringify(this.state.popup.payload.event))\r\n    currentEvent = {...currentEvent, ...currentEvent.extendedProps}\r\n\r\n    for (const key in event) {\r\n      currentEvent[key] = event[key]\r\n    }\r\n\r\n    delete currentEvent.extendedProps\r\n    delete currentEvent.updated_at\r\n    delete currentEvent.deleted_at\r\n    delete currentEvent.created_at\r\n    const res = await resource.put(+id, currentEvent);\r\n\r\n    this.setState({\r\n      startEvents: api.getEvents().map(el => {\r\n        if (el.id == currentEvent.id) {\r\n          return currentEvent\r\n        }\r\n\r\n        return el\r\n      })\r\n    })\r\n\r\n    this.closePopup()\r\n  }\r\n\r\n  deleteEvent = async () => {\r\n    const resource = new Resource({route: this.state.settings.update_url, dynamicURL: true});\r\n    const eventId = this.state.popup.payload.event.id\r\n    this.closePopup()\r\n\r\n    this.state.popup.payload.event.remove()\r\n\r\n    await resource.delete(eventId)\r\n  }\r\n\r\n  eventInputHandler = e => {\r\n    this.setState({\r\n      popup: {\r\n        ...this.state.popup,\r\n        formData: {\r\n          ...this.state.popup.formData,\r\n          [e.target.name]: e.target.value\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const lang = this.props.element.getResponsiveSetting('lang', '', 'en-gb')\r\n    const popupText = this.popupLocalization[lang]\r\n    return (\r\n      <div className=\"popup-wrapper\">\r\n        <FullCalendar\r\n          locale={locales[lang]}\r\n          plugins={[dayGridPlugin, interaction, timeGridPlugin]}\r\n          initialView='dayGridMonth'\r\n          events={this.state.startEvents}\r\n          editable={true}\r\n          headerToolbar={{\r\n            left: 'prev,next',\r\n            center: 'title',\r\n            right: 'timeGridDay,timeGridWeek,dayGridMonth'\r\n          }}\r\n          dateClick={this.dateClickHandler}\r\n          eventClick={this.openEvent}\r\n          eventChange={this.eventChangeHandler}\r\n          ref={this.calendar}\r\n        />\r\n\r\n        {!!this.state.popup.status && <div className='popup'>\r\n            <form onSubmit={() => {this.state.popup.status === 'create' ? this.createEvent() : this.editEvent()}}>\r\n              <div className=\"popup__body\">\r\n                <div className=\"popup__field-title\">\r\n                  {popupText?.title}\r\n                </div>\r\n                <InputGroup type=\"text\" name=\"title\" onChange={this.eventInputHandler} className='popup__text-field' value={this.state.popup.formData.title || ''} />\r\n\r\n                {this.state.settings.repeater_fields_section?.map(el => <div key={el.field_name_repeater}>\r\n                  <div className=\"popup__field-title\">\r\n                    {el.label_repeater}\r\n                  </div>\r\n                  {(el.input_type_repeater === 'text' || !el.input_type_repeater) && (\r\n                    <InputGroup type=\"text\" name={el.field_name_repeater} onChange={this.eventInputHandler} className='popup__text-field' value={this.state.popup.formData[el.field_name_repeater] || ''} />\r\n                  )}\r\n                  {el.input_type_repeater ==='textarea' && (\r\n                    <TextArea name={el.field_name_repeater} onChange={this.eventInputHandler} className='popup__text-field popup__textarea' value={this.state.popup.formData[el.field_name_repeater] || ''}></TextArea>\r\n                  )}\r\n                </div>)}\r\n              </div>\r\n              <div className=\"popup__actions\">\r\n                {this.state.popup.status == 'create'\r\n                  ? <input type=\"button\" className=\"button\" value={popupText.create} onClick={this.createEvent} />\r\n                  : <input type=\"button\" className=\"button\" value={popupText.done} onClick={this.editEvent} />\r\n                }\r\n                <input type=\"button\" className=\"button\" value={popupText.cancel} onClick={this.closePopup} />\r\n                {this.state.popup.status == 'edit' && <input type=\"button\" className=\"button button-danger\" value={popupText.delete} onClick={this.deleteEvent} />}\r\n              </div>\r\n            </form>\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SchedulerWidget;\r\n"],"sourceRoot":""}