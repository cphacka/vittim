{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/altrp-image/Skeleton.js","webpack:///./resources/modules/editor/src/js/components/altrp-image/ImagePlaceholder.js","webpack:///./resources/modules/editor/src/js/components/altrp-image/AltrpImage.js","webpack:///./resources/modules/editor/src/js/components/widgets/TreeWidget.js","webpack:///./resources/modules/editor/src/js/components/widgets/styled-components/TreeComponent.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","defaultBaseColor","SkeletonSpan","styled","duration","delay","keyframes","Math","floor","undefined","color","highlightColor","props","className","_","isNumber","width","settings","aspect_ratio_size","getResponsiveSetting","Number","height","indexOf","style","custom_aspect","isString","mediaWidth","mediaHeight","altrpHelpers","isEditor","isSSR","renderAsset","AltrpImage","imageRef","React","createRef","visible","element","lazy","altrpImageLazy","state","update","timeoutId","setTimeout","setState","clearTimeout","prevProps","prevState","current","getRoot","popupGUID","popupTrigger","popupID","scrollPosition","scroller","mainScrollbars","document","querySelector","checkElementInViewBox","media","image","noDefault","placeholderStyles","File","default","Object","keys","length","url","assetType","background","placeholder","main_color","ref","getSettings","altrpSkeletonColor","altrpSkeletonHighlightColor","cloneElement","id","Fragment","Component","reactRedux","connect","getDataByPath","parseOptionsFromSettings","TreeBlueprint","renderAssetIcon","altrpLibs","Blueprint","Tree","normalizeValues","branch","folderIcon","icon","label","labelValue","iconValue","treeId","tree_id","parentId","parent","getFromDatasource","settingNames","path","replace","dataSettings","sortDefault","sortOption","getCurrentModel","isArray","updateRepeater","repeaterSetting","other","repeater","forEach","idx","children","branchSettings","possibleChild","possibleIdx","push","sort","sortBy","o","toString","reverse","hasCaret","childNodes","newRepeater","childrenInChildren","filter","replacedChildren","repBranch","TreeWidget","type","select_type","component","elementDecorator","baseRender","render","updateNode","bind","handleNodeExpand","handleNodeCollapse","handleNodeClick","filtrationRepeater","s","prevRepeater","tree_repeater","isEqual","node","originallySelected","isSelected","next","nodes","callback","forEachNode","isExpanded","hasOwnProperty","nodeFromPath","contents","onNodeClick","onNodeCollapse","onNodeExpand","TreeComponent","prefix","styledString","settingsPrefix","NullArray"],"mappings":"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","file":"TreeWidget.d2c93a89c54b4033c812.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import styled, { keyframes} from 'styled-components';\r\n\r\nexport const defaultBaseColor = \"#eee\";\r\n\r\nexport const defaultHighlightColor = \"#f5f5f5\";\r\n\r\nexport const skeletonKeyframes = (duration, delay) => keyframes`\r\n  0% {\r\n    background-position: -200px 0;\r\n  }\r\n  ${\r\n  delay > 0\r\n    ? `${Math.floor((1 / (duration + delay)) * duration * 100)}% {\r\n    background-position: calc(200px + 100%) 0;\r\n  }`\r\n    : undefined\r\n}\r\n  100% {\r\n    background-position: calc(200px + 100%) 0;\r\n  }\r\n`;\r\nconst SkeletonSpan = styled.span`\r\n  animation: ${skeletonKeyframes} 1.2s ease-in-out infinite;\r\n  background-color: ${({color})=>`${color || defaultBaseColor}`};\r\n  background-size: 200px 100%;\r\n  background-repeat: no-repeat;\r\n  background-image: linear-gradient(90deg, ${({highlightColor, color})=>{\r\n    return `${color || defaultBaseColor}, ${highlightColor || defaultHighlightColor}, ${color || defaultBaseColor}`;\r\n  }});\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  height: 100%;\r\n`;\r\nconst Skeleton = (props) => <div className={props.className}><SkeletonSpan {...props} className=\"altrp-skeleton__span\"/></div>\r\nexport default Skeleton;\r\n","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../front-app/src/js/helpers\";\r\n\r\nconst ImagePlaceholder = styled.div`& {\r\n  position: relative;\r\n  max-width: 100%;\r\n  overflow: hidden;\r\n  width:${props => {\r\n  if (_.isNumber(props.width)) {\r\n    return props.width + 'px';\r\n  }\r\n  return props.width ? props.width : '100%'\r\n}};\r\n${(props) => {\r\n  const {settings} = props;\r\n  const aspect_ratio_size = getResponsiveSetting(settings, 'aspect_ratio_size');\r\n  if(Number(aspect_ratio_size) !== 0 && aspect_ratio_size === 'custom'|| Number(aspect_ratio_size)){\r\n    return 'height:auto;'\r\n  }\r\n  if(! props.height || props.height.indexOf('%') !== -1) {\r\n    return 'height:auto;'\r\n  }\r\n  return `height:${props.height ? props.height : 'auto'};`;\r\n}}\r\n\r\n  background-color: ${props => props.color ? props.color : '#fff'};\r\n}\r\n&::before{\r\n  display: block;\r\n  content: '';\r\n  width: 100%;\r\n${(props) => {\r\n  const {settings, height} = props;\r\n  let style = '';\r\n  const aspect_ratio_size = getResponsiveSetting(settings, 'aspect_ratio_size');\r\n  if(Number(aspect_ratio_size) !== 0) {\r\n    if(aspect_ratio_size === 'custom') {\r\n      let custom_aspect = getResponsiveSetting(settings, 'custom_aspect');\r\n      custom_aspect = Number(custom_aspect) || 100;\r\n      style += `padding-top:${custom_aspect}%;`;\r\n    } else if(Number(aspect_ratio_size)){\r\n      style += `padding-top:${aspect_ratio_size}%;`;\r\n    }\r\n    return style;\r\n  }\r\n  if (height && _.isString(height) && height.indexOf('%') === -1) {\r\n    return style;\r\n  }\r\n  if (Number(props.mediaWidth) && Number(props.mediaHeight)) {\r\n    style += `padding-top:${(props.mediaHeight / props.mediaWidth) * 100}%;`\r\n  }\r\n  return style;\r\n}};\r\n}\r\n&& .altrp-skeleton,\r\n&& .altrp-image{\r\n  position:absolute;\r\n  top:0;\r\n  left:0;\r\n  right:0;\r\n  bottom:0;\r\n  height:100%;\r\n  width:100%;\r\n}\r\n`;\r\n\r\nexport default ImagePlaceholder;\r\n","import Skeleton from './Skeleton';\r\nimport ImagePlaceholder from \"./ImagePlaceholder\";\r\nimport {checkElementInViewBox} from \"../../../../../front-app/src/js/helpers/elements\";\r\nconst {isEditor, isSSR, renderAsset} = window.altrpHelpers;\r\n\r\nclass AltrpImage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.imageRef = React.createRef();\r\n    let visible = true;\r\n    if(isSSR() && ! props.element?.getResponsiveSetting('lazyload_disable')){\r\n      visible = false;\r\n    } else if (isEditor() || props.lazy === false) {\r\n\r\n    } else if (window.altrpImageLazy\r\n        && window.altrpImageLazy !== 'none'\r\n        && props.element\r\n        && ! props.element?.getResponsiveSetting('lazyload_disable')) {\r\n      visible = false;\r\n    }\r\n    this.state = {\r\n      visible,\r\n      update: 0,\r\n    };\r\n    this.timeoutId = setTimeout(() => this.setState(state => ({...state, update: state.update++})), 500);\r\n  }\r\n\r\n  /**\r\n   * очищаем обновление\r\n   */\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  /**\r\n   * Проверим нужно ли обновить видимость\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if(this.state.visible){\r\n      clearTimeout(this.timeoutId);\r\n    }\r\n    if (this.state.visible || ! this.imageRef.current) {\r\n      return;\r\n    }\r\n    if(this.props?.element?.getRoot()?.popupGUID && this.props.element.getRoot().popupGUID === this.props.popupTrigger.popupID){\r\n      this.setState(state => ({...state, visible: true}));\r\n    }\r\n    if (prevProps.scrollPosition === this.props.scrollPosition && prevState.update === this.state.update) {\r\n      return;\r\n    }\r\n    let scroller = window.mainScrollbars;\r\n    if(! scroller){\r\n      scroller = document.querySelector('.front-app-content');\r\n    }\r\n    if(! scroller){\r\n      scroller = document.querySelector('.front-app');\r\n    }\r\n    if (this.imageRef.current && checkElementInViewBox(this.imageRef.current, scroller)) {\r\n      clearTimeout(this.timeoutId);\r\n      this.setState(state => ({...state, visible: true}));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let media = {...this.props.image};\r\n    const {visible} = this.state;\r\n    const noDefault = this.props.noDefault || false;\r\n    const placeholderStyles = {};\r\n\r\n    let width = this.props.width;\r\n\r\n    let height = this.props.height;\r\n    if (! isSSR() && this.props.image instanceof File) {\r\n      media = this.props.image\r\n    } else {\r\n      if (this.props.default) {\r\n        if ((Object.keys(media).length === 0)) {\r\n          media = this.props.default;\r\n        }\r\n      } else if (noDefault) {\r\n        return \"\"\r\n      } else {\r\n        media.url = media.url || '/img/nullImage.png';\r\n        media.name = media.name || 'null';\r\n        media.assetType = media.assetType || undefined;\r\n      }\r\n    }\r\n    let image = renderAsset(media);\r\n    if(visible || window.altrpImageLazy === 'skeleton'){\r\n      placeholderStyles.background = 'transparent';\r\n    }\r\n\r\n    let placeholder = <ImagePlaceholder color={media.main_color}\r\n                                        className={'altrp-image-placeholder '}\r\n                                        ref={this.imageRef}\r\n                                        settings={this.props.element?.getSettings() || {}}\r\n                                        height={height}\r\n                                        width={width}\r\n                                        style={placeholderStyles}\r\n                                        mediaWidth={media.width || 100}\r\n                                        mediaHeight={media.height || 75}>\r\n      {window.altrpImageLazy === 'skeleton'\r\n        && ! visible\r\n        &&\r\n          <Skeleton className=\"altrp-skeleton\"\r\n                    color={window.altrpSkeletonColor}\r\n                    highlightColor={window.altrpSkeletonHighlightColor}/>\r\n\r\n      }\r\n      {visible && React.cloneElement(image, {\r\n        className: this.props.className,\r\n        id: this.props.id || null,\r\n        style: this.props.style,\r\n      })}\r\n      </ImagePlaceholder>;\r\n\r\n    return <React.Fragment>\r\n      {placeholder}\r\n    </React.Fragment>\r\n  }\r\n}\r\n\r\nlet _export;\r\nif (isEditor()) {\r\n  _export = AltrpImage;\r\n} else {\r\n\r\n  function mapStateToProps(state) {\r\n    return {\r\n      scrollPosition: state.scrollPosition,\r\n      popupTrigger: state.popupTrigger,\r\n    };\r\n  }\r\n\r\n  _export = window.reactRedux.connect(mapStateToProps)(AltrpImage)\r\n}\r\nexport default _export;\r\n","import React from \"react\";\r\nconst {\r\n  getDataByPath,\r\n  isEditor,\r\n  parseOptionsFromSettings, renderAsset,\r\n  renderAssetIcon\r\n} = window.altrpHelpers;\r\n\r\nimport {NullArray} from \"./styled-components/TreeComponent\";\r\n\r\nconst TreeBlueprint = window.altrpLibs.Blueprint.Tree;\r\n\r\nexport const normalizeValues = function(branch) {\r\n  const folderIcon = \"folder-close\";\r\n  const icon = branch.icon || folderIcon;\r\n\r\n  // {\r\n  //   assetType: \"media\",\r\n  //     url: '/img/nullImage.png',\r\n  //   name: \"default\"\r\n  // }\r\n  const label = branch.label || \"Label\";\r\n\r\n  return {\r\n    ...branch,\r\n    labelValue: label,\r\n    label: label,\r\n    icon: icon.indexOf(\"/\") !== -1 || icon.url ? renderAsset(icon) : folderIcon,\r\n    iconValue: icon,\r\n    treeId: branch.tree_id || -1,\r\n    parentId: branch.parent || -1,\r\n  }\r\n}\r\n\r\nexport const getFromDatasource = function (settings = {}, settingNames=['tree_from_datasource', \"tree_substitute_datasource\"], defaultOptions=false) {\r\n  settings.path = this.props.element.getSettings(settingNames[0], '');\r\n  settings.path = settings.path.replace(/}}/g, '').replace(/{{/g, '');\r\n  settings.dataSettings = parseOptionsFromSettings(this.props.element.getSettings(settingNames[1]))\r\n  settings.sortDefault = this.props.element.getSettings(\"sort_default\");\r\n  settings.sortOption = this.props.element.getSettings(\"options_sorting\");\r\n  const data = getDataByPath(settings.path, [], this.props.element.getCurrentModel().getData());\r\n\r\n  if(! _.isArray(data)){\r\n    return [];\r\n  }\r\n  return data;\r\n  let repeater = [];\r\n\r\n  const keys = {\r\n    label: \"\",\r\n    icon: \"\",\r\n    tree_id: \"\",\r\n    parent: \"\",\r\n  }\r\n\r\n  if(isEditor()) {\r\n    settings.data = [\r\n      {\r\n        label: \"label 1\",\r\n        tree_id: 1,\r\n        value: 1,\r\n      },\r\n      {\r\n        label: \"child 1\",\r\n        parent_id: 1,\r\n        value: 2,\r\n      },\r\n      {\r\n        label: \"child 2\",\r\n        parent_id: 1,\r\n        tree_id: 2,\r\n        value: 3,\r\n      },\r\n      {\r\n        label: \"child 1\",\r\n        parent_id: 2,\r\n        tree_id: 2,\r\n        value: 4,\r\n      },\r\n      {\r\n        label: \"label 2\",\r\n        tree_id: 3,\r\n        value: 5,\r\n      },\r\n      {\r\n        label: \"child 1\",\r\n        parent_id: 3,\r\n        value: 6,\r\n      },\r\n      {\r\n        label: \"child 2\",\r\n        parent_id: 3,\r\n        value: 7,\r\n      },\r\n      {\r\n        label: \"label 3\",\r\n        value: 8,\r\n      },\r\n    ]\r\n  }\r\n\r\n  settings.dataSettings.forEach((s) => {\r\n    switch (s.value) {\r\n      case \"label\":\r\n        keys[s.value] = s.label || \"label\"\r\n        break;\r\n      case \"icon\":\r\n        keys[s.value] = s.label || \"icon\"\r\n        break;\r\n      case \"parent\":\r\n        keys[s.value] = s.label || \"parent_id\"\r\n        break;\r\n      case \"tree_id\":\r\n        keys[s.value] = s.label || \"tree_id\"\r\n        break;\r\n    }\r\n  })\r\n\r\n  let allKeys = true;\r\n\r\n  Object.values(keys).forEach((k) => {\r\n    if(!k) {\r\n      allKeys = false\r\n    }\r\n  })\r\n\r\n  if(allKeys && settings.data.length > 0) {\r\n    settings.data.forEach((d) => {\r\n      repeater.push({\r\n        label: d[keys.label],\r\n        icon: d[keys.icon],\r\n        tree_id: d[keys.tree_id],\r\n        parent: d[keys.parent],\r\n        value: d.value ? d.value : -1\r\n      })\r\n    })\r\n  }\r\n\r\n  if(!defaultOptions) {\r\n    return this.updateRepeater(repeater, {\r\n      sort: [settings.sortDefault, settings.sortOption]\r\n    })\r\n  } else {\r\n    if(! _.isArray(settings?.data)){\r\n      return  [];\r\n    }\r\n    return settings?.data?.map(branch => this.normalizeValues(branch)) || []\r\n  }\r\n}\r\n\r\nexport const updateRepeater = function (repeaterSetting, other={}) {\r\n  const repeater = [];\r\n\r\n  repeaterSetting.forEach((branch, idx) => {\r\n    let children = [];\r\n    const branchSettings = this.normalizeValues(branch)\r\n\r\n    if(branchSettings.treeId !== -1) {\r\n      repeaterSetting.forEach((possibleChild, possibleIdx) => {\r\n        if(idx !== possibleIdx) {\r\n          const possibleParentId = possibleChild.parent || -1;\r\n\r\n          if(possibleParentId === branchSettings.treeId) {\r\n            children.push({\r\n              ...this.normalizeValues(possibleChild),\r\n              id: possibleIdx,\r\n            })\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    if (other?.sort && !other?.sort[0]) {\r\n      children = _.sortBy(children, o => o && (o.label ? o.label.toString() : o));\r\n      if(other.sort[1] === 'desc'){\r\n        children = _.reverse(children)\r\n      }\r\n    }\r\n\r\n    repeater.push({\r\n      ...branchSettings,\r\n      id: idx,\r\n      hasCaret: branchSettings.treeId !== -1,\r\n      childNodes: children\r\n    })\r\n  })\r\n\r\n  let newRepeater = [];\r\n\r\n  repeater.forEach((branch) => {\r\n    newRepeater.push({\r\n      ...branch,\r\n      childNodes: this.childrenInChildren(branch.childNodes, repeater)\r\n    })\r\n  })\r\n\r\n  if (other?.sort && !other?.sort[0]) {\r\n    newRepeater = _.sortBy(newRepeater, o => o && (o.label ? o.label.toString() : o));\r\n    if(other.sort[1] === 'desc'){\r\n      newRepeater = _.reverse(newRepeater)\r\n    }\r\n  }\r\n\r\n  return newRepeater.filter((branch) => branch.parentId === -1);\r\n}\r\n\r\nexport const childrenInChildren = function(children, repeater) {\r\n  const replacedChildren = [];\r\n\r\n  if(children.length > 0) {\r\n    children.forEach((branch) => {\r\n      repeater.forEach((repBranch) => {\r\n        if(branch.id === repBranch.id) {\r\n          repBranch.childNodes = this.childrenInChildren(repBranch.childNodes, repeater)\r\n          replacedChildren.push(repBranch)\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  return replacedChildren\r\n}\r\n\r\nclass TreeWidget extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    let settings = props.element.getSettings();\r\n\r\n    this.state = {\r\n      settings,\r\n      type: settings.select_type || \"repeater\",\r\n      repeater: [],\r\n    };\r\n\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n\r\n    if(props.baseRender){\r\n      this.render = props.baseRender(this);\r\n    }\r\n\r\n    this.updateNode = this.updateNode.bind(this);\r\n    this.handleNodeExpand = this.handleNodeExpand.bind(this);\r\n    this.handleNodeCollapse = this.handleNodeCollapse.bind(this);\r\n    this.handleNodeClick = this.handleNodeClick.bind(this)\r\n  }\r\n\r\n  normalizeValues = normalizeValues;\r\n  getFromDatasource = getFromDatasource;\r\n  updateRepeater = updateRepeater;\r\n  childrenInChildren = childrenInChildren;\r\n\r\n\r\n  _componentDidMount() {\r\n    let settings = {\r\n      type: this.state.type,\r\n    }\r\n\r\n    if(settings.type === \"repeater\") {\r\n      settings.repeater = this.props.element.getResponsiveSetting(\"tree_repeater\", \"\", []);\r\n\r\n      const filtrationRepeater = this.updateRepeater(settings.repeater)\r\n\r\n      this.setState(s => ({\r\n        ...s,\r\n        repeater: filtrationRepeater\r\n      }))\r\n    } else if(settings.type === \"datasource\") {\r\n      const filtrationRepeater = this.getFromDatasource(settings) || []\r\n\r\n      this.setState(s => ({\r\n        ...s,\r\n        repeater: filtrationRepeater\r\n      }))\r\n    }\r\n  }\r\n\r\n\r\n\r\n  _componentDidUpdate(prevProps, prevState) {\r\n    let settings = {\r\n      type: this.state.type,\r\n    }\r\n\r\n    if(isEditor()) {\r\n      if(settings.type === \"repeater\") {\r\n        settings.repeater = this.props.element.getResponsiveSetting(\"tree_repeater\", \"\", []);\r\n        settings.prevRepeater = prevState.settings.tree_repeater || [];\r\n\r\n        if(settings.type === \"repeater\") {\r\n\r\n          const filtrationRepeater = this.updateRepeater(settings.repeater)\r\n\r\n          if(!_.isEqual(settings.prevRepeater, this.state.settings.tree_repeater)) {\r\n            this.setState(s => ({\r\n              ...s,\r\n              repeater: filtrationRepeater\r\n            }))\r\n          }\r\n        }\r\n      }\r\n\r\n      if(this.state.settings.select_type !== prevState.settings.select_type) {\r\n        this.setState(s => ({\r\n          ...s,\r\n          type: this.state.settings.select_type\r\n        }))\r\n      }\r\n    }\r\n  }\r\n  handleNodeClick(node, path) {\r\n    const originallySelected = node.isSelected;\r\n\r\n    this.updateNode({\r\n      node,\r\n      path,\r\n      current: path[0],\r\n      isSelected: originallySelected == null ? true : !originallySelected,\r\n      repeater: this.state.repeater,\r\n      next: path[1] ? path[1] : -1\r\n    })\r\n  }\r\n\r\n  forEachNode(nodes, callback) {\r\n    if (nodes === undefined) {\r\n      return;\r\n    }\r\n\r\n    for (const node of nodes) {\r\n      callback(node);\r\n      this.forEachNode(node.childNodes, callback);\r\n    }\r\n  }\r\n\r\n  handleNodeCollapse(node, path) {\r\n\r\n    this.updateNode({\r\n      node,\r\n      path,\r\n      current: path[0],\r\n      isExpanded: false,\r\n      repeater: this.state.repeater,\r\n      next: path[1] ? path[1] : -1\r\n    })\r\n  }\r\n\r\n  handleNodeExpand(node, path) {\r\n\r\n    this.updateNode({\r\n      node,\r\n      path,\r\n      current: path[0],\r\n      isExpanded: true,\r\n      repeater: this.state.repeater,\r\n      next: path[1] ? path[1] : -1\r\n    })\r\n  }\r\n\r\n  updateNode(settings) {\r\n    this.setState(s => {\r\n      const repeater = s.repeater;\r\n\r\n      if(settings.hasOwnProperty(\"isExpanded\")) {\r\n        TreeBlueprint.nodeFromPath(settings.path, repeater).isExpanded = settings.isExpanded;\r\n      } else {\r\n        this.forEachNode(repeater, node => (node.isSelected = false))\r\n        TreeBlueprint.nodeFromPath(settings.path, repeater).isSelected = settings.isSelected;\r\n      }\r\n\r\n      return {\r\n        ...s,\r\n        repeater\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return this.state.type !== \"datasource\" ? (\r\n      this.state.repeater.length > 0 ? (\r\n        <TreeBlueprint\r\n          contents={this.state.repeater}\r\n          onNodeClick={this.handleNodeClick}\r\n          onNodeCollapse={this.handleNodeCollapse}\r\n          onNodeExpand={this.handleNodeExpand}\r\n          />\r\n      ) : (\r\n        <NullArray>\r\n          Add a branch\r\n        </NullArray>\r\n      )\r\n    ) : this.state.repeater.length > 0 ? (<TreeBlueprint\r\n      contents={this.state.repeater}\r\n      onNodeClick={this.handleNodeClick}\r\n      onNodeCollapse={this.handleNodeCollapse}\r\n      onNodeExpand={this.handleNodeExpand}\r\n    />) : <NullArray>\r\n      Datasource is null\r\n    </NullArray>\r\n  }\r\n}\r\n\r\nexport default TreeWidget\r\n","import {styledString} from \"../../../../../../front-app/src/js/helpers/styles\";\nimport styled from \"styled-components\";\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\nimport AltrpImage from \"../../altrp-image/AltrpImage\";\n\nexport default function TreeComponent(settings, prefix) {\n  const styles = [\n    \"bp3-tree-node svg\",\n      [\"width\", \"icon_size\", \"slider\"],\n      [\"height\", \"icon_size\", \"slider\"],\n    \"}\",\n\n    \"bp3-tree-node.bp3-tree-node-selected path\",\n      [\"fill\", \"icon_fill\", \"color\", \".active\"],\n      [\"stroke\", \"icon_stroke\", \"color\", \".active\"],\n    \"}\",\n\n    \"bp3-tree-node path\",\n      [\"fill\", \"icon_fill\", \"color\"],\n      [\"stroke\", \"icon_stroke\", \"color\"],\n    \"}\",\n\n    \"bp3-tree-node path\",\n      [\"fill\", \"icon_fill\", \"color\"],\n      [\"stroke\", \"icon_stroke\", \"color\"],\n    \"}\",\n\n    \"bp3-tree-node-label\",\n      [\"\", \"typographic\", \"typographic\"],\n      [\"color\", \"typographic_color\", \"color\"],\n    \"}\",\n\n    \"bp3-tree-node-selected .bp3-tree-node-label\",\n      [\"\", \"typographic\", \"typographic\", \".active\"],\n      [\"color\", \"typographic_color\", \"color\", \".active\"],\n    \"}\",\n\n    \"bp3-tree-node-content\",\n      [\"height\", \"item_height\", \"slider\"],\n      [\"background-color\", \"item_background\", \"color\"],\n      [\"border-radius\", \"border_radius\", \"dimensions\"],\n      [\"\", \"border_shadow\", \"shadow\"],\n      [\"border-style\", \"border_type\", \"\"],\n      [\"border-width\", \"border_width\", \"dimensions\"],\n      [\"border-color\", \"border_color\", \"color\"],\n    \"}\",\n\n    \"bp3-tree-node-content:hover\",\n      [\"background-color\", \"item_background\", \"color\"],\n    \"}\",\n\n    \"bp3-tree-node-content:hover.bp3-tree-node-content:hover\",\n      [\"background-color\", \"item_background\", \"color\", \":hover\"],\n      [\"border-radius\", \"border_radius\", \"dimensions\", \":hover\"],\n      [\"border-style\", \"border_type\", \"\", \":hover\"],\n      [\"border-width\", \"border_width\", \"dimensions\", \":hover\"],\n      [\"border-color\", \"border_color\", \"color\", \":hover\"],\n      [\"\", \"border_shadow\", \"shadow\", \":hover\"],\n    \"}\",\n\n    (\"bp3-tree-node-selected > .bp3-tree-node-content:nth-child(1).bp3-tree-node-content, \" +\n    \".bp3-tree-node-selected > .bp3-tree-node-content:nth-child(1):hover.bp3-tree-node-content:hover\"),\n      [\"background-color\", \"item_background\", \"color\", \".active\"],\n      [\"border-radius\", \"border_radius\", \"dimensions\", \".active\"],\n      [\"border-style\", \"border_type\", \"\", \".active\"],\n      [\"border-width\", \"border_width\", \"dimensions\", \".active\"],\n      [\"border-color\", \"border_color\", \"color\", \".active\"],\n      [\"\", \"border_shadow\", \"shadow\", \".active\"],\n    \"}\",\n  ]\n\n  return styledString(styles, settings, {\n    settingsPrefix: prefix\n  })\n}\n\nexport const NullArray = styled.div`\n  height: 75px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #C4C4C4;\n`\n"],"sourceRoot":""}