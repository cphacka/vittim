{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/widgets/InputSelectTreeWidget.js","webpack:///./resources/modules/editor/src/js/helpers/recurse-each.js","webpack:///./resources/modules/front-app/src/js/store/forms-data-storage/actions.js"],"names":["window","altrpHelpers","convertData","isEditor","parseOptionsFromSettings","parseParamsFromString","replaceContentWithData","renderAssetIcon","renderAsset","getDataByPath","Resource","getDataFromLocalStorage","Button","altrpLibs","Blueprint","MenuItem","Popover","Popover2","TreeBlueprint","Tree","Alignment","InputGroup","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputSelectTreeWidget","props","timeInput","dispatchFieldValueToStore","value","userInput","formId","element","getFormId","fieldName","getFieldId","indexOf","_","isObject","appStore","dispatch","changeFormFieldValue","change_actions","getSettings","actionsManager","default","callAllWidgetActions","getIdForAction","getValue","state","get","getState","formsStore","renderRightIcon","right_icon","getResponsiveSetting","isEmpty","className","renderLeftIcon","left_icon","handleNodeClick","node","path","options","getOptions","join","setState","isOpen","getLabel","label","flatOptions","find","o","handleNodeToggle","recurseEach","item","isExpanded","onClick","handleSearch","searchValue","onInteraction","component","elementDecorator","defaultValue","getContent","id","childNodes","paramsForUpdate","popoverProps","usePortal","position","minimal","portalClassName","getId","widgetDisabled","portalContainer","EditorFrame","contentWindow","document","body","altrpSelectRef","React","this","prevProps","prevState","currentModel","getProperty","contentLoaded","currentDataStorage","url","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","getData","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","getCurrentModel","currentDataStorageLoaded","changedField","altrpstorage","isEqual","replace","eval","e","console","error","message","newOptions","isArray","cloneDeep","optionsDynamicSetting","getDynamicSetting","matchSorter","keys","nullLabel","unshift","map","hasCaret","length","text","nodes","callback","undefined","forEachNode","buttonLabel","label_icon","classLabel","styleLabel","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","zIndex","content_label","style","content_required","assetType","input","placeholder","content_readonly","s_off","inputProps","position_css_classes","position_css_id","getElementById","fill","popoverClassName","renderTarget","ref","targetProps","disabled","elementRef","icon","rightIcon","interactionKind","placement","content","leftIcon","onChange","target","contents","onNodeClick","onNodeCollapse","onNodeExpand","Component","array","childrenPath","isFunction","forEach","idx","children","CHANGE_FORM_FIELD_VALUE","CLEAR_FORM_FIELD_VALUE","type"],"mappings":"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","file":"InputSelectTreeWidget.c2fa428416c917ba73ec.bundle.js","sourcesContent":["import {matchSorter} from \"match-sorter\";\r\n\r\nconst {\r\n  convertData,\r\n  isEditor,\r\n  parseOptionsFromSettings,\r\n  parseParamsFromString,\r\n  replaceContentWithData,\r\n  renderAssetIcon,\r\n  renderAsset,\r\n  getDataByPath,\r\n  Resource,\r\n  getDataFromLocalStorage\r\n} = window.altrpHelpers;\r\nimport {changeFormFieldValue} from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\r\nimport React from \"react\";\r\nimport recurseEach from \"../../helpers/recurse-each\";\r\nconst Button = window.altrpLibs.Blueprint.Button;\r\nconst MenuItem = window.altrpLibs.Blueprint.MenuItem;\r\nconst Popover = window.altrpLibs.Popover2;\r\nconst TreeBlueprint = window.altrpLibs.Blueprint.Tree;\r\nconst Alignment = window.altrpLibs.Blueprint.Alignment;\r\nconst InputGroup = window.altrpLibs.Blueprint.InputGroup;\r\n\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n\r\n.altrp-select-tree {\r\n  display: flex;\r\n  grid-gap: 5px;\r\n  flex-direction: column;\r\n}\r\n\r\n.altrp-select-tree_popover{\r\n  .bp3-tree{\r\n    max-height: 250px;\r\n    overflow: auto;\r\n  }\r\n  .bp3-tree-node{\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.altrp-field {\r\n  border-style: solid;\r\n  width: 100%;\r\n}\r\n.altrp-field-file{\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n}\r\n.altrp-portal_input-select .bp3-menu{\r\n  max-height: 300px;\r\n  overflow: auto;\r\n}\r\n.altrp-widget_input-select .bp3-icon_right{\r\n    margin:  0 0 0 7px;\r\n}\r\n.bp3-icon_text-widget img{\r\n  width: 16px;\r\n  height: 16px;\r\n  object-fit: contain;\r\n  pointer-events: none;\r\n}\r\n.bp3-icon_text-widget svg{\r\n  width: 16px;\r\n  height: 16px;\r\n  pointer-events: none;\r\n}\r\n\r\n.altrp-select-tree-btn.altrp-select-tree-btn {\r\n  justify-content: flex-end;\r\n  padding-right:\r\n}\r\n\r\n.altrp-select-tree-btn.altrp-select-tree-btn.altrp-select-tree-btn .bp3-icon-caret-down.bp3-icon-caret-down {\r\n  margin: 0;\r\n}\r\n\r\n.altrp-select-tree-btn .bp3-button-text {\r\n  flex: 1;\r\n}\r\n\r\n.altrp-widget_input-select.altrp-widget_input-select .bp3-icon:first-child:last-child{\r\n   margin: 0;\r\n}\r\n.altrp-widget_input-select .bp3-popover-wrapper{\r\n  overflow: hidden;\r\n  display: flex;\r\n}\r\n.altrp-widget_input-select .bp3-popover-target > div{\r\n  width: 100%;\r\n}\r\n.altrp-widget_input-select .bp3-popover-target{\r\n  display: flex;\r\n  flex-grow: 1;\r\n}\r\n.altrp-widget_input-select .bp3-popover-target .bp3-button{\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  /*flex-direction: row-reverse;*/\r\n\r\n}\r\n.altrp-widget_input-select .bp3-popover-target .bp3-button .bp3-button-text{\r\n  flex-grow: 1;\r\n}\r\n.altrp-label-icon svg,\r\n.altrp-label-icon img {\r\n  width: 20px;\r\n}\r\n.altrp-label-icon svg{\r\n  height: 20px;\r\n}\r\n.altrp-field-file__field{\r\n  display: none;\r\n}\r\n.altrp-field-file__placeholder{\r\n  display: none;\r\n}\r\n.altrp-field-file_empty .altrp-field-file__placeholder{\r\n  display: block;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  cursor: pointer;\r\n  background-color: rgb(52,59,76);\r\n  color: #fff;\r\n}\r\n.input-clear-btn {\r\n  background: transparent;\r\n  padding: 0;\r\n  position: absolute;\r\n  bottom: calc(50% - 7px);\r\n  right: 15px;\r\n  display: none;\r\n}\r\n.input-clear-btn:hover {\r\n  font-weight: bold;\r\n}\r\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\r\n  display: block;\r\n}\r\n.altrp-input-wrapper, .altrp-field-select2 {\r\n  position: relative;\r\n  flex-grow: 1;\r\n}\r\n.altrp-field-label--required::after {\r\n  content: \"*\";\r\n  color: red;\r\n  font-size: inherit;\r\n  padding-left: 10px;\r\n}\r\n.altrp-field-label {\r\n  font-size: 16px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-field-select2__single-value, .altrp-field {\r\n  font-size: 16px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-field-select2__control, .altrp-field {\r\n  text-align: left;\r\n  padding-top: 2px;\r\n  padding-right: 2px;\r\n  padding-bottom: 2px;\r\n  padding-left: 2px;\r\n  border-width: 1px;\r\n}\r\n.altrp-field-select2__control:hover{\r\n  border-width: 1px;\r\n}\r\n.altrp-field-container {\r\n  margin: 0;\r\n}\r\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\r\n  font-size: 13px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-image-select {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n.altrp-image-select img {\r\n  flex-grow: 1;\r\n  object-fit: contain;\r\n}\r\n.altrp-field {\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n.altrp-field.active {\r\n  border-color: lightcoral;\r\n}\r\n.altrp-field-label {\r\n  text-align: center;\r\n  display: block;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__control {\r\n  width: 100px;\r\n  min-height: 32px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142,148,170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-field-select2 {\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  pointer-events: none;\r\n}\r\n.altrp-field-select2__control {\r\n  webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  background-color: hsl(0,0%,100%);\r\n  border-color: hsl(0,0%,80%);\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  cursor: default;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  -webkit-box-pack: justify;\r\n  -webkit-justify-content: space-between;\r\n  -ms-flex-pack: justify;\r\n  justify-content: space-between;\r\n  min-height: 38px;\r\n  outline: 0 !important;\r\n  position: relative;\r\n  -webkit-transition: all 100ms;\r\n  transition: all 100ms;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__value-container {\r\n  -webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex: 1;\r\n  -ms-flex: 1;\r\n  flex: 1;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  padding: 2px 8px;\r\n  -webkit-overflow-scrolling: touch;\r\n  position: relative;\r\n  overflow: hidden;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__single-value {\r\n  color: hsl(0,0%,20%);\r\n  margin-left: 2px;\r\n  margin-right: 2px;\r\n  max-width: calc(100% - 8px);\r\n  overflow: hidden;\r\n  position: absolute;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  top: 50%;\r\n  -webkit-transform: translateY(-50%);\r\n  -ms-transform: translateY(-50%);\r\n  transform: translateY(-50%);\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicators {\r\n  -webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  -webkit-align-self: stretch;\r\n  -ms-flex-item-align: stretch;\r\n  align-self: stretch;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex-shrink: 0;\r\n  -ms-flex-negative: 0;\r\n  flex-shrink: 0;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicator-separator {\r\n  -webkit-align-self: stretch;\r\n  -ms-flex-item-align: stretch;\r\n  align-self: stretch;\r\n  background-color: hsl(0,0%,80%);\r\n  margin-bottom: 8px;\r\n  margin-top: 8px;\r\n  width: 1px;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicator {\r\n  color: hsl(0,0%,80%);\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  padding: 8px;\r\n  -webkit-transition: color 150ms;\r\n  transition: color 150ms;\r\n  box-sizing: border-box;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.tba-placeholder {\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n}\r\n.altrp-field-subgroup {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n.altrp-field-option {\r\n  display: flex;\r\n  padding: 10px;\r\n}\r\n.altrp-field-option__label {\r\n  cursor: pointer;\r\n}\r\ntextarea.altrp-field {\r\n  display: block;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__placeholder {\r\n  white-space: nowrap;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control {\r\n  width: 100%;\r\n  min-height: 19px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142, 148, 170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__value-container {\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  line-height: 13px;\r\n}\r\n.altrp-field-required {\r\n  color: red;\r\n  font-size: 18px;\r\n  padding-left: 10px;\r\n}\r\n.altrp-field-container-label {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.altrp-field-label-container-left {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.altrp-field-label-container {\r\n  display: inline-flex;\r\n  align-items: center;\r\n}\r\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\r\n  padding: 0 8px;\r\n  max-height: 14px;\r\n  overflow: hidden;\r\n}\r\n.altrp-field-select2 .altrp-field-select2__value-container {\r\n  padding: 0px 8px;\r\n}\r\n.altrp-field-select2 .css-b8ldur-Input {\r\n  padding-bottom: 0px;\r\n  padding-top: 0px;\r\n  margin: 0 2px;\r\n}\r\n.altrp-field-select2 .altrp-field-select2__control {\r\n  min-height: 14px;\r\n}\r\n`)\r\n\r\nconst AltrpFieldContainer = styled.div`\r\n  ${({settings: {content_label_position_type}}) => {\r\n  switch (content_label_position_type) {\r\n    case \"left\": {\r\n      return \"display: flex\";\r\n    }\r\n    case \"right\": {\r\n      return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\r\n    }\r\n  }\r\n  return \"\";\r\n}}\r\n`;\r\n\r\nclass InputSelectTreeWidget extends Component {\r\n  timeInput = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    this.defaultValue =\r\n      this.getContent(\"content_default_value\")\r\n    let options = [];\r\n\r\n    const flatOptions = [];\r\n    if(isEditor()){\r\n      options = [\r\n        {\r\n          label: 'Empty First Level',\r\n          value: 1,\r\n          id: 1,\r\n          childNodes: [],\r\n        },\r\n        {\r\n          label: 'First Level With Child',\r\n          value: 2,\r\n          id: 2,\r\n          childNodes: [\r\n\r\n            {\r\n              label: 'Empty Second Level',\r\n              value: 3,\r\n              id: 3,\r\n              childNodes: [\r\n\r\n              ],\r\n            },\r\n\r\n            {\r\n              label: 'Second Level With Child',\r\n              value: 4,\r\n              id: 4,\r\n              childNodes: [\r\n                {\r\n                  label: 'Empty Third Level',\r\n                  value: 5,\r\n                  id: 5,\r\n                  childNodes: [\r\n\r\n                  ],\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ];\r\n      recurseEach(options, 'childNodes', item => {\r\n        flatOptions.push(item)\r\n      });\r\n    }\r\n    this.state = {\r\n      settings: {...props.element.getSettings()},\r\n      value: this.defaultValue,\r\n      options,\r\n      isOpen:false,\r\n      flatOptions,\r\n      paramsForUpdate: null,\r\n      searchValue: \"\"\r\n    };\r\n\r\n    this.popoverProps = {\r\n      usePortal: true,\r\n      position: 'bottom',\r\n      minimal: props.element.getResponsiveSetting('minimal'),\r\n      portalClassName: `altrp-portal altrp-portal_input-select altrp-portal${this.props.element.getId()} ${this.state.widgetDisabled ? 'pointer-event-none' : ''}`,\r\n      portalContainer: window.EditorFrame ? window.EditorFrame.contentWindow.document.body : document.body,\r\n    };\r\n    if(! isEditor()){\r\n      // this.popoverProps.boundary = '#front-app'\r\n    }\r\n    this.altrpSelectRef = React.createRef();\r\n    if (this.getContent(\"content_default_value\")) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Чистит значение\r\n   */\r\n  clearValue() {\r\n    let value = \"\";\r\n    this.dispatchFieldValueToStore(value, true);\r\n  }\r\n\r\n\r\n  /**\r\n   * Загрузка виджета\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  async _componentDidMount(prevProps, prevState) {\r\n\r\n    let value = this.state.value;\r\n\r\n    /**\r\n     * Если динамическое значение загрузилось,\r\n     * то используем this.getContent для получение этого динамического значения\r\n     * старые динамические данные\r\n     * */\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n\r\n    /**\r\n     * Если модель обновилась при смене URL\r\n     */\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({...state, value, contentLoaded: true}),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    if (\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      !this.state.contentLoaded\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({...state, value, contentLoaded: true}),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    if (this.state.value !== value) {\r\n      this.setState(\r\n        state => ({...state, value}),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получить url для запросов\r\n   */\r\n  getRoute() {\r\n    let url = this.props.element.getSettings(\"model_for_options\");\r\n\r\n    if (url.indexOf(\"/\") === -1) {\r\n      return `/ajax/models/${url}_options`;\r\n    }\r\n    if (url.indexOf(\"{{\") !== -1) {\r\n      url = replaceContentWithData(url);\r\n    }\r\n    return url;\r\n  }\r\n\r\n  /**\r\n   * Обновление виджета\r\n   */\r\n  async _componentDidUpdate(prevProps, prevState) {\r\n\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\r\n    ) {\r\n      let value = this.getContent(\r\n        \"content_default_value\",\r\n      );\r\n      this.setState(\r\n        state => ({...state, value, contentLoaded: true}),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n    this.updateOptions();\r\n    this.updateValue(prevProps);\r\n  }\r\n\r\n  /**\r\n   * Обновить значение если нужно\r\n   * @param {{}} prevProps\r\n   */\r\n  updateValue(prevProps) {\r\n    if (isEditor()) {\r\n      return;\r\n    }\r\n    let content_calculation = this.props.element.getSettings(\r\n      \"content_calculation\"\r\n    );\r\n    const altrpforms = this.props.formsStore;\r\n    const fieldName = this.props.element.getFieldId();\r\n    const formId = this.props.element.getFormId();\r\n    if (!content_calculation) {\r\n      /**\r\n       * Обновить значение, если formsStore изменилось из другого компонента\r\n       */\r\n      const path = `${formId}.${fieldName}`;\r\n      if (\r\n        this.props.formsStore !== prevProps.formsStore &&\r\n        _.get(altrpforms, path) !== this.state.value\r\n      ) {\r\n        this.setState(state => ({\r\n          ...state,\r\n          value: _.get(altrpforms, path)\r\n        }));\r\n      }\r\n      return;\r\n    }\r\n\r\n    const prevContext = {};\r\n\r\n    const altrpdata = this.props.currentDataStorage.getData();\r\n    const altrpmodel = this.props.currentModel.getData();\r\n    const altrpuser = this.props.currentUser.getData();\r\n    const altrppagestate = this.props.altrpPageState.getData();\r\n    const altrpresponses = this.props.altrpresponses.getData();\r\n    const altrpmeta = this.props.altrpMeta.getData();\r\n    const context = this.props.element.getCurrentModel().getData();\r\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\r\n      context.altrpdata = altrpdata;\r\n      if (!altrpdata.currentDataStorageLoaded) {\r\n        prevContext.altrpdata = altrpdata;\r\n      } else {\r\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\r\n      }\r\n    }\r\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\r\n      context.altrpforms = altrpforms;\r\n      /**\r\n       * Не производим вычисления, если изменилось текущее поле\r\n       */\r\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\r\n        prevContext.altrpforms = altrpforms;\r\n      } else {\r\n        prevContext.altrpforms = prevProps.formsStore;\r\n      }\r\n    }\r\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\r\n      context.altrpmodel = altrpmodel;\r\n      prevContext.altrpmodel = prevProps.currentModel.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\r\n      context.altrppagestate = altrppagestate;\r\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\r\n      context.altrpmeta = altrpmeta;\r\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\r\n      context.altrpresponses = altrpresponses;\r\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\r\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\r\n    }\r\n\r\n    if (\r\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\r\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\r\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\r\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\r\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\r\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\r\n    ) {\r\n      return;\r\n    }\r\n    if (\r\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      `${formId}.${fieldName}` === altrpforms.changedField\r\n    ) {\r\n      return;\r\n    }\r\n    let value = \"\";\r\n    try {\r\n      content_calculation = content_calculation\r\n        .replace(/}}/g, \"')\")\r\n        .replace(/{{/g, \"_.get(context, '\");\r\n      value = eval(content_calculation);\r\n      if (value === this.state.value) {\r\n        return;\r\n      }\r\n      this.setState(\r\n        state => ({...state, value}),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    } catch (e) {\r\n      console.error(\r\n        \"Evaluate error in Input: '\" + e.message + \"'\",\r\n        this.props.element.getId()\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновляет опции для селекта при обновлении данных, полей формы\r\n   */\r\n  async updateOptions() {\r\n    if(isEditor()){\r\n      return;\r\n    }\r\n\r\n    let newOptions = this.props.element.getResponsiveSetting('content_options') || '';\r\n    newOptions = getDataByPath(newOptions.replace('{{', '').replace('}}', ''))\r\n    if(! _.isArray(newOptions)) {\r\n      return;\r\n    }\r\n    const flatOptions = []\r\n    recurseEach(newOptions, 'childNodes', item=>{\r\n      flatOptions.push(item)\r\n    })\r\n    if(! _.isEqual(this.state.flatOptions, flatOptions)){\r\n      this.setState(state => ({...state, options: _.cloneDeep(newOptions), flatOptions: _.cloneDeep(flatOptions)}))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * получить опции\r\n   * @return []\r\n   */\r\n  getOptions() {\r\n    let options = [...this.state.options];\r\n    if(! _.isArray(options)){\r\n      options = [];\r\n    }\r\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\r\n      \"content_options\"\r\n    );\r\n    if (optionsDynamicSetting) {\r\n      options = convertData(optionsDynamicSetting, options);\r\n    }\r\n    if(this.state.searchValue){\r\n      options = matchSorter(options, this.state.searchValue, {\r\n        keys: [o => {\r\n          return o.label\r\n        }]\r\n      })\r\n    }\r\n    if(this.props.element.getResponsiveSetting('content_options_nullable')){\r\n      let nullLabel = '';\r\n      if(this.props.element.getResponsiveSetting('nulled_option_title')){\r\n        nullLabel = this.props.element.getResponsiveSetting('nulled_option_title')\r\n      }\r\n      options.unshift({\r\n        value: '',\r\n        label: nullLabel,\r\n        id: '',\r\n        childNodes: [],\r\n      })\r\n    }\r\n    options = options.map(o=>{\r\n      o = {...o}\r\n      o.hasCaret = ! ! o?.childNodes?.length\r\n      return o;\r\n    })\r\n\r\n    return options\r\n  }\r\n\r\n  /**\r\n   * Передадим значение в хранилище формы\r\n   * @param {*} value\r\n   * @param {boolean} userInput true - имзенилось пользователем\r\n   */\r\n  dispatchFieldValueToStore = async (value, userInput = false) => {\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n    if (fieldName.indexOf(\"{{\") !== -1) {\r\n      fieldName = replaceContentWithData(fieldName);\r\n    }\r\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\r\n      this.props.appStore.dispatch(\r\n        changeFormFieldValue(fieldName, value, formId, userInput)\r\n      );\r\n      if (userInput) {\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n\r\n        if (change_actions && !isEditor()) {\r\n          const actionsManager = (\r\n            await import(\r\n              /* webpackChunkName: 'ActionsManager' */\r\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n              )\r\n          ).default;\r\n          await actionsManager.callAllWidgetActions(\r\n            this.props.element.getIdForAction(),\r\n            \"change\",\r\n            change_actions,\r\n            this.props.element\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Взовращает имя для атрибута name\r\n   * @return {string}\r\n   */\r\n  getName() {\r\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\r\n  }\r\n\r\n  escapeRegExpChars(text) {\r\n    return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @returns {*}\r\n   */\r\n  getValue = () => {\r\n    let value;\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n    if (isEditor()) {\r\n      value = this.state.value;\r\n    } else {\r\n\r\n      value = _.get(appStore.getState().formsStore, `${formId}`, '')\r\n      value = _.get(value, fieldName, '')\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @return {JSX.Element|string}\r\n   */\r\n  renderRightIcon = ()=>{\r\n    const right_icon = this.props.element.getResponsiveSetting('right_icon')\r\n    if(_.isEmpty(right_icon)){\r\n      return 'caret-down'\r\n    }\r\n    return <span className=\"bp3-icon bp3-icon_text-widget bp3-icon_right\" >\r\n      {renderAsset(right_icon )}\r\n    </span>\r\n  }\r\n  /**\r\n   *\r\n   * @return {JSX.Element|null}\r\n   */\r\n  renderLeftIcon = ()=>{\r\n    const left_icon = this.props.element.getResponsiveSetting('left_icon')\r\n    if(_.isEmpty(left_icon)){\r\n      return null\r\n    }\r\n    return <span className=\"bp3-icon bp3-icon_text-widget bp3-icon_left\" >\r\n      {renderAsset(left_icon)}\r\n    </span>\r\n  }\r\n\r\n  handleNodeClick = (node, path)=> {\r\n    const options = this.getOptions();\r\n    path = path.join('.childNodes.')\r\n    let value = _.get(options,`${path}.value`)\r\n    this.dispatchFieldValueToStore(value, true)\r\n    this.setState(state=>({...state, isOpen:false,}))\r\n  }\r\n\r\n  /**\r\n   * Вернуть лэйбл текущего значения\r\n   * @return {*}\r\n   */\r\n  getLabel = ()=>{\r\n    const flatOptions = this.state.flatOptions;\r\n    let label =  flatOptions.find(o=>o.value === this.getValue())?.label || '';\r\n    if(! this.getValue() && this.props.element.getResponsiveSetting('content_options_nullable')){\r\n      label = this.props.element.getResponsiveSetting('nulled_option_title') || ''\r\n    }\r\n    return label\r\n  }\r\n\r\n  forEachNode(nodes, callback) {\r\n    if (nodes === undefined) {\r\n      return;\r\n    }\r\n\r\n    for (const node of nodes) {\r\n      callback(node);\r\n      this.forEachNode(node.childNodes, callback);\r\n    }\r\n  }\r\n\r\n\r\n  handleNodeToggle = (node, path) => {\r\n    let options = this.state.options\r\n    recurseEach(options, 'childNodes', item=>{\r\n      if(item.value === node.value){\r\n        item.isExpanded = ! item.isExpanded\r\n      }\r\n    })\r\n    this.setState(state=>({...state, options}))\r\n  }\r\n\r\n\r\n  /**\r\n   * Обработка клика по кнопке\r\n   * @return {Promise<void>}\r\n   */\r\n  onClick = async ()=>{\r\n    if (this.props.element.getSettings(\"click_actions\", []) && !isEditor()) {\r\n      const actionsManager = (\r\n        await import(\r\n          /* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n          )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        \"click\",\r\n        this.props.element.getSettings(\"click_actions\", []),\r\n        this.props.element\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Фильтрация опций\r\n   * @param searchValue\r\n   * @param get\r\n   * @return {T[]}\r\n   */\r\n  handleSearch = (searchValue, get=false) => {\r\n    this.setState(state=>({...state, searchValue}))\r\n  }\r\n\r\n  onInteraction = (isOpen)=>{\r\n    this.setState(state=>({...state, isOpen}))\r\n  }\r\n  render() {\r\n    const element = this.props.element;\r\n    let label = null;\r\n    const settings = this.props.element.getSettings();\r\n    let buttonLabel = this.getLabel();\r\n\r\n    const {\r\n      label_icon\r\n    } = settings;\r\n\r\n    let classLabel = \"\";\r\n    let styleLabel = {};\r\n    const content_label_position_type = this.props.element.getResponsiveSetting(\r\n      \"content_label_position_type\"\r\n    ) || 'top';\r\n    switch (content_label_position_type) {\r\n      case \"top\":\r\n        styleLabel = {\r\n          marginBottom: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"bottom\":\r\n        styleLabel = {\r\n          marginTop: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"left\":\r\n        styleLabel = {\r\n          marginRight: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"altrp-field-label-container-left\";\r\n        // this.label.current.classList.add(\"hello\")\r\n\r\n        break;\r\n      case \"absolute\":\r\n        styleLabel = {\r\n          position: \"absolute\",\r\n          zIndex: 2\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n    }\r\n    const content_label = this.getContent('content_label')\r\n    if (content_label) {\r\n      label = (\r\n        <div\r\n          className={\"altrp-field-label-container \" + classLabel}\r\n          style={styleLabel}\r\n        >\r\n          <label\r\n            className={`altrp-field-label ${this.state.settings.content_required\r\n              ? \"altrp-field-label--required\"\r\n              : \"\"\r\n            }`}\r\n          >\r\n            {content_label}\r\n          </label>\r\n          {label_icon && label_icon.assetType && (\r\n            <span className=\"altrp-label-icon\">\r\n              {renderAssetIcon(label_icon)}\r\n            </span>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      label = null;\r\n    }\r\n\r\n    const placeholder = element.getResponsiveSetting('content_placeholder');\r\n    const content_readonly = element.getResponsiveSetting('content_readonly');\r\n    const no_results_text = element.getResponsiveSetting('no_results_text');\r\n    const s_off = element.getResponsiveSetting('s_off');\r\n\r\n    const inputProps = {\r\n      placeholder,\r\n    };\r\n\r\n    let input = null;\r\n\r\n    const position_css_classes = element.getResponsiveSetting('position_css_classes', '', '')\r\n    const position_css_id = this.getContent('position_css_id')\r\n\r\n    let body = isEditor() ?\r\n      document.getElementById(\"editorContent\").contentWindow.document.body\r\n      :\r\n      document.body;\r\n    input = (\r\n      <Popover\r\n        usePortal={false}\r\n        fill={true}\r\n        isOpen={this.state.isOpen}\r\n        onInteraction={this.onInteraction}\r\n        popoverClassName={`altrp-select-tree_popover altrp-select-tree${this.props.element.getId()}`}\r\n        renderTarget={({isOpen, ref, ...targetProps}) => {\r\n          targetProps.className += \" altrp-select-tree-btn\"\r\n          return (\r\n            <Button\r\n              text={buttonLabel}\r\n              fill\r\n              disabled={content_readonly}\r\n              elementRef={ref}\r\n              icon={this.renderLeftIcon()}\r\n              rightIcon={this.renderRightIcon()}\r\n              {...targetProps}\r\n              onClick={(e) => {\r\n                this.onClick();\r\n                targetProps.onClick(e)\r\n              }}\r\n            />\r\n          )\r\n        }}\r\n        portalContainer={body}\r\n        interactionKind=\"click\"\r\n        placement=\"bottom\"\r\n        content={\r\n          <div className={\"altrp-select-tree\" + (position_css_classes ? ` ${position_css_classes}` : \"\")} id={position_css_id}>\r\n            {\r\n              ! s_off ? (\r\n                <InputGroup\r\n                  leftIcon=\"search\"\r\n                  placeholder=\"Filter...\"\r\n                  value={this.state.searchValue}\r\n                  onChange={(e) => this.handleSearch(e.target.value)}\r\n                  {...inputProps}\r\n                />\r\n              ) : \"\"\r\n            }\r\n            {\r\n              this.getOptions().length > 0 ? (\r\n                <TreeBlueprint\r\n                  contents={this.getOptions()}\r\n                  onNodeClick={this.handleNodeClick}\r\n                  onNodeCollapse={this.handleNodeToggle}\r\n                  onNodeExpand={this.handleNodeToggle}\r\n                />\r\n              ) : ''\r\n            }\r\n          </div>\r\n        }\r\n      />\r\n    );\r\n\r\n    return (\r\n      <AltrpFieldContainer\r\n        settings={settings}\r\n        className={\"altrp-field-container \"}\r\n      >\r\n        {content_label_position_type === \"top\" ? label : \"\"}\r\n        {content_label_position_type === \"left\" ? label : \"\"}\r\n        {content_label_position_type === \"right\" ? label : \"\"}\r\n        {content_label_position_type === \"absolute\" ? label : \"\"}\r\n        {/* .altrp-field-label-container */}\r\n        {input}\r\n        {content_label_position_type === \"bottom\" ? label : \"\"}\r\n      </AltrpFieldContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputSelectTreeWidget;\r\n","/**\r\n *\r\n * @param {[]} array\r\n * @param {string} childrenPath\r\n * @param {Function} callback\r\n * @return void\r\n */\r\nexport default function recurseEach(array, childrenPath, callback) {\r\n  if(! _.isArray(array) || ! childrenPath || ! _.isFunction(callback)){\r\n    return;\r\n  }\r\n  array.forEach((item, idx) => {\r\n    const children = _.get(item, childrenPath);\r\n    if(_.isArray(children)){\r\n      recurseEach(children, childrenPath, callback)\r\n    }\r\n    callback(item, idx);\r\n  })\r\n}\r\n","export const CHANGE_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\r\nexport const CLEAR_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\r\n\r\n/**\r\n * Получает данные поля формы и сохраняет в хранилище\r\n * @param {string}fieldName\r\n * @param {*}value\r\n * @param {string}formId\r\n * @param {boolean}userInput\r\n * @return {{type: string, fieldName: *, value: *, formId: *}}\r\n */\r\nexport function changeFormFieldValue(fieldName, value, formId, userInput) {\r\n\r\n  return {\r\n    type: CHANGE_FORM_FIELD_VALUE,\r\n    fieldName,\r\n    value,\r\n    formId,\r\n    changedField: userInput ? `${formId}.${fieldName}` : null,\r\n  };\r\n}\r\n/**\r\n * Очистить данные поля формы и сохраняет в хранилище\r\n * @param {string | null}formId\r\n * @return {{type: string, fieldName: *, value: *, formId: *}}\r\n */\r\nexport function clearFormStorage(formId = null) {\r\n  return {\r\n    type: CLEAR_FORM_FIELD_VALUE,\r\n    formId,\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}