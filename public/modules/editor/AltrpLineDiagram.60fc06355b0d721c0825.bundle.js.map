{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/dashboard/services/getWidgetData.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicLineChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/EmptyWidget.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/Spinner.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/d3/Tooltip.js","webpack:///./resources/modules/editor/src/js/components/altrp-diagram/AltrpLineDiagram.js","webpack:///./node_modules/d3-shape/src/constant.js"],"names":["queryString","obj","data","Object","keys","reduce","str","key","i","encodeURIComponent","join","console","log","getWidgetData","url","filter","params","JSON","parse","axios","status","Tooltip","regagroScheme","_","find","Schemes","value","colors","milkScheme","milkScheme2","format","widget","width","height","margin","keyIsDate","dataSource","lineWidth","pointSize","xScaleType","precision","colorScheme","curve","enableArea","enablePoints","pointColor","yMarker","yMarkerValue","yMarkerOrientation","yMarkerColor","yMarkerLabel","yMarkerWidth","xMarker","xMarkerValue","xMarkerOrientation","xMarkerColor","xMarkerLabel","xMarkerWidth","yMarkerLabelColor","xMarkerLabelColor","sort","tickRotation","bottomAxis","enableGridX","enableGridY","customColorSchemeChecker","customColors","constantsAxises","yScaleMax","widgetID","useCustomTooltips","useState","isLoading","setIsLoading","setData","getData","useCallback","length","source","charts","newData","map","item","currentKey","keyFormatted","moment","isValid","y","Number","x","id","forEach","index","sortBy","useEffect","uniq","includes","style","top","right","bottom","left","xFormat","yScale","max","type","xScale","markers","axisBottom","useMesh","tooltip","datum","enable","scheme","colorPickedHex","from","modifiers","text","className","role","props","state","enablebar","point","settings","containerSettings","bind","prevProps","prevState","isEqual","this","setState","s","settenableings","padding","borderStyle","borderRadius","borderColor","borderWidth","backgroundColor","color","flexDirection","undefined","whiteSpace","display","alignItems","background","marginRight","xFormatted","React","Fragment","label","yFormatted","fontSize","boxShadow","PureComponent","connect","currentDataStorage","dispatch","useDispatch","widgetName","widget_name","isCustomColor","customScheme","get","axisY","tooltipValues","repTooltips","field","customTooltip","formattedYAxis","valueFromPath","getDataByPath","axis","lineStyle","stroke","strokeWidth","textStyle","fill","legend","legendOrientation","axisX","formattedXAxis","xMarkerIsDate","push","flat","sql","query","isMultiple","isCustomColors","key_is_date","xMarkerValueDate","toDate","formatData","r","d","currentColors","colorsCount","isEditor","cloneDeep","rep","innerData","path","uniqBy","title","datasource_path","key_name","data_name","datasource_title","error","legendPosition","qs","keyValues","split","result","replace","parseQueryParams","defaultParams","options","animated","isVertical","changePageState","setLegend","size","unit"],"mappings":"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","file":"AltrpLineDiagram.60fc06355b0d721c0825.bundle.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const queryString = (obj = {}) => {\r\n  let data = Object.keys(obj).reduce((str, key, i) => {\r\n    let delimiter, val;\r\n    delimiter = i === 0 ? \"?\" : \"&\";\r\n    key = encodeURIComponent(key);\r\n    val = encodeURIComponent(obj[key]);\r\n    return [str, delimiter, key, \"=\", val].join(\"\");\r\n  }, \"\");\r\n  console.log(\"RESULT ==>\", data);\r\n  return data;\r\n};\r\n\r\nexport const getWidgetData = async (url, filter) => {\r\n  let params = \"\";\r\n  if (typeof filter === \"object\") {\r\n    params = queryString(filter);\r\n  } else if (typeof filter !== \"undefined\") {\r\n    params = queryString(JSON.parse(filter));\r\n  }\r\n  try {\r\n    return await axios(url + params, {\r\n      // headers: [{ key: \"Cache-Control\", value: \"no-store\" }]\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { status: 500 };\r\n  }\r\n};\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\nTooltip;\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport Schemes from \"../../../../../editor/src/js/components/altrp-dashboards/settings/NivoColorSchemes\";\r\nconst regagroScheme = _.find(Schemes, { value: \"regagro\" }).colors;\r\nconst milkScheme = _.find(Schemes, { value: \"milk\" }).colors;\r\nconst milkScheme2 = _.find(Schemes, { value: \"milk2\" }).colors;\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\nimport moment from \"moment\";\r\nimport Tooltip from \"./d3/Tooltip\";\r\n\r\nconst format = \"%d.%m.%Y\";\r\n\r\nconst DynamicLineChart = ({\r\n  widget,\r\n  width = `300px`,\r\n  height = `450px`,\r\n  margin,\r\n  keyIsDate,\r\n  dataSource = [],\r\n  lineWidth = 2,\r\n  pointSize = 10,\r\n  xScaleType = \"point\",\r\n  precision = \"month\",\r\n  colorScheme = \"red_grey\",\r\n  curve = \"linear\",\r\n  enableArea = false,\r\n  enablePoints = true,\r\n  pointColor,\r\n  yMarker = false,\r\n  yMarkerValue = 0,\r\n  yMarkerOrientation = \"vertical\",\r\n  yMarkerColor,\r\n  yMarkerLabel = \"\",\r\n  yMarkerWidth = 2,\r\n  xMarker = false,\r\n  xMarkerValue = 0,\r\n  xMarkerOrientation = \"vertical\",\r\n  xMarkerColor,\r\n  xMarkerLabel = \"\",\r\n  xMarkerWidth = 2,\r\n  yMarkerLabelColor,\r\n  xMarkerLabelColor,\r\n  sort = \"\",\r\n  tickRotation = 0,\r\n  bottomAxis = true,\r\n  enableGridX = true,\r\n  enableGridY = true,\r\n  customColorSchemeChecker = false,\r\n  customColors = [],\r\n  constantsAxises = [],\r\n  yScaleMax,\r\n  widgetID,\r\n  useCustomTooltips\r\n}) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    if (dataSource.length == 0) {\r\n      const charts = await getWidgetData(widget.source, widget.filter);\r\n      if (charts.status === 200) {\r\n        const newData = charts.data.data.map(item => {\r\n          const currentKey = item.key;\r\n          const keyFormatted = !moment(currentKey).isValid()\r\n            ? currentKey\r\n            : moment(currentKey).format(\"DD.MM.YYYY\");\r\n          return {\r\n            y: Number(item.data),\r\n            x: keyIsDate ? keyFormatted : currentKey\r\n          };\r\n        });\r\n        let data = [\r\n          {\r\n            id: \"\",\r\n            data: newData\r\n          }\r\n        ];\r\n        setData(data || []);\r\n        setIsLoading(false);\r\n      }\r\n    } else {\r\n      if (\r\n        sort !== null &&\r\n        sort !== \"undefined\" &&\r\n        typeof dataSource !== \"undefined\"\r\n      ) {\r\n        switch (sort) {\r\n          case \"value\":\r\n            dataSource.forEach((item, index) => {\r\n              if (item.data.length > 0) {\r\n                dataSource[index].data = _.sortBy(item.data, [\"y\"]);\r\n              }\r\n            });\r\n            break;\r\n          case \"key\":\r\n            data.forEach((item, index) => {\r\n              if (item.data.length > 0) {\r\n                dataSource[index].data = _.sortBy(item.data, [\"x\"]);\r\n              }\r\n            });\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      setData(dataSource || []);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  let matches = [];\r\n  let isNotEmpty = false;\r\n\r\n  matches = _.uniq(\r\n    data.map(item => {\r\n      return item.data.length > 0;\r\n    })\r\n  );\r\n\r\n  isNotEmpty = matches.includes(true);\r\n  if (!isNotEmpty) return <EmptyWidget />;\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          width: width,\r\n          height: height\r\n        }}\r\n      >\r\n        <ResponsiveLine\r\n          data={data}\r\n          margin={{\r\n            top: margin?.top || 30,\r\n            right: margin?.right || 30,\r\n            bottom: margin?.bottom || 30,\r\n            left: margin?.left || 30\r\n          }}\r\n          xFormat={xScaleType === \"time\" && \"time:%d.%m.%Y\"}\r\n          yScale={\r\n            yScaleMax\r\n              ? {\r\n                  max: yScaleMax,\r\n                  type: \"linear\"\r\n                }\r\n              : {\r\n                  type: \"linear\"\r\n                }\r\n          }\r\n          xScale={\r\n            xScaleType === \"time\"\r\n              ? { type: xScaleType, format: format, precision: precision }\r\n              : { type: xScaleType }\r\n          }\r\n          lineWidth={lineWidth}\r\n          markers={constantsAxises}\r\n          enableGridX={enableGridX}\r\n          enableGridY={enableGridY}\r\n          axisBottom={\r\n            bottomAxis &&\r\n            (xScaleType === \"time\"\r\n              ? {\r\n                  format: format,\r\n                  tickRotation: tickRotation\r\n                }\r\n              : {\r\n                  tickRotation: tickRotation\r\n                })\r\n          }\r\n          useMesh={true}\r\n          enableArea={enableArea}\r\n          enablePoints={enablePoints}\r\n          tooltip={datum => {\r\n            console.log(\"====================================\");\r\n            console.log(datum);\r\n            console.log(\"====================================\");\r\n            return (\r\n              <Tooltip\r\n                keyIsDate={keyIsDate}\r\n                datum={datum}\r\n                enable={useCustomTooltips}\r\n                widgetID={widgetID}\r\n              />\r\n            );\r\n          }}\r\n          pointSize={pointSize}\r\n          curve={curve}\r\n          colors={\r\n            customColorSchemeChecker && customColors.length > 0\r\n              ? customColors\r\n              : colorScheme === \"regagro\"\r\n              ? regagroScheme\r\n              : colorScheme === \"milk\"\r\n              ? milkScheme\r\n              : colorScheme === \"milk2\"\r\n              ? milkScheme2\r\n              : { scheme: colorScheme }\r\n          }\r\n          pointColor={\r\n            typeof pointColor !== \"undefined\" && pointColor !== null\r\n              ? pointColor.colorPickedHex\r\n              : { from: \"color\", modifiers: [] }\r\n          }\r\n          // legends={[\r\n          //   {\r\n          //     anchor: \"bottom-right\",\r\n          //     direction: \"column\",\r\n          //     justify: false,\r\n          //     translateX: 130,\r\n          //     translateY: 0,\r\n          //     itemsSpacing: 0,\r\n          //     itemDirection: \"left-to-right\",\r\n          //     itemWidth: 120,\r\n          //     itemHeight: 20,\r\n          //     itemOpacity: 0.75,\r\n          //     symbolSize: 12,\r\n          //     symbolShape: \"circle\",\r\n          //     symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n          //     effects: [\r\n          //       {\r\n          //         on: \"hover\",\r\n          //         style: {\r\n          //           itemBackground: \"rgba(0, 0, 0, .03)\",\r\n          //           itemOpacity: 1\r\n          //         }\r\n          //       }\r\n          //     ]\r\n          //   }\r\n          // ]}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicLineChart;\r\n","import React from \"react\";\r\n\r\nconst EmptyWidget = ({ text }) => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-container__text\">{text ? text : \"Данные обрабатываются\"}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmptyWidget;\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div\r\n        className=\"spinner-border\"\r\n        style={{ width: \"3rem\", height: \"3rem\" }}\r\n        role=\"status\"\r\n      >\r\n        <span className=\"sr-only\">Загрузка...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import { PureComponent } from \"react\";\r\n// import { Component } from \"react\";\r\n\r\n/**\r\n * Tooltip для Line и Scatter\r\n */\r\nclass Tooltip extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      enablebar: props.datum.enable,\r\n      enable: props.enable,\r\n      point: props.datum.point,\r\n      data: props.datum.point.data,\r\n      settings: props?.settings,\r\n      keyIsDate: props?.keyIsDate\r\n    };\r\n\r\n    this.containerSettings = this.containerSettings.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (!_.isEqual(prevProps.datum.point, this.props.datum.point)) {\r\n      this.setState(s => ({\r\n        ...s,\r\n        point: this.props.datum.point,\r\n        data: this.props.datum.point.data\r\n      }));\r\n    }\r\n    if (!_.isEqual(prevProps.settings, this.props.settings)) {\r\n      this.setState(s => ({\r\n        ...s,\r\n        settings: this.props?.settings\r\n      }));\r\n    }\r\n    if (!_.isEqual(prevProps.enable, this.props.enable)) {\r\n      this.setState(s => ({\r\n        ...s,\r\n        settenableings: this.props?.enable\r\n      }));\r\n    }\r\n  }\r\n\r\n  containerSettings() {\r\n    const settings = this.state?.settings || {};\r\n\r\n    const result = {\r\n      padding: `${settings?.padding?.top || 5}px ${settings?.padding?.right ||\r\n        5}px ${settings?.padding?.bottom || 5}px ${settings?.padding?.left ||\r\n        5}px`,\r\n      borderStyle: `${settings?.borderStyle || \"solid\"}`,\r\n      borderRadius: `${settings?.borderRadius || \"4px\"}`,\r\n      borderColor: `${settings?.borderColor || \"black\"}`,\r\n      borderWidth: `${settings?.borderWidth || \"1px\"}`,\r\n      backgroundColor: `${settings?.backgroundColor || \"red\"}`,\r\n      color: \"white\",\r\n      width: \"fit-content\",\r\n      flexDirection: \"column-reverse\"\r\n    };\r\n    return result;\r\n  }\r\n\r\n  render() {\r\n    if (this.state.enable) {\r\n      return (\r\n        <>\r\n          <div\r\n            className={`${this.props.widgetID} altrp-dashboard__tooltip--label-background altrp-dashboard__tooltip--width altrp-dashboard__tooltip--label-background-shadow altrp-dashboard__tooltip--border-type altrp-dashboard__tooltip--border-width altrp-dashboard__tooltip--border-color col-12`}\r\n            style={{ padding: \"5px 9px\" }}\r\n          >\r\n            <div>\r\n            {this.state.data?.tooltip === undefined &&\r\n              <div style={{\r\n                whiteSpace: \"pre\",\r\n                display: \"flex\",\r\n                alignItems: \"center\"\r\n              }}>\r\n                <span\r\n                  style={{\r\n                    display: \"block\",\r\n                    width: \"12px\",\r\n                    height: \"12px\",\r\n                    background: this.state.point.color,\r\n                    marginRight: \"7px\"\r\n                  }}\r\n                >\r\n                </span>\r\n                <div\r\n                  className={`${this.props.widgetID} altrp-dashboard__tooltip--font col px-0`}\r\n                >\r\n                  {this.props.keyIsDate\r\n                  ? this.state.data.xFormatted\r\n                  : this.state.data.x}\r\n                  :\r\n                  <strong\r\n                    className={`${this.props.widgetID} altrp-dashboard__tooltip--font col px-0`}\r\n                  >\r\n                    {this.state.data.y}\r\n                  </strong>\r\n                </div>\r\n              </div>\r\n              }\r\n              {this.state.data?.tooltip?.map((item, index) => {\r\n                return (\r\n                  <React.Fragment>\r\n                    <div\r\n                      style={{\r\n                        color: item?.color || \"#000000\"\r\n                      }}\r\n                      key={index}\r\n                    >\r\n                      {`${item?.label}:`}\r\n                      <strong>{item.value}</strong>\r\n                    </div>\r\n                  </React.Fragment>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n    //Дефолтный тултип\r\n    const { xFormatted, yFormatted } = this.state.data;\r\n    return (\r\n      <>\r\n        <div\r\n          style={{\r\n            background: \"white\",\r\n            color: \"inherit\",\r\n            fontSize: \"{{SIZE}}px\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"rgba(0, 0, 0, 0.25) 0px 1px 2px\",\r\n            padding: \"5px 9px\"\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              whiteSpace: \"pre\",\r\n              display: \"flex\",\r\n              alignItems: \"center\"\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                display: \"block\",\r\n                width: \"12px\",\r\n                height: \"12px\",\r\n                background: this.state.point.color,\r\n                marginRight: \"7px\"\r\n              }}\r\n            ></span>\r\n            <span>\r\n              {xFormatted}: <strong>{yFormatted}</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tooltip;\r\n","import React, { useEffect } from \"react\";\r\nimport { changePageState } from \"../../../../../front-app/src/js/store/altrp-page-state-storage/actions\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\n\r\nimport DynamicLineChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicLineChart\";\r\n\r\nimport Schemes from \"../../../../../editor/src/js/components/altrp-dashboards/settings/NivoColorSchemes\";\r\n\r\nimport { getDataByPath, isEditor } from \"../../../../../front-app/src/js/helpers\";\r\nimport moment from \"moment\";\r\n\r\nconst AltrpDiagram = props => {\r\n  const { settings, id } = props;\r\n\r\n  const dispatch = useDispatch();\r\n  const margin = settings?.margin;\r\n  const widgetName = settings?.widget_name || id;\r\n  const customColorSchemeChecker = settings?.isCustomColor;\r\n\r\n  const customColors = settings?.customScheme?.map(item =>\r\n    _.get(item, \"color.colorPickedHex\")\r\n  );\r\n  const yScaleMax = settings?.yScaleMax;\r\n\r\n  const axisY = settings?.axisY;\r\n  const tooltipValues = settings?.repTooltips?.map(item => ({\r\n    label: _.get(item, \"label\"),\r\n    field: _.get(item, \"value\"),\r\n    color: _.get(item, \"color\")?.colorPickedHex\r\n  }));\r\n  const useCustomTooltips = settings?.customTooltip;\r\n\r\n  const formattedYAxis =\r\n    axisY?.map(item => {\r\n      const valueFromPath = getDataByPath(item.yMarkerValue);\r\n      const value =\r\n        valueFromPath !== null\r\n          ? Number(valueFromPath)\r\n          : Number(item.yMarkerValue);\r\n      const data = {\r\n        axis: \"y\",\r\n        value: value,\r\n        lineStyle: {\r\n          stroke:\r\n            item.yMarkerColor != null\r\n              ? item.yMarkerColor.colorPickedHex\r\n              : \"#000000\",\r\n          strokeWidth: item.yMarkerWidth\r\n        },\r\n        textStyle: {\r\n          fill:\r\n            item.yMarkerLabelColor != null\r\n              ? item.yMarkerLabelColor.colorPickedHex\r\n              : \"#000000\"\r\n        },\r\n        legend: item.yMarkerLabel,\r\n        legendOrientation: item.yMarkerOrientation\r\n      };\r\n      return data;\r\n    }) || [];\r\n\r\n  const axisX = settings?.axisX;\r\n  const formattedXAxis =\r\n    axisX?.map(item => {\r\n      const valueFromPath = getDataByPath(item.xMarkerValue);\r\n\r\n      const value =\r\n        valueFromPath !== null\r\n          ? valueFromPath\r\n          : item.xMarkerIsDate\r\n          ? moment(item.xMarkerValue).format(\"DD.MM.YYYY\")\r\n          : item.xMarkerValue;\r\n\r\n      const data = {\r\n        axis: \"x\",\r\n        value: value,\r\n        lineStyle: {\r\n          stroke:\r\n            item.xMarkerColor != null\r\n              ? item.xMarkerColor.colorPickedHex\r\n              : \"#000000\",\r\n          strokeWidth: item.xMarkerWidth\r\n        },\r\n        textStyle: {\r\n          fill:\r\n            item.xMarkerLabelColor != null\r\n              ? item.xMarkerLabelColor.colorPickedHex\r\n              : \"#000000\"\r\n        },\r\n        legend: item.xMarkerLabel,\r\n        legendOrientation: item.xMarkerOrientation\r\n      };\r\n      return data;\r\n    }) || [];\r\n\r\n  let constantsAxises = [];\r\n  if (formattedXAxis.length > 0) {\r\n    constantsAxises.push(formattedXAxis);\r\n    constantsAxises = constantsAxises.flat();\r\n  }\r\n  if (formattedYAxis.length > 0) {\r\n    constantsAxises.push(formattedYAxis);\r\n    constantsAxises = constantsAxises.flat();\r\n  }\r\n\r\n  const sql = settings.query?.dataSource?.value;\r\n  const isMultiple = settings.isMultiple;\r\n  const isCustomColor = settings.isCustomColors;\r\n  const keyIsDate = settings.key_is_date;\r\n  const sort = settings?.sort;\r\n  const tickRotation = settings?.tickRotation;\r\n  const bottomAxis = settings?.bottomAxis;\r\n  const enableGridX = settings?.enableGridX;\r\n  const enableGridY = settings?.enableGridY;\r\n  //line settings\r\n  const xScaleType = settings?.xScaleType || \"point\";\r\n  const precision = settings?.precision || \"month\";\r\n  const curve = settings?.curve || \"line\";\r\n  const lineWidth = settings?.lineWidth;\r\n  const colorScheme = settings?.colorScheme;\r\n\r\n  const enableArea = settings?.enableArea;\r\n  const enablePoints = settings?.enablePoints;\r\n  const pointSize = settings?.pointSize;\r\n  const pointColor = settings?.pointColor;\r\n  //line marker Y\r\n  const yMarker = settings?.yMarker;\r\n  const yMarkerValue = settings?.yMarkerValue;\r\n  const yMarkerOrientation = settings?.yMarkerOrientation;\r\n  const yMarkerColor = settings?.yMarkerColor;\r\n  const yMarkerWidth = settings?.yMarkerWidth;\r\n  const yMarkerLabel = settings?.yMarkerLabel;\r\n  const yMarkerLabelColor = settings?.yMarkerLabelColor;\r\n  //line marker X\r\n  const xMarker = settings?.xMarker;\r\n  const xMarkerValue = keyIsDate\r\n    ? moment(settings?.xMarkerValueDate).toDate()\r\n    : settings?.xMarkerValue;\r\n  const xMarkerOrientation = settings?.xMarkerOrientation;\r\n  const xMarkerColor = settings?.xMarkerColor;\r\n  const xMarkerWidth = settings?.xMarkerWidth;\r\n  const xMarkerLabel = settings?.xMarkerLabel;\r\n  const xMarkerLabelColor = settings?.xMarkerLabelColor;\r\n  //data variable\r\n  let data = [];\r\n\r\n  //funciton for formattion data for all types\r\n  const formatData = (data, r) => {\r\n    return data.map((d, index) => {\r\n      const currentKey = _.get(d, r.key);\r\n      const keyFormatted = !moment(currentKey).isValid()\r\n        ? currentKey\r\n        : moment(currentKey).format(\"DD.MM.YYYY\");\r\n      const tooltip =\r\n        typeof tooltipValues !== \"undefined\"\r\n          ? tooltipValues?.map(item => {\r\n              return {\r\n                label: item?.label,\r\n                value: _.get(d, item.field),\r\n                color: item?.color\r\n              };\r\n            })\r\n          : [];\r\n      \r\n      return {\r\n        y: Number(_.get(d, r.data)),\r\n        x: keyIsDate ? keyFormatted : currentKey,\r\n        tooltip: tooltip\r\n      };\r\n    });\r\n  };\r\n  let legend = [];\r\n  const currentColors = isCustomColor\r\n    ? customColors\r\n    : _.find(Schemes, { value: settings?.colorScheme }).colors;\r\n  const colorsCount = currentColors.length;\r\n\r\n  if (isEditor()) {\r\n    data = [\r\n      {\r\n        data: [\r\n          {\r\n            x: '2020-01',\r\n            y: 60,\r\n          },\r\n          {\r\n            x: '2020-02',\r\n            y: 200,\r\n          },\r\n          {\r\n            x: '2013-03',\r\n            y: 20,\r\n          },\r\n          {\r\n            x: '2013-04',\r\n            y: 10,\r\n          },\r\n          {\r\n            x: '2013-05',\r\n            y: 50,\r\n          },\r\n        ],\r\n        id: 'Line 1'\r\n      },\r\n      {\r\n        data: [\r\n          {\r\n            x: '2020-01',\r\n            y: 50,\r\n          },\r\n          {\r\n            x: '2020-02',\r\n            y: 140,\r\n          },\r\n          {\r\n            x: '2013-03',\r\n            y: 40,\r\n          },\r\n          {\r\n            x: '2013-04',\r\n            y: 20,\r\n          },\r\n          {\r\n            x: '2013-05',\r\n            y: 60,\r\n          },\r\n        ],\r\n        id: 'Line 2'\r\n      },\r\n    ]\r\n  } else {\r\n    if (isMultiple) {\r\n      let repeater = _.cloneDeep(settings.rep, []);\r\n      data = repeater.map((r, index) => {\r\n        let innerData = getDataByPath(r.path, []);\r\n        if (innerData.length > 0) {\r\n          //Исключаем дублирование ключей, т.к. это приводит к ошибкам рендера всех диаграм\r\n          innerData = _.uniqBy(innerData, r.key);\r\n          innerData = formatData(innerData, r);\r\n        }\r\n\r\n        legend.push({\r\n          color: currentColors[index % colorsCount],\r\n          label: r.title || r.path\r\n        });\r\n\r\n        return {\r\n          id: r.title || r.path,\r\n          data: innerData\r\n        };\r\n      });\r\n    } else if (settings.datasource_path != null) {\r\n      try {\r\n        data = getDataByPath(settings.datasource_path, []);\r\n        data = _.uniqBy(data, settings.key_name);\r\n        const r = {\r\n          key: settings.key_name,\r\n          data: settings.data_name\r\n        };\r\n  \r\n        legend.push({\r\n          color: currentColors[0],\r\n          label: settings.datasource_title || settings.datasource_path\r\n        });\r\n        data = [\r\n          {\r\n            id: settings.datasource_title || settings.datasource_path,\r\n            data: formatData(data, r)\r\n          }\r\n        ];\r\n      } catch (error) {\r\n        console.log(\"====================================\");\r\n        console.error(error);\r\n        console.log(\"====================================\");\r\n        data = [\r\n          {\r\n            id: settings.datasource_title || settings.datasource_path,\r\n            data: []\r\n          }\r\n        ];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!sql && data.length === 0) {\r\n    return (\r\n      <div className={`altrp-chart ${settings.legendPosition}`}>\r\n        Идет загрузка данных...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const parseQueryParams = (qs = \"\") => {\r\n    if (!qs) return \"\";\r\n    const keyValues = qs.split(\"\\n\");\r\n    const result = keyValues.map(item => item.replace(\"|\", \"=\")).join(\"&\");\r\n    return `?${result}`;\r\n  };\r\n\r\n  const queryString = parseQueryParams(settings.query?.defaultParams);\r\n\r\n  const widget = {\r\n    source: sql + queryString,\r\n    options: {\r\n      colorScheme: settings.colorScheme,\r\n      legend: settings.legend,\r\n      animated: settings.animated,\r\n      isVertical: settings.isVertical\r\n    },\r\n    filter: {}\r\n  };\r\n\r\n  const setLegend = legend =>\r\n    dispatch(changePageState(widgetName, { legend: legend }));\r\n\r\n  useEffect(() => {\r\n    if (legend.length > 0) {\r\n      setLegend(legend);\r\n    }\r\n  }, [legend]);\r\n  console.log(\"====================================\");\r\n  console.log(data);\r\n  console.log(\"====================================\");\r\n  \r\n  return (\r\n    <DynamicLineChart\r\n      widgetID={id}\r\n      margin={margin}\r\n      useCustomTooltips={useCustomTooltips}\r\n      yScaleMax={yScaleMax}\r\n      customColorSchemeChecker={customColorSchemeChecker}\r\n      customColors={customColors}\r\n      widget={widget}\r\n      dataSource={data}\r\n      keyIsDate={keyIsDate}\r\n      xScaleType={xScaleType}\r\n      precision={precision}\r\n      curve={curve}\r\n      colorScheme={colorScheme}\r\n      enableArea={enableArea}\r\n      enablePoints={enablePoints}\r\n      lineWidth={lineWidth}\r\n      pointColor={pointColor}\r\n      pointSize={pointSize}\r\n      yMarker={yMarker}\r\n      width={`${settings.width?.size}${settings.width?.unit}`}\r\n      height={`${settings.height?.size}${settings.height?.unit}`}\r\n      yMarkerValue={yMarkerValue}\r\n      yMarkerOrientation={yMarkerOrientation}\r\n      yMarkerColor={yMarkerColor}\r\n      yMarkerWidth={yMarkerWidth}\r\n      yMarkerLabel={yMarkerLabel}\r\n      xMarker={xMarker}\r\n      xMarkerValue={xMarkerValue}\r\n      xMarkerOrientation={xMarkerOrientation}\r\n      xMarkerColor={xMarkerColor}\r\n      xMarkerWidth={xMarkerWidth}\r\n      xMarkerLabel={xMarkerLabel}\r\n      yMarkerLabelColor={yMarkerLabelColor}\r\n      xMarkerLabelColor={xMarkerLabelColor}\r\n      constantsAxises={constantsAxises}\r\n      sort={sort}\r\n      tickRotation={tickRotation}\r\n      bottomAxis={bottomAxis}\r\n      enableGridX={enableGridX}\r\n      enableGridY={enableGridY}\r\n    />\r\n  );\r\n};\r\nconst mapStateToProps = state => ({\r\n  currentDataStorage: state.currentDataStorage\r\n});\r\nexport default connect(mapStateToProps)(AltrpDiagram);","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n"],"sourceRoot":""}