{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/dashboard/services/getWidgetData.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicPointChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/EmptyWidget.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/d3/TooltipScatter.js","webpack:///./resources/modules/editor/src/js/components/altrp-diagram/AltrpPointDiagram.js"],"names":["queryString","obj","data","Object","keys","reduce","str","key","i","encodeURIComponent","join","console","log","getWidgetData","url","filter","params","JSON","parse","axios","status","regagroScheme","_","find","Schemes","value","colors","milkScheme","milkScheme2","format","widget","width","height","dataSource","xScaleType","colorScheme","nodeSize","sort","tickRotation","bottomAxis","precision","enableGridX","enableGridY","keyIsDate","customColorSchemeChecker","customColors","constantsAxises","yScaleMax","widgetID","useCustomTooltips","margin","useState","isLoading","setIsLoading","setData","getData","customStyle","useCallback","length","source","charts","newData","map","item","currentKey","keyFormatted","moment","isValid","y","Number","x","id","forEach","index","sortBy","useEffect","uniq","includes","style","scheme","yScale","max","type","markers","top","right","bottom","left","xFormat","xScale","tooltip","datum","enable","axisBottom","text","className","TooltipScatter","props","state","indexValue","color","settings","node","prevProps","prevState","isEqual","this","setState","s","padding","display","alignItems","background","marginRight","marginTop","label","fontSize","borderRadius","boxShadow","whiteSpace","PureComponent","connect","currentDataStorage","dispatch","useDispatch","widgetName","widget_name","isCustomColor","customScheme","get","axisY","tooltipValues","repTooltips","field","colorPickedHex","customTooltip","formattedYAxis","valueFromPath","getDataByPath","yMarkerValue","axis","lineStyle","stroke","yMarkerColor","strokeWidth","yMarkerWidth","textStyle","fill","yMarkerLabelColor","legend","yMarkerLabel","legendOrientation","yMarkerOrientation","axisX","formattedXAxis","xMarkerValue","xMarkerIsDate","xMarkerColor","xMarkerWidth","xMarkerLabelColor","xMarkerLabel","xMarkerOrientation","push","flat","sql","query","isMultiple","isCustomColors","key_is_date","pointSize","formatData","r","d","currentColors","colorsCount","isEditor","cloneDeep","rep","innerData","path","title","datasource_path","key_name","data_name","datasource_title","error","legendPosition","qs","keyValues","split","result","replace","parseQueryParams","defaultParams","options","animated","isVertical","changePageState","setLegend","size","unit"],"mappings":"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","file":"AltrpDiagram.c119f334fc9838386507.bundle.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const queryString = (obj = {}) => {\r\n  let data = Object.keys(obj).reduce((str, key, i) => {\r\n    let delimiter, val;\r\n    delimiter = i === 0 ? \"?\" : \"&\";\r\n    key = encodeURIComponent(key);\r\n    val = encodeURIComponent(obj[key]);\r\n    return [str, delimiter, key, \"=\", val].join(\"\");\r\n  }, \"\");\r\n  console.log(\"RESULT ==>\", data);\r\n  return data;\r\n};\r\n\r\nexport const getWidgetData = async (url, filter) => {\r\n  let params = \"\";\r\n  if (typeof filter === \"object\") {\r\n    params = queryString(filter);\r\n  } else if (typeof filter !== \"undefined\") {\r\n    params = queryString(JSON.parse(filter));\r\n  }\r\n  try {\r\n    return await axios(url + params, {\r\n      // headers: [{ key: \"Cache-Control\", value: \"no-store\" }]\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { status: 500 };\r\n  }\r\n};\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nimport { ResponsiveScatterPlot } from \"@nivo/scatterplot\";\r\n\r\nimport Schemes from \"../../../../../editor/src/js/components/altrp-dashboards/settings/NivoColorSchemes\";\r\nconst regagroScheme = _.find(Schemes, { value: \"regagro\" }).colors;\r\nconst milkScheme = _.find(Schemes, { value: \"milk\" }).colors;\r\nconst milkScheme2 = _.find(Schemes, { value: \"milk2\" }).colors;\r\n\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\nimport { customStyle } from \"../widgetTypes\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport Tooltip from \"./d3/TooltipScatter\";\r\n\r\nimport moment from \"moment\";\r\nconst format = \"%d.%m.%Y\";\r\n\r\nconst PointChart = ({\r\n  widget,\r\n  width = `300px`,\r\n  height = `450px`,\r\n  dataSource = [],\r\n  xScaleType = \"point\",\r\n  colorScheme = \"red_grey\",\r\n  nodeSize = 6,\r\n  sort = \"\",\r\n  tickRotation = 0,\r\n  bottomAxis = true,\r\n  precision,\r\n  enableGridX = true,\r\n  enableGridY = true,\r\n  keyIsDate = false,\r\n  customColorSchemeChecker = false,\r\n  customColors = [],\r\n  constantsAxises = [],\r\n  yScaleMax,\r\n  widgetID,\r\n  useCustomTooltips,\r\n  margin\r\n}) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const size = 4;\r\n  const fill = customStyle[0];\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    if (dataSource.length == 0) {\r\n      const charts = await getWidgetData(widget.source, widget.filter);\r\n      if (charts.status === 200 && typeof charts.data !== \"string\") {\r\n        const newData = charts.data.data.map(item => {\r\n          const currentKey = item.key;\r\n          const keyFormatted = !moment(currentKey).isValid()\r\n            ? currentKey\r\n            : moment(currentKey).format(\"DD.MM.YYYY\");\r\n          return {\r\n            y: Number(item.data),\r\n            x: keyIsDate ? keyFormatted : currentKey\r\n          };\r\n        });\r\n        let data = [\r\n          {\r\n            id: \"\",\r\n            data: newData\r\n          }\r\n        ];\r\n        setData(data);\r\n        setIsLoading(false);\r\n      }\r\n    } else {\r\n      if (\r\n        sort !== null &&\r\n        sort !== \"undefined\" &&\r\n        typeof dataSource !== \"undefined\"\r\n      ) {\r\n        switch (sort) {\r\n          case \"value\":\r\n            dataSource.forEach((item, index) => {\r\n              if (item.data.length > 0) {\r\n                dataSource[index].data = _.sortBy(item.data, [\"y\"]);\r\n              }\r\n            });\r\n            break;\r\n          case \"key\":\r\n            data.forEach((item, index) => {\r\n              if (item.data.length > 0) {\r\n                dataSource[index].data = _.sortBy(item.data, [\"x\"]);\r\n              }\r\n            });\r\n            break;\r\n\r\n          default:\r\n            // data = data;\r\n            break;\r\n        }\r\n      }\r\n      setData(dataSource || []);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  let matches = [];\r\n  let isNotEmpty = false;\r\n\r\n  matches = _.uniq(\r\n    data.map(item => {\r\n      return item.data.length > 0;\r\n    })\r\n  );\r\n\r\n  isNotEmpty = matches.includes(true);\r\n  if (!isNotEmpty) return <EmptyWidget />;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          width: width,\r\n          height: height\r\n        }}\r\n      >\r\n        <ResponsiveScatterPlot\r\n          data={data}\r\n          colors={\r\n            customColorSchemeChecker && customColors.length > 0\r\n              ? customColors\r\n              : colorScheme === \"regagro\"\r\n              ? regagroScheme\r\n              : colorScheme === \"milk\"\r\n              ? milkScheme\r\n              : colorScheme === \"milk2\"\r\n              ? milkScheme2\r\n              : { scheme: colorScheme }\r\n          }\r\n          yScale={\r\n            yScaleMax\r\n              ? {\r\n                  max: yScaleMax,\r\n                  type: \"linear\"\r\n                }\r\n              : {\r\n                  type: \"linear\"\r\n                }\r\n          }\r\n          markers={constantsAxises}\r\n          margin={{\r\n            top: margin?.top || 30,\r\n            right: margin?.right || 30,\r\n            bottom: margin?.bottom || 30,\r\n            left: margin?.left || 30\r\n          }}\r\n          xFormat={xScaleType === \"time\" && \"time:%d.%m.%Y\"}\r\n          nodeSize={nodeSize}\r\n          xScale={\r\n            xScaleType === \"time\"\r\n              ? { type: xScaleType, format: format, precision: precision }\r\n              : { type: xScaleType }\r\n          }\r\n          tooltip={datum => (\r\n            <Tooltip\r\n              datum={datum}\r\n              enable={useCustomTooltips}\r\n              widgetID={widgetID}\r\n            />\r\n          )}\r\n          enableGridX={enableGridX}\r\n          enableGridY={enableGridY}\r\n          axisBottom={\r\n            bottomAxis &&\r\n            (xScaleType === \"time\"\r\n              ? {\r\n                  format: format,\r\n                  tickRotation: tickRotation\r\n                }\r\n              : {\r\n                  tickRotation: tickRotation\r\n                })\r\n          }\r\n          colors={\r\n            customColorSchemeChecker && customColors.length > 0\r\n              ? customColors\r\n              : colorScheme === \"regagro\"\r\n              ? regagroScheme\r\n              : colorScheme === \"milk\"\r\n              ? milkScheme\r\n              : colorScheme === \"milk2\"\r\n              ? milkScheme2\r\n              : { scheme: colorScheme }\r\n          }\r\n          // legends={[\r\n          //   {\r\n          //     anchor: \"bottom-right\",\r\n          //     direction: \"column\",\r\n          //     justify: false,\r\n          //     translateX: 130,\r\n          //     translateY: 0,\r\n          //     itemsSpacing: 0,\r\n          //     itemDirection: \"left-to-right\",\r\n          //     itemWidth: 120,\r\n          //     itemHeight: 20,\r\n          //     itemOpacity: 0.75,\r\n          //     symbolSize: 12,\r\n          //     symbolShape: \"circle\",\r\n          //     symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n          //     effects: [\r\n          //       {\r\n          //         on: \"hover\",\r\n          //         style: {\r\n          //           itemBackground: \"rgba(0, 0, 0, .03)\",\r\n          //           itemOpacity: 1\r\n          //         }\r\n          //       }\r\n          //     ]\r\n          //   }\r\n          // ]}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default PointChart;\r\n","import React from \"react\";\r\n\r\nconst EmptyWidget = ({ text }) => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-container__text\">{text ? text : \"Данные обрабатываются\"}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmptyWidget;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass TooltipScatter extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      indexValue: props.datum?.indexValue,\r\n      value: props.datum?.value,\r\n      color: props.datum?.color,\r\n      enable: props?.enable,\r\n      settings: props?.settings,\r\n      data: props.datum?.node?.data\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (!_.isEqual(prevProps.enable, this.props.enable)) {\r\n      this.setState(s => ({\r\n        ...s,\r\n        enable: this.props?.enable\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.enable) {\r\n      return (\r\n        <div\r\n          className={`${this.props.widgetID} altrp-dashboard__tooltip--font altrp-dashboard__tooltip--label-background altrp-dashboard__tooltip--width altrp-dashboard__tooltip--label-background-shadow altrp-dashboard__tooltip--border-type altrp-dashboard__tooltip--border-width altrp-dashboard__tooltip--border-color col-12`}\r\n          style={{ padding: \"5px 9px\" }}\r\n        >\r\n          <div>\r\n            <div\r\n              style={{\r\n                color: 'white',\r\n                display: 'flex'\r\n              }}\r\n            >\r\n              <div style={{\r\n                height: '100%',\r\n                display: 'flex',\r\n                alignItems: 'center'\r\n              }}>\r\n                <div style={{\r\n                  width: '15px',\r\n                  height: '15px',\r\n                  background: this.props.datum.datum.color || \"#000000\",\r\n                  marginRight: '3px',\r\n                  marginTop: '1px'\r\n                }} />\r\n              </div>\r\n              {this.props.datum?.datum?.label}:\r\n              <strong>{this.props.datum?.datum?.value}</strong>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <>\r\n        <div\r\n          style={{\r\n            background: \"white\",\r\n            color: \"inherit\",\r\n            fontSize: \"{{SIZE}}px\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"rgba(0, 0, 0, 0.25) 0px 1px 2px\",\r\n            padding: \"5px 9px\"\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              whiteSpace: \"pre\",\r\n              display: \"flex\",\r\n              alignItems: \"center\"\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                display: \"block\",\r\n                width: \"12px\",\r\n                height: \"12px\",\r\n                background: this.props.datum.datum.color,\r\n                marginRight: \"7px\"\r\n              }}\r\n            ></span>\r\n            <span>\r\n              {this.props.datum.datum.label}:{\" \"}\r\n              <strong>{this.props.datum.datum.value}</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TooltipScatter;\r\n","import React, { useEffect } from \"react\";\r\nimport { changePageState } from \"../../../../../front-app/src/js/store/altrp-page-state-storage/actions\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\n\r\nimport DynamicPointChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicPointChart\";\r\n\r\nimport Schemes from \"../../../../../editor/src/js/components/altrp-dashboards/settings/NivoColorSchemes\";\r\n\r\nimport { getDataByPath, isEditor } from \"../../../../../front-app/src/js/helpers\";\r\nimport moment from \"moment\";\r\n\r\nconst AltrpDiagram = props => {\r\n  const { settings, id } = props;\r\n\r\n  const dispatch = useDispatch();\r\n  const margin = settings?.margin;\r\n  const widgetName = settings?.widget_name || id;\r\n  const customColorSchemeChecker = settings?.isCustomColor;\r\n\r\n  const customColors = settings?.customScheme?.map(item =>\r\n    _.get(item, \"color.colorPickedHex\")\r\n  );\r\n  const yScaleMax = settings?.yScaleMax;\r\n\r\n  const axisY = settings?.axisY;\r\n  const tooltipValues = settings?.repTooltips?.map(item => ({\r\n    label: _.get(item, \"label\"),\r\n    field: _.get(item, \"value\"),\r\n    color: _.get(item, \"color\")?.colorPickedHex\r\n  }));\r\n  const useCustomTooltips = settings?.customTooltip;\r\n\r\n  const formattedYAxis = axisY?.map(item => {\r\n    const valueFromPath = getDataByPath(item.yMarkerValue);\r\n    const value =\r\n      valueFromPath !== null\r\n        ? Number(valueFromPath)\r\n        : Number(item.yMarkerValue);\r\n    const data = {\r\n      axis: \"y\",\r\n      value: value,\r\n      lineStyle: {\r\n        stroke:\r\n          item.yMarkerColor != null\r\n            ? item.yMarkerColor.colorPickedHex\r\n            : \"#000000\",\r\n        strokeWidth: item.yMarkerWidth\r\n      },\r\n      textStyle: {\r\n        fill:\r\n          item.yMarkerLabelColor != null\r\n            ? item.yMarkerLabelColor.colorPickedHex\r\n            : \"#000000\"\r\n      },\r\n      legend: item.yMarkerLabel,\r\n      legendOrientation: item.yMarkerOrientation\r\n    };\r\n    return data;\r\n  }) || [];\r\n\r\n  const axisX = settings?.axisX;\r\n  const formattedXAxis =\r\n    axisX?.map(item => {\r\n      const valueFromPath = getDataByPath(item.xMarkerValue);\r\n\r\n      const value =\r\n        valueFromPath !== null\r\n          ? valueFromPath\r\n          : item.xMarkerIsDate\r\n          ? moment(item.xMarkerValue).format(\"DD.MM.YYYY\")\r\n          : item.xMarkerValue;\r\n\r\n      const data = {\r\n        axis: \"x\",\r\n        value: value,\r\n        lineStyle: {\r\n          stroke:\r\n            item.xMarkerColor != null\r\n              ? item.xMarkerColor.colorPickedHex\r\n              : \"#000000\",\r\n          strokeWidth: item.xMarkerWidth\r\n        },\r\n        textStyle: {\r\n          fill:\r\n            item.xMarkerLabelColor != null\r\n              ? item.xMarkerLabelColor.colorPickedHex\r\n              : \"#000000\"\r\n        },\r\n        legend: item.xMarkerLabel,\r\n        legendOrientation: item.xMarkerOrientation\r\n      };\r\n      return data;\r\n    }) || [];\r\n\r\n  let constantsAxises = [];\r\n  if (formattedXAxis.length > 0) {\r\n    constantsAxises.push(formattedXAxis);\r\n    constantsAxises = constantsAxises.flat();\r\n  }\r\n  if (formattedYAxis.length > 0) {\r\n    constantsAxises.push(formattedYAxis);\r\n    constantsAxises = constantsAxises.flat();\r\n  }\r\n\r\n  const sql = settings.query?.dataSource?.value;\r\n  const isMultiple = settings.isMultiple;\r\n  const isCustomColor = settings.isCustomColors;\r\n  const keyIsDate = settings.key_is_date;\r\n  const sort = settings?.sort;\r\n  const tickRotation = settings?.tickRotation;\r\n  const bottomAxis = settings?.bottomAxis;\r\n  const enableGridX = settings?.enableGridX;\r\n  const enableGridY = settings?.enableGridY;\r\n  //line settings\r\n  const xScaleType = settings?.xScaleType || \"point\";\r\n  const precision = settings?.precision || \"month\";\r\n  const colorScheme = settings?.colorScheme;\r\n\r\n  const pointSize = settings?.pointSize;\r\n  //data variable\r\n  let data = [];\r\n\r\n  //funciton for formattion data for all types\r\n  const formatData = (data, r) => {\r\n    return data.map((d, index) => {\r\n      const currentKey = _.get(d, r.key);\r\n      const keyFormatted = !moment(currentKey).isValid()\r\n        ? currentKey\r\n        : moment(currentKey).format(\"DD.MM.YYYY\");\r\n      const tooltip =\r\n        typeof tooltipValues !== \"undefined\"\r\n          ? tooltipValues?.map(item => {\r\n              return {\r\n                label: item?.label,\r\n                value: _.get(d, item.field),\r\n                color: item?.color\r\n              };\r\n            })\r\n          : [];\r\n        \r\n      return {\r\n        y: Number(_.get(d, r.data)),\r\n        x: keyIsDate ? keyFormatted : currentKey,\r\n        tooltip: tooltip\r\n      };\r\n    });\r\n  };\r\n  let legend = [];\r\n  const currentColors = isCustomColor\r\n    ? customColors\r\n    : _.find(Schemes, { value: settings?.colorScheme }).colors;\r\n  const colorsCount = currentColors.length;\r\n\r\n  if (isEditor()) {\r\n    data = [\r\n      {\r\n        id: 'Demo data',\r\n        data: [\r\n          {\r\n            x: '2020-01',\r\n            y: 50,\r\n          },\r\n          {\r\n            x: '2020-02',\r\n            y: 140,\r\n          },\r\n          {\r\n            x: '2013-03',\r\n            y: 40,\r\n          },\r\n          {\r\n            x: '2013-04',\r\n            y: 20,\r\n          },\r\n          {\r\n            x: '2013-05',\r\n            y: 60,\r\n          },\r\n          {\r\n            x: '2013-06',\r\n            y: 30,\r\n          },\r\n        ]\r\n      },\r\n      {\r\n        id: 'Demo data 2',\r\n        data: [\r\n          {\r\n            x: '2020-01',\r\n            y: 60,\r\n          },\r\n          {\r\n            x: '2020-02',\r\n            y: 200,\r\n          },\r\n          {\r\n            x: '2013-03',\r\n            y: 20,\r\n          },\r\n          {\r\n            x: '2013-04',\r\n            y: 10,\r\n          },\r\n          {\r\n            x: '2013-05',\r\n            y: 50,\r\n          },\r\n          {\r\n            x: '2013-06',\r\n            y: 31,\r\n          },\r\n        ]\r\n      },\r\n    ]\r\n  } else {\r\n    if (isMultiple) {\r\n      let repeater = _.cloneDeep(settings.rep, []);\r\n      data = repeater.map((r, index) => {\r\n        let innerData = getDataByPath(r.path, []);\r\n        if (innerData.length > 0) {\r\n          innerData = formatData(innerData, r);\r\n        }\r\n        \r\n        legend.push({\r\n          color: currentColors[index % colorsCount],\r\n          label: r.title || r.path\r\n        });\r\n        \r\n        return {\r\n          id: r.title || r.path,\r\n          data: innerData\r\n        };\r\n      });\r\n    } else if (settings.datasource_path != null) {\r\n      try {\r\n        data = getDataByPath(settings.datasource_path, []);\r\n        const r = {\r\n          key: settings.key_name,\r\n          data: settings.data_name\r\n        };\r\n  \r\n        legend.push({\r\n          color: currentColors[0],\r\n          label: settings.datasource_title || settings.datasource_path\r\n        });\r\n\r\n        data = [\r\n          {\r\n            id: settings.datasource_title || settings.datasource_path,\r\n            data: formatData(data, r)\r\n          }\r\n        ];\r\n      } catch (error) {\r\n        console.log(\"====================================\");\r\n        console.error(error);\r\n        console.log(\"====================================\");\r\n        data = [\r\n          {\r\n            id: settings.datasource_title || settings.datasource_path,\r\n            data: []\r\n          }\r\n        ];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!sql && data.length === 0) {\r\n    return (\r\n      <div className={`altrp-chart ${settings.legendPosition}`}>\r\n        Идет загрузка данных...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const parseQueryParams = (qs = \"\") => {\r\n    if (!qs) return \"\";\r\n    const keyValues = qs.split(\"\\n\");\r\n    const result = keyValues.map(item => item.replace(\"|\", \"=\")).join(\"&\");\r\n    return `?${result}`;\r\n  };\r\n\r\n  const queryString = parseQueryParams(settings.query?.defaultParams);\r\n\r\n  const widget = {\r\n    source: sql + queryString,\r\n    options: {\r\n      colorScheme: settings.colorScheme,\r\n      legend: settings.legend,\r\n      animated: settings.animated,\r\n      isVertical: settings.isVertical\r\n    },\r\n    filter: {}\r\n  };\r\n\r\n  const setLegend = legend =>\r\n    dispatch(changePageState(widgetName, { legend: legend }));\r\n\r\n  useEffect(() => {\r\n    if (legend.length > 0) {\r\n      setLegend(legend);\r\n    }\r\n  }, [legend]);\r\n  console.log(\"====================================\");\r\n  console.log(data);\r\n  console.log(\"====================================\");\r\n  \r\n  \r\n  return (\r\n    <DynamicPointChart\r\n      widgetID={id}\r\n      margin={margin}\r\n      useCustomTooltips={useCustomTooltips}\r\n      yScaleMax={yScaleMax}\r\n      customColorSchemeChecker={customColorSchemeChecker}\r\n      customColors={customColors}\r\n      dataSource={data}\r\n      constantsAxises={constantsAxises}\r\n      colorScheme={colorScheme}\r\n      width={`${settings.width?.size}${settings.width?.unit}`}\r\n      height={`${settings.height?.size}${settings.height?.unit}`}\r\n      widget={widget}\r\n      nodeSize={pointSize}\r\n      xScaleType={xScaleType}\r\n      precision={precision}\r\n      sort={sort}\r\n      tickRotation={tickRotation}\r\n      bottomAxis={bottomAxis}\r\n      enableGridX={enableGridX}\r\n      enableGridY={enableGridY}\r\n    />\r\n  );\r\n};\r\nconst mapStateToProps = state => ({\r\n  currentDataStorage: state.currentDataStorage\r\n});\r\nexport default connect(mapStateToProps)(AltrpDiagram);\r\n"],"sourceRoot":""}