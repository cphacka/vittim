{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/dashboard/services/getWidgetData.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/EmptyWidget.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/Spinner.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/d3/TooltipBar.js","webpack:///../src/altrp-diagrams/layout/BarDiagram.tsx","webpack:///./resources/modules/editor/src/js/components/altrp-diagram/AltrpBarDiagram.js"],"names":["queryString","obj","data","Object","keys","reduce","str","key","i","encodeURIComponent","join","console","log","getWidgetData","url","filter","params","JSON","parse","axios","status","text","className","style","width","height","role","TooltipBar","props","state","indexValue","datum","value","color","enable","settings","prevProps","prevState","_","isEqual","this","setState","s","widgetID","padding","display","alignItems","background","marginRight","marginTop","label","fontSize","borderRadius","boxShadow","whiteSpace","PureComponent","TooltipBarComponent","connect","currentDataStorage","id","dispatch","useDispatch","margin","widgetName","widget_name","customColorSchemeChecker","isCustomColor","customColors","customScheme","map","item","get","yScaleMax","axisY","tooltipValues","repTooltips","field","colorPickedHex","useCustomTooltips","customTooltip","formattedYAxis","valueFromPath","getDataByPath","yMarkerValue","axis","Number","lineStyle","stroke","yMarkerColor","strokeWidth","yMarkerWidth","textStyle","fill","yMarkerLabelColor","legend","yMarkerLabel","legendOrientation","yMarkerOrientation","axisX","formattedXAxis","xMarkerValue","xMarkerIsDate","moment","format","xMarkerColor","xMarkerWidth","xMarkerLabelColor","xMarkerLabel","xMarkerOrientation","constantsAxises","length","push","flat","sql","query","dataSource","isMultiple","isCustomColors","keyIsDate","key_is_date","sort","tickRotation","bottomAxis","enableGridX","enableGridY","colorScheme","layout","groupMode","reverse","borderWidth","enableLabel","formatData","r","d","index","currentKey","keyFormatted","isValid","tooltip","currentColors","find","Schemes","colors","isEditor","title","cloneDeep","rep","innerData","path","concat","datasource_path","key_name","data_name","error","datasource_title","legendPosition","widget","source","qs","keyValues","split","result","replace","parseQueryParams","defaultParams","options","animated","isVertical","useEffect","changePageState","setLegend","size","unit"],"mappings":"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","file":"AltrpBarDiagram.4fce0e38c1b3ad33ee66.bundle.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const queryString = (obj = {}) => {\r\n  let data = Object.keys(obj).reduce((str, key, i) => {\r\n    let delimiter, val;\r\n    delimiter = i === 0 ? \"?\" : \"&\";\r\n    key = encodeURIComponent(key);\r\n    val = encodeURIComponent(obj[key]);\r\n    return [str, delimiter, key, \"=\", val].join(\"\");\r\n  }, \"\");\r\n  console.log(\"RESULT ==>\", data);\r\n  return data;\r\n};\r\n\r\nexport const getWidgetData = async (url, filter) => {\r\n  let params = \"\";\r\n  if (typeof filter === \"object\") {\r\n    params = queryString(filter);\r\n  } else if (typeof filter !== \"undefined\") {\r\n    params = queryString(JSON.parse(filter));\r\n  }\r\n  try {\r\n    return await axios(url + params, {\r\n      // headers: [{ key: \"Cache-Control\", value: \"no-store\" }]\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { status: 500 };\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst EmptyWidget = ({ text }) => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-container__text\">{text ? text : \"Данные обрабатываются\"}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmptyWidget;\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div\r\n        className=\"spinner-border\"\r\n        style={{ width: \"3rem\", height: \"3rem\" }}\r\n        role=\"status\"\r\n      >\r\n        <span className=\"sr-only\">Загрузка...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass TooltipBar extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      indexValue: props.datum?.indexValue,\r\n      value: props.datum?.value,\r\n      color: props.datum?.color,\r\n      enable: props?.enable,\r\n      settings: props?.settings\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (!_.isEqual(prevProps.enable, this.props.enable)) {\r\n      this.setState(s => ({\r\n        ...s,\r\n        enable: this.props?.enable\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.enable) {\r\n      return (\r\n        <div\r\n          className={`${this.props.widgetID} altrp-dashboard__tooltip--font altrp-dashboard__tooltip--label-background altrp-dashboard__tooltip--width altrp-dashboard__tooltip--label-background-shadow altrp-dashboard__tooltip--border-type altrp-dashboard__tooltip--border-width altrp-dashboard__tooltip--border-color col-12`}\r\n          style={{ padding: \"5px 9px\" }}\r\n        >\r\n          <div>\r\n            <div\r\n              style={{\r\n                color: 'white',\r\n                display: 'flex'\r\n              }}\r\n            >\r\n              <div style={{\r\n                height: '100%',\r\n                display: 'flex',\r\n                alignItems: 'center'\r\n              }}>\r\n                <div style={{\r\n                  width: '15px',\r\n                  height: '15px',\r\n                  background: this.props.datum.datum.color || \"#000000\",\r\n                  marginRight: '3px',\r\n                  marginTop: '1px'\r\n                }} />\r\n              </div>\r\n              {this.props.datum?.datum?.label}:\r\n              <strong>{this.props.datum?.datum?.value}</strong>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <>\r\n        <div\r\n          style={{\r\n            background: \"white\",\r\n            color: \"inherit\",\r\n            fontSize: \"{{SIZE}}px\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"rgba(0, 0, 0, 0.25) 0px 1px 2px\",\r\n            padding: \"5px 9px\"\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              whiteSpace: \"pre\",\r\n              display: \"flex\",\r\n              alignItems: \"center\"\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                display: \"block\",\r\n                width: \"12px\",\r\n                height: \"12px\",\r\n                background: this.props.datum.datum.color,\r\n                marginRight: \"7px\"\r\n              }}\r\n            ></span>\r\n            <span>\r\n              {this.props.datum.datum.label}:{\" \"}\r\n              <strong>{this.props.datum.datum.value}</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TooltipBar;\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nimport Spinner from \"../../../../../../admin/src/components/dashboard/widgets/Spinner\";\r\nimport EmptyWidget from \"../../../../../../admin/src/components/dashboard/widgets/EmptyWidget\";\r\nimport Schemes from \"../../../../../../editor/src/js/components/altrp-dashboards/settings/NivoColorSchemes\";\r\nconst regagroScheme = _.find(Schemes, { value: \"regagro\" }).colors;\r\nconst milkScheme = _.find(Schemes, { value: \"milk\" }).colors;\r\nconst milkScheme2 = _.find(Schemes, { value: \"milk2\" }).colors;\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport { getWidgetData } from \"../../../../../../admin/src/components/dashboard/services/getWidgetData\";\r\nimport TooltipBar from \"../../../../../../admin/src/components/dashboard/widgets/d3/TooltipBar\";\r\nconst TooltipBarComponent = TooltipBar;\r\nconst BarDiagram = ({ widget, width = 300, height = 450, margin, dataSource = [], groupMode = \"stacked\", layout = \"vertical\", colorScheme = \"regagro\", reverse = false, enableLabel = false, padding = 0.1, innerPadding = 0, borderRadius = 0, borderWidth = 0, sort = \"\", tickRotation = 0, bottomAxis = true, enableGridX = true, enableGridY = true, customColorSchemeChecker = false, customColors = [], yScaleMax, widgetID, useCustomTooltips }) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    const getData = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\r\n        setIsLoading(true);\r\n        if (dataSource.length == 0) {\r\n            const charts = yield getWidgetData(widget.source, widget.filter);\r\n            if (charts.status === 200) {\r\n                let data = charts.data.data.map((item, index) => {\r\n                    return {\r\n                        [item.key]: Number(item.data),\r\n                        key: item.key,\r\n                        value: Number(item.data)\r\n                    };\r\n                });\r\n                setData(data || []);\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n        else {\r\n            if (sort !== null &&\r\n                typeof sort !== \"undefined\" &&\r\n                typeof dataSource !== \"undefined\") {\r\n                switch (sort) {\r\n                    case \"value\":\r\n                        dataSource = _.sortBy(dataSource, [\"value\"]);\r\n                        break;\r\n                    case \"key\":\r\n                        dataSource = _.sortBy(dataSource, [\"key\"]);\r\n                        break;\r\n                    default:\r\n                        dataSource = dataSource;\r\n                        break;\r\n                }\r\n            }\r\n            setData(dataSource || []);\r\n            setIsLoading(false);\r\n        }\r\n    }), [widget]);\r\n    useEffect(() => {\r\n        getData();\r\n    }, [data]);\r\n    if (isLoading)\r\n        return React.createElement(Spinner, null);\r\n    if (data.length === 0)\r\n        return React.createElement(EmptyWidget, null);\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(\"div\", { style: { height: `${height}`, width: `${width}` } },\r\n            React.createElement(ResponsiveBar, { data: data, margin: {\r\n                    top: (margin === null || margin === void 0 ? void 0 : margin.top) || 30,\r\n                    right: (margin === null || margin === void 0 ? void 0 : margin.right) || 30,\r\n                    bottom: (margin === null || margin === void 0 ? void 0 : margin.bottom) || 30,\r\n                    left: (margin === null || margin === void 0 ? void 0 : margin.left) || 30\r\n                }, indexBy: \"key\", colors: customColorSchemeChecker && customColors.length > 0\r\n                    ? customColors\r\n                    : colorScheme === \"regagro\"\r\n                        ? regagroScheme\r\n                        : colorScheme === \"milk\"\r\n                            ? milkScheme\r\n                            : colorScheme === \"milk2\"\r\n                                ? milkScheme2\r\n                                : { scheme: colorScheme }, layout: layout, tooltip: datum => (React.createElement(TooltipBarComponent, { enable: useCustomTooltips, datum: datum, widgetID: widgetID })), enableGridX: enableGridX, enableGridY: enableGridY, enableLabel: enableLabel, reverse: reverse, groupMode: groupMode, padding: padding, innerPadding: innerPadding, borderRadius: borderRadius, borderWidth: borderWidth, axisBottom: {\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: tickRotation,\r\n                    legendOffset: 32\r\n                } }))));\r\n};\r\nexport default BarDiagram;\r\n//# sourceMappingURL=BarDiagram.js.map\r\n","import React, { useEffect } from \"react\";\r\nimport { changePageState } from \"../../../../../front-app/src/js/store/altrp-page-state-storage/actions\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\n\r\nimport BarDiagram from \"../../../../../front-app/src/ts/build/altrp-diagrams/layout/BarDiagram\";\r\n\r\nimport Schemes from \"../../../../../editor/src/js/components/altrp-dashboards/settings/NivoColorSchemes\";\r\n\r\nimport { getDataByPath, isEditor } from \"../../../../../front-app/src/js/helpers\";\r\nimport moment from \"moment\";\r\n\r\nconst AltrpDiagram = props => {\r\n  const { settings, id } = props;\r\n\r\n  const dispatch = useDispatch();\r\n  const margin = settings?.margin;\r\n  const widgetName = settings?.widget_name || id;\r\n  const customColorSchemeChecker = settings?.isCustomColor;\r\n\r\n  const customColors = settings?.customScheme?.map(item =>\r\n    _.get(item, \"color.colorPickedHex\")\r\n  );\r\n  const yScaleMax = settings?.yScaleMax;\r\n\r\n  const axisY = settings?.axisY;\r\n  const tooltipValues = settings?.repTooltips?.map(item => ({\r\n    label: _.get(item, \"label\"),\r\n    field: _.get(item, \"value\"),\r\n    color: _.get(item, \"color\")?.colorPickedHex\r\n  }));\r\n  const useCustomTooltips = settings?.customTooltip;\r\n\r\n  const formattedYAxis =\r\n    axisY?.map(item => {\r\n      const valueFromPath = getDataByPath(item.yMarkerValue);\r\n      const value =\r\n        valueFromPath !== null\r\n          ? Number(valueFromPath)\r\n          : Number(item.yMarkerValue);\r\n      const data = {\r\n        axis: \"y\",\r\n        value: value,\r\n        lineStyle: {\r\n          stroke:\r\n            item.yMarkerColor != null\r\n              ? item.yMarkerColor.colorPickedHex\r\n              : \"#000000\",\r\n          strokeWidth: item.yMarkerWidth\r\n        },\r\n        textStyle: {\r\n          fill:\r\n            item.yMarkerLabelColor != null\r\n              ? item.yMarkerLabelColor.colorPickedHex\r\n              : \"#000000\"\r\n        },\r\n        legend: item.yMarkerLabel,\r\n        legendOrientation: item.yMarkerOrientation\r\n      };\r\n      return data;\r\n    }) || [];\r\n\r\n  const axisX = settings?.axisX;\r\n  const formattedXAxis =\r\n    axisX?.map(item => {\r\n      const valueFromPath = getDataByPath(item.xMarkerValue);\r\n\r\n      const value =\r\n        valueFromPath !== null\r\n          ? valueFromPath\r\n          : item.xMarkerIsDate\r\n          ? moment(item.xMarkerValue).format(\"DD.MM.YYYY\")\r\n          : item.xMarkerValue;\r\n\r\n      const data = {\r\n        axis: \"x\",\r\n        value: value,\r\n        lineStyle: {\r\n          stroke:\r\n            item.xMarkerColor != null\r\n              ? item.xMarkerColor.colorPickedHex\r\n              : \"#000000\",\r\n          strokeWidth: item.xMarkerWidth\r\n        },\r\n        textStyle: {\r\n          fill:\r\n            item.xMarkerLabelColor != null\r\n              ? item.xMarkerLabelColor.colorPickedHex\r\n              : \"#000000\"\r\n        },\r\n        legend: item.xMarkerLabel,\r\n        legendOrientation: item.xMarkerOrientation\r\n      };\r\n      return data;\r\n    }) || [];\r\n\r\n  let constantsAxises = [];\r\n  if (formattedXAxis.length > 0) {\r\n    constantsAxises.push(formattedXAxis);\r\n    constantsAxises = constantsAxises.flat();\r\n  }\r\n  if (formattedYAxis.length > 0) {\r\n    constantsAxises.push(formattedYAxis);\r\n    constantsAxises = constantsAxises.flat();\r\n  }\r\n\r\n  const sql = settings.query?.dataSource?.value;\r\n  const isMultiple = settings.isMultiple;\r\n  const isCustomColor = settings.isCustomColors;\r\n  const keyIsDate = settings.key_is_date;\r\n  const sort = settings?.sort;\r\n  const tickRotation = settings?.tickRotation;\r\n  const bottomAxis = settings?.bottomAxis;\r\n  const enableGridX = settings?.enableGridX;\r\n  const enableGridY = settings?.enableGridY;\r\n\r\n  const colorScheme = settings?.colorScheme;\r\n\r\n  const layout = settings?.layout;\r\n  const groupMode = settings?.groupMode;\r\n  const reverse = settings?.reverse;\r\n  const borderRadius = settings?.borderRadius;\r\n  const borderWidth = settings?.borderWidth;\r\n  const enableLabel = settings?.enableLabel;\r\n  const padding = settings?.padding;\r\n  //data variable\r\n  let data = [];\r\n\r\n  //funciton for formattion data for all types\r\n  const formatData = (data, r) => {\r\n    return data.map((d, index) => {\r\n      const currentKey = _.get(d, r.key);\r\n      const keyFormatted = !moment(currentKey).isValid()\r\n        ? currentKey\r\n        : moment(currentKey).format(\"DD.MM.YYYY\");\r\n      const tooltip =\r\n        typeof tooltipValues !== \"undefined\"\r\n          ? tooltipValues?.map(item => {\r\n              return {\r\n                label: item?.label,\r\n                value: _.get(d, item.field),\r\n                color: item?.color\r\n              };\r\n            })\r\n          : [];\r\n      \r\n        let key = keyIsDate ? keyFormatted : currentKey;\r\n        return {\r\n          [key]: Number(_.get(d, r.data)),\r\n          key: key,\r\n          value: Number(_.get(d, r.data)),\r\n          tooltip: tooltip\r\n        };\r\n    });\r\n  };\r\n  let legend = [];\r\n  const currentColors = isCustomColor\r\n    ? customColors\r\n    : _.find(Schemes, { value: settings?.colorScheme }).colors;\r\n\r\n  if (isEditor()) {\r\n    data = [\r\n      {\r\n        key: 'title',\r\n        value: 60,\r\n        title: 60,\r\n        tooltip: []\r\n      },\r\n      {\r\n        key: 'title1',\r\n        value: 40,\r\n        title: 40,\r\n        tooltip: []\r\n      },\r\n    ]\r\n  } else {\r\n    if (isMultiple) {\r\n      let repeater = _.cloneDeep(settings.rep, []);\r\n      data = repeater.map((r, index) => {\r\n        let innerData = getDataByPath(r.path, []);\r\n        if (innerData.length > 0) {\r\n          //Исключаем дублирование ключей, т.к. это приводит к ошибкам рендера всех диаграм\r\n          innerData = formatData(innerData, r);\r\n        }\r\n        \r\n        return innerData;\r\n      });\r\n\r\n      data = [].concat(...data);\r\n      legend = data?.map((item, i) => ({\r\n        color: currentColors[0],\r\n        label: item.id || item.key\r\n      }));\r\n    } else if (settings.datasource_path != null) {\r\n      try {\r\n        data = getDataByPath(settings.datasource_path, []);\r\n        const r = {\r\n          key: settings.key_name,\r\n          data: settings.data_name\r\n        };\r\n  \r\n        data = formatData(data, r);\r\n        legend = data?.map((item, i) => ({\r\n          color: currentColors[0],\r\n          label: item.id || item.key\r\n        }));\r\n      } catch (error) {\r\n        console.log(\"====================================\");\r\n        console.error(error);\r\n        console.log(\"====================================\");\r\n        data = [\r\n          {\r\n            id: settings.datasource_title || settings.datasource_path,\r\n            data: []\r\n          }\r\n        ];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!sql && data.length === 0) {\r\n    return (\r\n      <div className={`altrp-chart ${settings.legendPosition}`}>\r\n        Идет загрузка данных...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const parseQueryParams = (qs = \"\") => {\r\n    if (!qs) return \"\";\r\n    const keyValues = qs.split(\"\\n\");\r\n    const result = keyValues.map(item => item.replace(\"|\", \"=\")).join(\"&\");\r\n    return `?${result}`;\r\n  };\r\n\r\n  const queryString = parseQueryParams(settings.query?.defaultParams);\r\n\r\n  const widget = {\r\n    source: sql + queryString,\r\n    options: {\r\n      colorScheme: settings.colorScheme,\r\n      legend: settings.legend,\r\n      animated: settings.animated,\r\n      isVertical: settings.isVertical\r\n    },\r\n    filter: {}\r\n  };\r\n\r\n  const setLegend = legend =>\r\n    dispatch(changePageState(widgetName, { legend: legend }));\r\n\r\n  useEffect(() => {\r\n    if (legend.length > 0) {\r\n      setLegend(legend);\r\n    }\r\n  }, [legend]);\r\n  console.log(\"====================================\");\r\n  console.log(data);\r\n  console.log(\"====================================\");\r\n  \r\n  return (\r\n    <BarDiagram\r\n      widgetID={id}\r\n      margin={margin}\r\n      useCustomTooltips={useCustomTooltips}\r\n      yScaleMax={yScaleMax}\r\n      customColorSchemeChecker={customColorSchemeChecker}\r\n      customColors={customColors}\r\n      isMultiple={isMultiple}\r\n      colorScheme={colorScheme}\r\n      dataSource={data}\r\n      widget={widget}\r\n      enableLabel={enableLabel}\r\n      width={`${settings.width?.size}${settings.width?.unit}`}\r\n      height={`${settings.height?.size}${settings.height?.unit}`}\r\n      layout={layout}\r\n      groupMode={groupMode}\r\n      reverse={reverse}\r\n      borderRadius={borderRadius}\r\n      borderWidth={borderWidth}\r\n      padding={padding}\r\n      sort={sort}\r\n      tickRotation={tickRotation}\r\n      bottomAxis={bottomAxis}\r\n      enableGridX={enableGridX}\r\n      enableGridY={enableGridY}\r\n    />\r\n  )\r\n};\r\nconst mapStateToProps = state => ({\r\n  currentDataStorage: state.currentDataStorage\r\n});\r\nexport default connect(mapStateToProps)(AltrpDiagram);\r\n"],"sourceRoot":""}