{"version":3,"sources":["webpack:///./resources/modules/front-app/src/js/classes/AltrpAction.js","webpack:///./resources/modules/front-app/src/js/classes/modules/ActionsManager.js","webpack:///./resources/modules/front-app/src/js/helpers/sendEmail.js","webpack:///./resources/modules/front-app/src/js/store/current-email-template/actions.js","webpack:///./resources/modules/front-app/src/js/store/popup-trigger/actions.js"],"names":["window","altrpHelpers","altrpLogin","altrpLogout","dataFromTable","dataToCSV","dataToXML","elementsToPdf","getAppContext","getComponentByElementId","getHTMLElementById","parseParamsFromString","getDataByPath","printElements","replaceContentWithData","scrollToElement","setDataByPath","dataToXLS","delay","altrpCompare","Resource","getWrapperHTMLElementByElement","AltrpAction","data","widgetId","element","setProperty","init","this","getProperty","getId","formId","indexOf","getCurrentModel","getData","formURL","getElementId","getElement","name","defaultValue","value","_","isString","getType","getFormURL","form","formsManager","registerForm","getFormId","type","result","success","confirmText","confirm","message","doActionForm","doActionDelay","doActionEmail","doActionRedirect","doActionToggleElements","doActionTogglePopup","doActionPrintPage","doActionPrintElements","doActionScrollToElement","doActionScrollToTop","doActionScrollToBottom","doActionTrigger","doActionPageToPDF","doActionElementsToPDF","doActionDataToCSV","doActionTableToCSV","doActionTableToXML","doActionTableToXLS","doActionLogin","doActionLogout","doActionSetData","doActionUpdateCurrentDatasources","doActionUpdateCurrentModel","doActionFormsManipulate","doActionCustomCode","doActionPlaySound","doActionCondition","doActionVIToggle","doActionOAuth","alertText","alert","default","customHeaders","isArray","get","bulk","customRoute","assign","bulkRequests","map","item","idx","url","submit","Promise","all","console","error","forEach","deleteFormById","_data","isEmpty","formOptions","dynamicURL","response","URL","frontAppRouter","history","goBack","location","push","back","href","IDs","split","id","component","toggleElementDisplay","loadPopups","appStore","dispatch","togglePopup","print","elementsToPrint","elementId","trim","getStylesHTMLElement","stylesElement","document","head","scroller","mainScrollbars","querySelector","scrollTop","scrollTo","top","left","behavior","routeContent","getElementById","offsetHeight","filename","elements","all_sources_path","table","formattedData","each","row","Object","values","rawTemplateData","parsedTemplateData","reduce","keyValuePair","templateName","blob","link","createElement","setAttribute","createObjectURL","body","appendChild","click","removeChild","fields","field","fieldValidate","paths","path","setType","count","length","replace","currentValue","v","nextIndex","isNaN","Number","isObject","i","listPath","list","filter","_item","change","elementRef","current","selectAll","clearValue","code","eval","modelName","currentPage","model_name","modelId","model_data","route","model","oldModel","getState","currentModel","altrpModelUpdated","isEqual","changeCurrentModel","aliases","alias","allDataSources","dataStorageUpdater","dataSourcesToUpdate","dataSource","updateCurrent","action","isFunction","fireAction","templateGUID","res","sendEmail","getReplacedProperty","duration","loop","playSound","compare","conditionLeft","conditionRight","loadVIPlugin","OIDC","WebStorageStateStore","UserManager","authority","OidcClient","altrpLibs","method","settings","client_id","redirect_uri","post_logout_redirect_uri","response_type","scope","automaticSilentRenew","userStore","store","localStorage","filterProtocolClaims","loadUserInfo","monitorSession","checkSessionInterval","_manager","log","manager","AltrpModel","isEditor","ActionsManager","actions","eventName","a","unsetProperty","preventedActions","errors","doAction","actionsManager","emailTemplateGUID","subject","from","to","attachments","templateLoader","loadTemplate","template","changeCurrentEmailTemplate","html","emailTemplatesRenderer","emailTemplate","cloneNode","style","display","outerHTML","resource","post","CHANGE_CURRENT_EMAIL_TEMPLATE","TRIGGER_POPUP","payload"],"mappings":"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","file":"ActionsManager.c1dfdc0471fed08284cf.bundle.js","sourcesContent":["import AltrpModel from '../../../../editor/src/js/classes/AltrpModel';\nimport {togglePopup} from '../store/popup-trigger/actions';\nimport {sendEmail} from '../helpers/sendEmail';\nimport {changeCurrentModel} from \"../store/current-model/actions\";\nconst {\n  altrpLogin,\n  altrpLogout,\n  dataFromTable,\n  dataToCSV,\n  dataToXML,\n  elementsToPdf,\n  getAppContext,\n  getComponentByElementId,\n  getHTMLElementById,\n  parseParamsFromString,\n  getDataByPath,\n  printElements,\n  replaceContentWithData,\n  scrollToElement,\n  setDataByPath,\n  dataToXLS,\n  delay,\n  altrpCompare,\n  Resource,\n  getWrapperHTMLElementByElement\n} = window.altrpHelpers;\n\n// let  history = require('history');\n// // import {history} from 'history';\n// console.log(history.history);\n/**\n * Класс представляющий действия на странице\n * @link https://docs.google.com/document/d/1v8Hm1DLkqqwzBeISd8-UvgTqscVxQPtBUtKqBrH1HaU/edit#\n * @class AltrpAction\n */\nclass AltrpAction extends AltrpModel {\n  constructor(data, widgetId, element) {\n    super(data);\n    this.setProperty('_widgetId', widgetId);\n    this.setProperty('_element', element);\n    this.init();\n  }\n\n  /**\n   * Получить id элемента\n   * @return {string}\n   */\n  getElementId() {\n    return this.getProperty('_element').getId();\n  }\n\n  /**\n   * Получить id для регистрации формы\n   * @return {string}\n   */\n  getFormId() {\n    let formId = this.getProperty('form_id');\n    if (!formId) {\n      return formId;\n    }\n    if (formId.indexOf('{{') !== -1) {\n      formId = replaceContentWithData(formId, this.getCurrentModel().getData());\n    }\n    return formId;\n  }\n\n  /**\n   * Получить URL формы\n   * @return {string}\n   */\n  getFormURL() {\n    let formURL = this.getProperty('form_url');\n    if (!formURL) {\n      return formURL;\n    }\n    if (formURL.indexOf('{{') !== -1) {\n      formURL = replaceContentWithData(\n        formURL,\n        this.getCurrentModel().getData()\n      );\n    }\n    return formURL;\n  }\n\n  /**\n   * Получить компонент обертки для элемента\n   * @return {{}}\n   */\n  getWrapperComponent() {\n    return getComponentByElementId(this.getElementId());\n  }\n\n  /**\n   * Получить экземпляр элемента\n   * @return {FrontElement | null}\n   */\n  getElement() {\n    return this.getProperty('_element');\n  }\n\n  /**\n   * Получить экземпляр текущей модели страницы или карточки\n   * @return {AltrpModel | null}\n   */\n  getCurrentModel() {\n    const element = this.getElement();\n    return element.getCurrentModel();\n  }\n\n  /**\n   * Возврашает значение свойства name, если свойство строка, то производит подстановку значений из данных\n   * @params {string} name\n   * @params {*} defaultValue\n   * @return {*}\n   */\n  getReplacedProperty(name, defaultValue = '') {\n    let value = this.getProperty(name, defaultValue);\n    if (_.isString(value)) {\n      value = replaceContentWithData(value, this.getCurrentModel().getData());\n    }\n    return value;\n  }\n\n  /**\n   * Инициируем действие\n   */\n  async init() {\n    switch (this.getType()) {\n      case 'form': {\n        if (!this.getFormURL()) {\n          this.setProperty('_form', null);\n          return;\n        }\n        // const formsManager = (\n        //   await import(\n        //     '../../../../editor/src/js/classes/modules/FormsManager.js'\n        //   )\n        // ).default;\n        // const formOptions = {\n        //   dynamicURL: true,\n        //   customRoute: this.getFormURL()\n        // };\n\n        // const form = formsManager.registerForm(\n        //   this.getFormId(),\n        //   '',\n        //   this.getProperty('form_method'),\n        //   formOptions\n        // );\n        // this.setProperty('_form', form);\n        return;\n      }\n      case 'login': {\n        const form = formsManager.registerForm(\n          this.getFormId(),\n          'login',\n          'POST'\n        );\n        this.setProperty('_form', form);\n      }\n    }\n  }\n\n  /**\n   * Получить тип действия\n   * @return {string}\n   */\n  getType() {\n    return this.getProperty('type');\n  }\n\n  /**\n   * Получить тип действия\n   * @return {*}\n   */\n  setType(type) {\n    return this.setProperty('type', type);\n  }\n\n  /**\n   * Оссинхронно выполняет действие\n   * @return {Promise<void>}\n   */\n  async doAction() {\n    let result = {\n      success: false\n    };\n    let confirmText = this.getProperty('confirm');\n    confirmText = replaceContentWithData(confirmText, this.getCurrentModel().getData());\n\n    if (confirmText && !confirm(confirmText)) {\n      return {\n        success: false,\n        message: 'User not Confirm'\n      };\n    }\n    switch (this.getType()) {\n      case 'form': {\n        result = await this.doActionForm();\n      }\n        break;\n      case 'delay': {\n        result = await this.doActionDelay();\n      }\n        break;\n      case 'email': {\n        result = await this.doActionEmail();\n      }\n        break;\n      case 'redirect': {\n        result = await this.doActionRedirect();\n      }\n        break;\n      case 'toggle_element': {\n        result = await this.doActionToggleElements();\n      }\n        break;\n      case 'toggle_popup': {\n        result = await this.doActionTogglePopup();\n      }\n        break;\n      case 'print_page': {\n        result = await this.doActionPrintPage();\n      }\n        break;\n      case 'print_elements': {\n        result = await this.doActionPrintElements();\n      }\n        break;\n      case 'scroll_to_element': {\n        result = await this.doActionScrollToElement();\n      }\n        break;\n      case 'scroll_to_top': {\n        result = await this.doActionScrollToTop();\n      }\n        break;\n      case 'scroll_to_bottom': {\n        result = await this.doActionScrollToBottom();\n      }\n        break;\n      case 'trigger': {\n        result = await this.doActionTrigger();\n      }\n        break;\n      case 'page_to_pdf': {\n        result = await this.doActionPageToPDF();\n      }\n        break;\n      case 'elements_to_pdf': {\n        result = await this.doActionElementsToPDF();\n      }\n        break;\n      case 'data_to_csv': {\n        result = await this.doActionDataToCSV();\n      }\n        break;\n      case 'table_to_csv': {\n        result = await this.doActionTableToCSV();\n      }\n        break;\n      case 'table_to_xml': {\n        result = await this.doActionTableToXML();\n      }\n        break;\n      case 'table_to_xls':\n        result = await this.doActionTableToXLS();\n        break;\n      case 'login': {\n        result = await this.doActionLogin();\n      }\n        break;\n      case 'logout': {\n        result = await this.doActionLogout();\n      }\n        break;\n      case 'set_data': {\n        result = await this.doActionSetData();\n      }\n        break;\n      case 'update_current_datasources': {\n        result = await this.doActionUpdateCurrentDatasources();\n      }\n        break;\n      case 'update_current_model': {\n        result = await this.doActionUpdateCurrentModel();\n      }\n        break;\n      case 'forms_manipulate': {\n        result = await this.doActionFormsManipulate();\n      }\n        break;\n      case 'custom_code': {\n        result = await this.doActionCustomCode();\n      }\n        break;\n      case 'play_sound': {\n        result = await this.doActionPlaySound();\n      }\n        break;\n      case 'condition': {\n        result = await this.doActionCondition();\n      }\n        break;\n      case 'vi_toggle': {\n        result = await this.doActionVIToggle();\n      }\n        break;\n      case 'oauth': {\n        result = await this.doActionOAuth();\n\n      }\n        break;\n    }\n    let alertText = '';\n    if (result.success) {\n      alertText = this.getProperty('alert');\n    } else {\n      alertText = this.getProperty('reject');\n    }\n    if (alertText) {\n      alertText = replaceContentWithData(alertText, this.getCurrentModel().getData());\n      alert(alertText);\n    }\n    return result;\n  }\n\n  /**\n   * Ассинхронно выполняет действие-формы\n   * @return {Promise<{}>}\n   */\n  async doActionForm() {\n    // if (! this.getProperty('_form')) {\n    //   return {\n    //     success: false,\n    //     message: 'Нет Формы'\n    //   };\n    // }\n    const formsManager = (\n      await import(/* webpackChunkName: 'formsManager' */'../../../../editor/src/js/classes/modules/FormsManager.js')\n    ).default;\n\n    let data = null;\n    let customHeaders = null;\n    if (this.getProperty('custom_headers')) {\n      customHeaders = parseParamsFromString(\n        this.getProperty('custom_headers'),\n        this.getCurrentModel()\n      );\n    }\n    if (this.getProperty('data')) {\n      data = parseParamsFromString(\n        this.getProperty('data'),\n        getAppContext(this.getCurrentModel()),\n        true\n      );\n      // if (!_.isEmpty(data)) {\n      //   return form.submit('', '', data);\n      // }\n      // return { success: true };\n    }\n    if (this.getProperty('forms_bulk')) {\n      if (\n        _.isArray(getDataByPath(this.getProperty('bulk_path'))) &&\n        _.get(getDataByPath(this.getProperty('bulk_path')), 'length')\n      ) {\n        let bulk = getDataByPath(this.getProperty('bulk_path'));\n        /**\n         * Для получение данных с полей формы, нужно создать форму и вызвать метод getData\n         * @type {AltrpForm}\n         */\n        const form = formsManager.registerForm(\n          this.getFormId(),\n          '',\n          this.getProperty('form_method'),\n          {\n            customRoute: ''\n          }\n        );\n        data = _.assign(form.getData(), data);\n        let bulkRequests = bulk.map(async (item, idx) => {\n          if (this.getProperty('data')) {\n            data = parseParamsFromString(\n              this.getProperty('data'),\n              getAppContext(item),\n              true\n            );\n          }\n          let url = this.getProperty('form_url');\n          url = replaceContentWithData(url, item);\n          const form = formsManager.registerForm(\n            this.getFormId() + idx,\n            '',\n            this.getProperty('form_method'),\n            {\n              customRoute: url\n            }\n          );\n          return await form.submit('', '', data, customHeaders);\n        });\n        try {\n          let res = await Promise.all(bulkRequests);\n        } catch (error) {\n          console.error(error);\n          bulk.forEach((item, idx) => {\n            formsManager.deleteFormById(this.getFormId() + idx);\n          });\n          return {success: false};\n        }\n        bulk.forEach((item, idx) => {\n          formsManager.deleteFormById(this.getFormId() + idx);\n        });\n      }\n\n      return {success: true};\n    }\n    if (this.getProperty('path')) {\n      let _data = getDataByPath(this.getProperty('path'), {});\n      if (!_.isEmpty(_data)) {\n        data = _.assign(_data, data);\n      }\n    }\n    /**\n     *\n     * @type {AltrpForm}\n     */\n    // let form = this.getProperty('_form');\n    if (!this.getFormURL()) {\n      this.setProperty('_form', null);\n      return {\n        success: false\n      };\n    }\n    const formOptions = {\n      dynamicURL: true,\n      customRoute: this.getFormURL()\n    };\n    const form = formsManager.registerForm(\n      this.getFormId(),\n      '',\n      this.getProperty('form_method'),\n      formOptions\n    );\n    let result = {\n      success: true\n    };\n    try {\n      const response = await form.submit('', '', data, customHeaders);\n      result = _.assign(result, response);\n    } catch (error) {\n      console.error(error);\n      result.error = error;\n      result.success = false;\n    }\n\n    return result;\n  }\n\n  /**\n   * Делает редирект на страницу form_url\n   * @return {Promise<{}>}\n   */\n  async doActionRedirect() {\n    let URL = this.getFormURL();\n    if(! URL){\n      return {\n        success: true\n      }\n    }\n    if (window.frontAppRouter) {\n      if (this.getProperty('back')) {\n        frontAppRouter.history.goBack();\n      } else {\n        let innerRedirect = !this.getProperty('outer');\n        if (innerRedirect) {\n          frontAppRouter.history.push(URL);\n        } else {\n          window.location.assign(URL);\n        }\n      }\n    } else {\n      if (this.getProperty('back')) {\n        history.back()\n      } else {\n        window.location.href = URL;\n      }\n    }\n    return {\n      success: true\n    };\n  }\n\n  /**\n   * Показывает/скрывает элементы по пользовательским ИД\n   * @return {Promise<{}>}\n   */\n  async doActionToggleElements() {\n    let IDs = this.getProperty('elements_ids');\n\n    if (!IDs) {\n      return {success: true};\n    }\n    IDs = IDs.split(',');\n\n    IDs.forEach(id => {\n      let component = getComponentByElementId(id);\n      if (!component && !component.toggleElementDisplay) {\n        return;\n      }\n      component.toggleElementDisplay();\n    });\n    return {\n      success: true\n    };\n  }\n\n  /**\n   * Показывает/скрывает попап\n   * @return {Promise<{}>}\n   */\n  async doActionTogglePopup() {\n    let id = this.getProperty('popup_id');\n    if (!id) {\n      return {\n        success: true\n      };\n    }\n    if (window['h-altrp']) {\n      const loadPopups = (await import(/* webpackChunkName: 'load-popups' */\"../functions/load-popups\")).default;\n      await loadPopups();\n    }\n    appStore.dispatch(togglePopup(id));\n\n    return {\n      success: true\n    };\n  }\n\n  /**\n   * Печать страницы\n   * @return {Promise<{}>}\n   */\n  async doActionPrintPage() {\n    window.print();\n    return {\n      success: true\n    };\n  }\n\n  /**\n   * Печать элементов\n   * @return {Promise<{}>}\n   */\n  async doActionPrintElements() {\n    let IDs = this.getProperty('elements_ids');\n    if (!IDs) {\n      return {success: true};\n    }\n    IDs = IDs.split(',');\n    let elementsToPrint = [];\n    IDs.forEach(elementId => {\n      if (!elementId || !elementId.trim()) {\n        return;\n      }\n      getHTMLElementById(elementId.trim()) &&\n      elementsToPrint.push(getHTMLElementById(elementId));\n      if (getComponentByElementId(elementId.trim())?.getStylesHTMLElement) {\n        let stylesElement = getComponentByElementId(\n          elementId.trim()\n        ).getStylesHTMLElement();\n        if (stylesElement) {\n          elementsToPrint.push(stylesElement);\n        }\n      }\n    });\n    if (_.get(window, 'stylesModule.stylesContainer.current')) {\n      elementsToPrint.push(\n        _.get(window, 'stylesModule.stylesContainer.current')\n      );\n    }\n    elementsToPrint.push(document.head);\n    printElements(elementsToPrint);\n    return {\n      success: true\n    };\n  }\n\n  /**\n   * Скролл к элементу\n   * @return {Promise<{}>}\n   */\n  async doActionScrollToElement() {\n    let elementId = this.getProperty('element_id');\n    if (!elementId) {\n      return {success: true};\n    }\n    elementId = elementId.trim();\n    const element = getHTMLElementById(elementId);\n    let scroller = window.mainScrollbars;\n    if (!scroller) {\n      scroller = document.querySelector('.front-app-content');\n    }\n    if (!scroller) {\n      scroller = window;\n    }\n    if (element) {\n      scrollToElement(scroller, element);\n    }\n    return {\n      success: true\n    };\n  }\n\n  /**\n   * Скролл на верх страницы\n   * @return {Promise<{}>}\n   */\n  async doActionScrollToTop() {\n    if (window.mainScrollbars) {\n      window.mainScrollbars.scrollTop(0);\n      return {\n        success: true\n      };\n    }\n    let scroller = document.querySelector('.front-app-content');\n\n    if (!scroller) {\n      scroller = window;\n    }\n    scroller.scrollTo({top: 0, left: 0, behavior: 'smooth'})\n\n    return {\n      success: true\n    };\n  }\n\n  /**\n   * Скролл на верх страницы\n   * @return {Promise<{}>}\n   */\n  async doActionScrollToBottom() {\n    const routeContent = document.getElementById('route-content');\n    if (!routeContent) {\n      return {\n        success: true\n      };\n    }\n    if (window.mainScrollbars) {\n      window.mainScrollbars.scrollTop(routeContent.offsetHeight);\n      return {\n        success: true\n      };\n    }\n\n    let scroller = document.querySelector('.front-app-content');\n\n    if (!scroller) {\n      scroller = window;\n    }\n    scroller.scrollTo({left: 0, top: document.querySelector('.route-content').offsetHeight, behavior: 'smooth'})\n    return {\n      success: true\n    };\n  }\n\n  /**\n   * Страницу в PDF\n   * @return {Promise<{}>}\n   */\n  async doActionPageToPDF() {\n    let filename = replaceContentWithData(this.getProperty('name', 'file'), this.getCurrentModel().getData());\n    const elements = [];\n\n    elements.push(document.getElementById('route-content'));\n    return await elementsToPdf(elements, filename);\n  }\n\n  /**\n   * Элементы в PDF\n   * @return {Promise<{}>}\n   */\n  async doActionElementsToPDF() {\n    let filename = replaceContentWithData(this.getProperty('name', 'file'), this.getCurrentModel().getData());\n    const elements = [];\n    let IDs = this.getProperty('elements_ids');\n    if (!IDs) {\n      return {success: true};\n    }\n    IDs = IDs.split(',');\n    IDs.forEach(elementId => {\n      if (!elementId || !elementId.trim()) {\n        return;\n      }\n      getHTMLElementById(elementId.trim()) &&\n      elements.push(getHTMLElementById(elementId));\n    });\n    return await elementsToPdf(elements, filename);\n  }\n\n  /**\n   * Данные в CSV-файл\n   * @return {Promise<{}>}\n   */\n  async doActionDataToCSV() {\n    let data = getDataByPath(this.getProperty('path'));\n    let filename = replaceContentWithData(this.getProperty('name', 'file'), this.getCurrentModel().getData());\n    try {\n      return await dataToCSV(data, filename);\n    } catch (error) {\n      console.error(error);\n      return {success: false};\n    }\n  }\n\n  /**\n   * HTML-Таблицу в CSV-файл\n   * @return {Promise<{}>}\n   */\n  async doActionTableToCSV() {\n    let elementId = this.getProperty('element_id');\n    if (!elementId) {\n      return {success: true};\n    }\n    elementId = elementId.trim();\n    const element = getHTMLElementById(elementId);\n    if (!element) {\n      return {success: true};\n    }\n    let data;\n    try {\n      data = dataFromTable(element);\n    } catch (error) {\n      console.error(error);\n      return {success: false};\n    }\n    if (_.isEmpty(data)) {\n      return {success: true};\n    }\n    let filename = replaceContentWithData(this.getProperty('name', 'file'), this.getCurrentModel().getData());\n    try {\n      return await dataToCSV(data, filename);\n    } catch (error) {\n      console.error(error);\n      return {success: false};\n    }\n  }\n\n  /**\n   * HTML-Таблицу в XML-файл\n   * @return {Promise<{}>}\n   */\n  async doActionTableToXML() {\n    let elementId = this.getProperty('element_id');\n    if (!elementId) {\n      return {success: true};\n    }\n    elementId = elementId.trim();\n    const element = getHTMLElementById(elementId);\n    if (!element) {\n      return {success: true};\n    }\n    let data;\n    try {\n      data = dataFromTable(element);\n    } catch (error) {\n      console.error(error);\n      return {success: false};\n    }\n    if (_.isEmpty(data)) {\n      return {success: true};\n    }\n    let filename = replaceContentWithData(this.getProperty('name', 'file'), this.getCurrentModel().getData());\n    try {\n      return await dataToXML(data, filename);\n    } catch (error) {\n      console.error(error);\n      return {success: false};\n    }\n  }\n\n  /**\n   * HTML-таблицу в XLS-файл\n   * @return {Promise}\n   */\n  async doActionTableToXLS() {\n\n    let data = [];\n\n    if (this.getProperty('all_sources')) {\n      const all_sources_path = this.getProperty('all_sources_path');\n      if (all_sources_path) data = getDataByPath(all_sources_path, {});\n      data = {data};\n\n    } else {\n      const elementId = this.getProperty('element_id').trim();\n\n      if (!elementId) {\n        console.error('Element ID is not set');\n        return {success: true};\n      }\n\n      const table = getHTMLElementById(elementId);\n      if (!table) {\n        console.error('Table with provided ID is not found');\n        return {success: true};\n      }\n\n      data = dataFromTable(table);\n\n      const formattedData = [];\n\n      _.each(data, row => formattedData.push(Object.values(row)));\n      let rawTemplateData = this.getProperty('template_data');\n      if (rawTemplateData) {\n        const parsedTemplateData = rawTemplateData\n          .split('\\n')\n          .reduce((data, row) => {\n            const keyValuePair = row.split('=');\n            data[keyValuePair[0]] = keyValuePair[1];\n            return data;\n          }, {});\n        data = {...parsedTemplateData, data: formattedData};\n      } else {\n        data = {data};\n      }\n    }\n\n    const filename = replaceContentWithData(this.getProperty('name', 'file'), this.getCurrentModel().getData());\n    const templateName = this.getProperty('template_name');\n\n    try {\n      const blob = await dataToXLS(data, filename, templateName);\n      let link = document.createElement('a');\n      link.setAttribute('href', window.URL.createObjectURL(blob));\n      link.setAttribute('download', filename + '.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      return {success: true};\n    } catch (error) {\n      console.error(error);\n      return {success: false};\n    }\n  }\n\n  /**\n   * действие-логин\n   * @return {Promise<{}>}\n   */\n  async doActionLogin() {\n    /**\n     *\n     * @member {AltrpForm} form\n     */\n    let form = this.getProperty('_form');\n    let success = true;\n    form.fields.forEach(field => {\n      if (!field.fieldValidate()) {\n        success = false;\n      }\n    });\n    if (!success) {\n      return {success: false};\n    }\n\n    return await altrpLogin(form.getData(), this.getFormId());\n  }\n\n  /**\n   * действие-выход из приложения\n   * @return {Promise<{}>}\n   */\n  async doActionLogout() {\n    return await altrpLogout();\n  }\n\n  /**\n   * действие-установка значения по для пути `path`\n   * @return {Promise<{}>}\n   */\n  async doActionSetData() {\n    let paths = this.getProperty('path');\n    const result = {\n      success: true\n    };\n    if (!paths) {\n      return result;\n    }\n    if (paths.indexOf(',') !== -1) {\n      paths = paths.split(',').map(path => path.trim());\n    } else {\n      paths = [paths];\n    }\n    for (let path of paths) {\n      path = replaceContentWithData(path, this.getCurrentModel().getData());\n      let value = this.getProperty('value') || '';\n      value = value.trim();\n      const setType = this.getProperty('set_type');\n      let count = this.getProperty('count');\n      switch (setType) {\n        case 'toggle': {\n          value = !getDataByPath(path);\n          result.success = setDataByPath(path, value);\n        }\n          break;\n        case 'set': {\n          if (\n            value.split(/\\r?\\n/).length === 1 &&\n            value.indexOf('{{') === 0 &&\n            value.indexOf('}}') === value.length - 2\n          ) {\n            value = getDataByPath(\n              value.replace('{{', '').replace('}}', ''),\n              null,\n              this.getCurrentModel()\n            );\n          } else if (value.indexOf('|') !== -1) {\n            value = parseParamsFromString(\n              value,\n              this.getCurrentModel(),\n              true\n            );\n          }\n          result.success = setDataByPath(path, value);\n        }\n          break;\n        case 'toggle_set': {\n          let currentValue = getDataByPath(path);\n          value = value.split('\\n').map(v => v.trim());\n          if (value.length === 1) {\n            value.push('');\n          }\n          let nextIndex = value.indexOf(currentValue) + 1;\n          if (nextIndex >= value.length) {\n            nextIndex = 0;\n          }\n          value = value[nextIndex] || '';\n          result.success = setDataByPath(path, value);\n        }\n          break;\n        case 'increment': {\n          let currentValue = getDataByPath(path);\n          currentValue = currentValue\n            ? _.isNaN(Number(currentValue))\n              ? 1\n              : Number(currentValue)\n            : Number(!!currentValue);\n          count = Number(count) || 1;\n          currentValue += count;\n          result.success = setDataByPath(path, currentValue);\n        }\n          break;\n        case 'decrement': {\n          let currentValue = getDataByPath(path);\n          currentValue = currentValue\n            ? _.isNaN(Number(currentValue))\n              ? 1\n              : Number(currentValue)\n            : Number(!!currentValue);\n          count = Number(count) || 1;\n          currentValue -= count;\n          result.success = setDataByPath(path, currentValue);\n        }\n          break;\n        case 'push_items': {\n          let currentValue = getDataByPath(path);\n          let item = {};\n          if (!_.isArray(currentValue)) {\n            currentValue = [];\n          }\n          currentValue = [...currentValue];\n          if (_.isObject(getDataByPath(value))) {\n            item = getDataByPath(value);\n          }\n          count = Number(count) || 1;\n          if (count < 0) {\n            count = 1;\n          }\n          while (count) {\n            _.isArray(item)\n              ? currentValue.push([...item])\n              : currentValue.push({...item});\n            --count;\n          }\n          result.success = setDataByPath(path, currentValue);\n        }\n          break;\n        case 'remove_items': {\n          let items = path.split(/\\r?\\n/);\n          items.forEach(i => {\n            if (!i) {\n              return;\n            }\n            i = i.trim();\n            if (!i) {\n              return;\n            }\n            if (i.indexOf('{{') !== -1) {\n              i = replaceContentWithData(i, this.getCurrentModel().getData());\n            }\n            let item = getDataByPath(i);\n            if (!item) {\n              return;\n            }\n            let listPath = i.replace(/.\\d+$/, '').trim();\n            if (!listPath) {\n              return;\n            }\n            let list = getDataByPath(listPath);\n            if (!_.isArray(list)) {\n              return;\n            }\n            list = [...list];\n\n            list = list.filter(_item => _item !== item);\n            setDataByPath(listPath, list);\n          });\n          result.success = true;\n        }\n          break;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * действие - манипуляция с элементами форм\n   * @return {Promise<{}>}\n   */\n  doActionFormsManipulate() {\n    let IDs = this.getProperty('elements_ids');\n    if (!IDs) {\n      return {success: true};\n    }\n    IDs = IDs.split(',');\n    const change = this.getProperty('forms_change');\n    IDs.forEach(id => {\n      let component = getComponentByElementId(id);\n      switch (change) {\n        case 'select_all': {\n          if (_.get(component, 'elementRef.current.selectAll')) {\n            component.elementRef.current.selectAll();\n          }\n        }\n          break;\n        case 'clear': {\n          if (_.get(component, 'elementRef.current.clearValue')) {\n            component.elementRef.current.clearValue();\n          }\n        }\n          break;\n      }\n    });\n    return {success: true};\n  }\n\n  /**\n   * действие - выполнение пользовательского кода\n   * @return {Promise<{}>}\n   */\n  doActionCustomCode() {\n    let code = this.getProperty('code');\n    try {\n      eval(code);\n      return {success: true};\n    } catch (error) {\n      console.error('Evaluate error in doActionCustomCode: \"' + error.message + '\"');\n      return {success: false};\n    }\n  }\n\n  /**\n   * Действие - обновление текущей модели по AJAX\n   * Action - updating the current model via AJAX\n   * @return {Promise<{}>}\n   */\n  async doActionUpdateCurrentModel() {\n\n    let modelName = window?.currentPage?.model_name\n    if (!modelName) {\n      return {success: true}\n    }\n    let modelId = window?.model_data?.id;\n    if (!modelId) {\n      return {success: true}\n    }\n    try {\n      let model = await new Resource({\n        route: `/ajax/models/${modelName}`\n      }).get(modelId);\n      if (_.isObject(model.data)) {\n        model = model.data\n      }\n      const oldModel = window.appStore.getState().currentModel.getData();\n      model.altrpModelUpdated = true;\n\n      if (!_.isEqual(model, oldModel)) {\n        appStore.dispatch(changeCurrentModel({altrpModelUpdated: false}));\n        appStore.dispatch(changeCurrentModel(model));\n      }\n      return {success: true}\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  /**\n   * действие - обновление текущего хранилища\n   * @return {Promise<{}>}\n   */\n  async doActionUpdateCurrentDatasources() {\n    let aliases = this.getProperty('aliases') || '';\n    aliases = aliases\n      .split(',')\n      .map(alias => alias.trim())\n      .filter(alias => alias);\n    const allDataSources = window.dataStorageUpdater.getProperty(\n      'currentDataSources'\n    );\n    const dataSourcesToUpdate = allDataSources.filter(dataSource => {\n      return aliases.indexOf(dataSource.getProperty('alias')) !== -1;\n    });\n    /**\n     * @type {DataStorageUpdater}\n     */\n    await window.dataStorageUpdater.updateCurrent(dataSourcesToUpdate, false);\n    return {success: true};\n  }\n\n  /**\n   * Триггер события на другом компоненте\n   * @return {Promise<{}>}\n   */\n  async doActionTrigger() {\n    let elementId = this.getProperty('element_id');\n    let element = getComponentByElementId(elementId);\n    let action = this.getProperty('action');\n    if (_.isFunction(element[action])) {\n      element[action]();\n      return {\n        success: true\n      };\n    }\n    try {\n      element.elementRef.current.fireAction(action);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(error);\n      return {\n        success: false\n      };\n    }\n  }\n\n  /**\n   * Отправка почты\n   */\n  async doActionEmail() {\n    let templateGUID = this.getProperty('email_template');\n    if (!templateGUID) {\n      return {success: true};\n    }\n    let res = {success: false};\n    try {\n      res = await sendEmail(\n        templateGUID,\n        this.getReplacedProperty('subject'),\n        this.getReplacedProperty('from'),\n        this.getReplacedProperty('to'),\n        this.getReplacedProperty('attachments')\n      );\n    } catch (e) {\n      console.error(e);\n      return {\n        success: false\n      };\n    }\n    return res;\n  }\n\n  /**\n   * Добавляем временную задержку в милисекундах\n   */\n  async doActionDelay() {\n    await delay(this.getProperty('milliseconds') || 0);\n    return {success: true};\n  }\n\n  /**\n   * Воспроизводим звук\n   * @return {Promise<{success: boolean}>}\n   */\n  async doActionPlaySound() {\n    const duration = this.getProperty('milliseconds') || 0;\n    const url = this.getProperty('media_url');\n    const loop = this.getProperty('loop');\n    if (url) {\n      const {playSound} = await import(/* webpackChunkName: 'helpers-sounds' */'../helpers/sounds');\n      playSound(url, loop, duration);\n      await delay(20);\n    }\n    return {success: true};\n  }\n\n  /**\n   * Проверка условий\n   * @return {Promise<{success: boolean}>}\n   */\n  async doActionCondition() {\n    const compare = this.getProperty('compare');\n    let conditionLeft = this.getProperty('condition_left');\n    let conditionRight = this.getProperty('condition_right');\n    conditionLeft = getDataByPath(conditionLeft);\n    conditionRight = replaceContentWithData(conditionRight, this.getCurrentModel().getData());\n    const res = altrpCompare(conditionLeft, conditionRight, compare);\n    return {success: res};\n  }\n\n  /**\n   * Версия сайта для слабовидящих\n   * @return {Promise<void>}\n   */\n  async doActionVIToggle() {\n    try {\n      const {loadVIPlugin} = (await import(/* webpackChunkName 'loadVIPlugin' */'../helpers/plugins'))\n      await loadVIPlugin();\n    } catch (error) {\n      return {\n        success: false\n      };\n    }\n    // console.log($);\n    let HTMLWrapper = getWrapperHTMLElementByElement(this.getElement());\n    // if(HTMLWrapper){\n    //   HTMLWrapper.classList.add('bvi-hide');\n    // }\n\n    // $.bvi({\n    //   bvi_target: '.altrp-btn',\n    //\n    // });\n\n    return {\n      success: true\n    };\n  }\n\n  /**\n   *\n   * @returns {Promise<void>}\n   */\n  async doActionOAuth() {\n    const OIDC  = await import (/* webpackChunkName: 'OIDC' */\"oidc-client\");\n    const {WebStorageStateStore, UserManager, authority, OidcClient} = OIDC;\n    (window.altrpLibs = window.altrpLibs || {}).OIDC = OIDC\n\n    const method = this.getProperty('method')\n    if( ! method){\n      return {\n        success: true,\n      }\n    }\n    let settings = {\n      client_id: 'AisOrder',\n      redirect_uri: `http://zayavka.geobuilder.ru/login/laravelpassport/callback`,\n      post_logout_redirect_uri: `http://zayavka.geobuilder.ru/login/laravelpassport/callback`,\n      response_type: 'token id_token',\n      scope: 'openid profile',\n      authority:'https://fs.geobuilder.ru/idp',\n      automaticSilentRenew: false,\n      userStore: new WebStorageStateStore({ store: window.localStorage }),\n      filterProtocolClaims: true,\n      loadUserInfo: true,\n      monitorSession: false,\n      checkSessionInterval: 3600000\n    };\n    const _manager = new UserManager(settings);\n    console.log(_manager);\n    settings = {\n      client_id: this.getProperty('client_id'),\n      redirect_uri: this.getProperty('redirect_uri'),\n      post_logout_redirect_uri: this.getProperty('post_logout_redirect_uri'),\n      response_type: this.getProperty('response_type'),\n      scope: this.getProperty('scope'),\n      authority:this.getProperty('authority'),\n      automaticSilentRenew: this.getProperty('automaticSilentRenew'),\n      userStore: new WebStorageStateStore({ store: window.localStorage }),\n      filterProtocolClaims: this.getProperty('filterProtocolClaims'),\n      loadUserInfo: this.getProperty('loadUserInfo'),\n      monitorSession: this.getProperty('monitorSession'),\n      checkSessionInterval: this.getProperty('checkSessionInterval')\n    };\n    const manager = new UserManager(settings);\n    // console.log( manager);\n    // console.log(await manager.getUser());\n    let result;\n    console.log(method);\n\n    if(_.isFunction(manager[method])){\n      try {\n        result =await manager[method]();\n      } catch (e) {\n        return {success:false}\n      }\n    }\n    console.log(result);\n    // await manager.signoutRedirect();\n    return {success:true}\n  }\n}\n\nexport default AltrpAction;\n","/**\r\n * @class ActionsManager\r\n * Класс хранит действия для виджетов и вызывает их последовательно в порядке полученного списка\r\n * @member {} data - где хранятся действия виджета сгруппированные по типу события {\r\n *  widgetId:{\r\n *    eventName: []\r\n *  }\r\n * }\r\n */\r\nimport AltrpAction from \"../AltrpAction\";\r\nimport AltrpModel from \"../../../../../editor/src/js/classes/AltrpModel\";\r\nconst {isEditor, } = window.altrpHelpers;\r\n\r\nclass ActionsManager extends AltrpModel{\r\n  /**\r\n   * Регистрирует действия для определенного виджета\r\n   * @param {string} widgetId\r\n   * @param {array} actions\r\n   * @param {string} eventName\r\n   * @param {FrontElement | null} element\r\n   * @param {*} context\r\n   */\r\n  registerWidgetActions(widgetId, actions = [], eventName = 'click', element = null, context = null ){\r\n    if((! actions) || ! actions.length){\r\n      return null;\r\n    }\r\n    actions = actions.filter(a=>a.type).map(a=>{\r\n      return new AltrpAction(a, widgetId, element);\r\n    });\r\n    return this.setProperty(`actions.${widgetId}.${eventName}`, actions);\r\n  }\r\n\r\n  /**\r\n   * удаляет все действия виджета\r\n   * @param {string} widgetId\r\n   */\r\n  unregisterWidgetActions(widgetId){\r\n    return this.unsetProperty(`actions.${widgetId}`)\r\n  }\r\n\r\n  /**\r\n   * Вызывает все зарегистрированные действия определенного типа для виджета\r\n   * @param {string} widgetId\r\n   * @param {string} eventName\r\n   * @param {[]} preventedActions\r\n   * @param {FrontElement} element\r\n   * @return {Promise<void>}\r\n   */\r\n  async callAllWidgetActions(widgetId, eventName = 'click', preventedActions, element){\r\n    if(isEditor()){\r\n      return\r\n    }\r\n    if(this.getProperty(`widget.statuses.${widgetId}.${eventName}`) === 'inAction'){\r\n      return\r\n    }\r\n    this.setProperty(`widget.statuses.${widgetId}.${eventName}`, 'inAction')\r\n    preventedActions = preventedActions || [];\r\n    let actions = preventedActions;\r\n    const errors = [];\r\n    actions = actions.map(a=> new AltrpAction(a, widgetId, element))\r\n    // if(! actions.length && preventedActions.length && element){\r\n    //   this.registerWidgetActions(widgetId, preventedActions, eventName, element);\r\n    //   actions = this.getProperty(`actions.${widgetId}.${eventName}`, []);\r\n    // }\r\n    for (let action of actions){\r\n      try {\r\n        let result = await action.doAction();\r\n        if(! result.success){\r\n          if(result.error){\r\n            console.error(result.error);\r\n            errors.push(result.error);\r\n          }\r\n          break;\r\n        }\r\n      } catch(error){\r\n        errors.push(error);\r\n        console.error(error);\r\n      }\r\n    }\r\n    this.setProperty(`widget.statuses.${widgetId}.${eventName}`, 'noAction')\r\n    if (errors.length){\r\n      return {\r\n        success: false,\r\n        errors\r\n      }\r\n    }\r\n    return {success: true};\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @type {ActionsManager}\r\n */\r\nwindow.actionsManager = new ActionsManager;\r\nexport default window.actionsManager\r\n","import {changeCurrentEmailTemplate} from \"../store/current-email-template/actions\";\r\nimport {delay} from '../helpers';\r\nimport Resource from \"../../../../editor/src/js/classes/Resource\";\r\n/**\r\n * Отправляет шаблон письма на бэкенд\r\n * @param {string | null}emailTemplateGUID\r\n * @param {string} subject\r\n * @param {string} from\r\n * @param {string} to\r\n * @param {string} attachments\r\n * @return {Promise<void>}\r\n */\r\nexport async function sendEmail(emailTemplateGUID = null, subject = 'Message', from = '', to = '', attachments = ''){\r\n  if(! emailTemplateGUID){\r\n    return {success: true};\r\n  }\r\n  let templateLoader = (await import(/* webpackChunkName: 'TemplateLoader' */'../../../../editor/src/js/classes/modules/TemplateLoader')).default;\r\n  let template = await templateLoader.loadTemplate(emailTemplateGUID);\r\n  appStore.dispatch(changeCurrentEmailTemplate(template));\r\n  let html = '';\r\n  do{\r\n    await delay(1500);\r\n    if(_.get(window, 'emailTemplatesRenderer.emailTemplate.current')){\r\n      /**\r\n       * @var  {HTMLElement} html\r\n       */\r\n      html = window.emailTemplatesRenderer.emailTemplate.current.cloneNode(true);\r\n      html.style.display = 'table';\r\n      html = html.outerHTML;\r\n    }\r\n  }while(! html);\r\n  // appStore.dispatch(changeCurrentEmailTemplate(null));\r\n  const resource = new Resource({route: '/ajax/feedback-html'});\r\n  let res = await resource.post(\r\n    {\r\n      subject,\r\n      to,\r\n      from,\r\n      html,\r\n      attachments,\r\n    }\r\n  );\r\n  return {success: true}\r\n}\r\n","export const CHANGE_CURRENT_EMAIL_TEMPLATE = \"CHANGE_CURRENT_EMAIL_TEMPLATE\";\r\n\r\n\r\nexport function changeCurrentEmailTemplate(template) {\r\n  return {\r\n    type: CHANGE_CURRENT_EMAIL_TEMPLATE,\r\n    template\r\n  };\r\n}\r\n","export const TRIGGER_POPUP = \"TRIGGER_POPUP\";\r\n\r\nexport const togglePopup = payload => ({\r\n  type: TRIGGER_POPUP,\r\n  payload\r\n});"],"sourceRoot":""}